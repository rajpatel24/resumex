[{"/home/raj/Desktop/resumeX/resumeX/src/index.js":"1","/home/raj/Desktop/resumeX/resumeX/src/App.js":"2","/home/raj/Desktop/resumeX/resumeX/src/reportWebVitals.js":"3","/home/raj/Desktop/resumeX/resumeX/src/serviceWorker.js":"4","/home/raj/Desktop/resumeX/resumeX/src/utils/auth.js":"5","/home/raj/Desktop/resumeX/resumeX/src/theme/globalStyles.js":"6","/home/raj/Desktop/resumeX/resumeX/src/components/ScrollToTop.js":"7","/home/raj/Desktop/resumeX/resumeX/src/components/charts/BaseOptionChart.js":"8","/home/raj/Desktop/resumeX/resumeX/src/routes.js":"9","/home/raj/Desktop/resumeX/resumeX/src/utils/Authorization/Permissions.js":"10","/home/raj/Desktop/resumeX/resumeX/src/theme/index.js":"11","/home/raj/Desktop/resumeX/resumeX/src/utils/RequireAuth.js":"12","/home/raj/Desktop/resumeX/resumeX/src/utils/Authorization/Roles.js":"13","/home/raj/Desktop/resumeX/resumeX/src/layouts/LogoOnlyLayout.js":"14","/home/raj/Desktop/resumeX/resumeX/src/pages/Login.js":"15","/home/raj/Desktop/resumeX/resumeX/src/pages/Register.js":"16","/home/raj/Desktop/resumeX/resumeX/src/pages/DashboardApp.js":"17","/home/raj/Desktop/resumeX/resumeX/src/pages/EmployeeLogin.js":"18","/home/raj/Desktop/resumeX/resumeX/src/pages/JobApply.js":"19","/home/raj/Desktop/resumeX/resumeX/src/pages/Page404.js":"20","/home/raj/Desktop/resumeX/resumeX/src/pages/Page401.js":"21","/home/raj/Desktop/resumeX/resumeX/src/pages/Timeline.js":"22","/home/raj/Desktop/resumeX/resumeX/src/pages/InterviewDetails.js":"23","/home/raj/Desktop/resumeX/resumeX/src/pages/LoginOTP.js":"24","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/HrAccChangePass.js":"25","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/HrDashboardApp.js":"26","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/Joinees.js":"27","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/ResumeParser.js":"28","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/MasterRoles.js":"29","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/Groups.js":"30","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/FSDUser.js":"31","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/EmployeeUser.js":"32","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/officeLocation/OfficeLocation.js":"33","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/officeLocation/AddLocationForm.js":"34","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/technology/Technology.js":"35","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/technology/EditTechnology.js":"36","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/officeLocation/EditLocation.js":"37","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/technology/AddTechnologyForm.js":"38","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateSource/AddCandidateSourceForm.js":"39","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateSource/CandidateSource.js":"40","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateSource/EditCandidateSource.js":"41","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateStatus/CandidateStatus.js":"42","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateStatus/AddCandidateStatusForm.js":"43","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandidate.js":"44","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStack/AddTechStackForm.js":"45","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStack/TechStack.js":"46","/home/raj/Desktop/resumeX/resumeX/src/pages/ScheduleInterview.js":"47","/home/raj/Desktop/resumeX/resumeX/src/pages/User.js":"48","/home/raj/Desktop/resumeX/resumeX/src/pages/UploadDocuments.js":"49","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/BookedInterviews.js":"50","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmpAccChangePass.js":"51","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/EmployeeDashboardApp.js":"52","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/CompletedInterview.js":"53","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/businessUnits/EditBusinessUnits.js":"54","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/businessUnits/AddBusinessUnitsForm.js":"55","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/HrJobApplication.js":"56","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/Candidates.js":"57","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/HrCreateJobs.js":"58","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/RRFTemplates.js":"59","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/DRMRequisition.js":"60","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/roles-&-rights/EditGroup.js":"61","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/job-application/EditJobAplication.js":"62","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/users/CreateFSDUserForm.js":"63","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/users/EditFSDUser.js":"64","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/users/EditEmployeeUser.js":"65","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/RRF_Pool/RRFPoolHome.js":"66","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/roles-&-rights/CreateGroup.js":"67","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStack/EditTechStack.js":"68","/home/raj/Desktop/resumeX/resumeX/src/pages/JobOpenings.js":"69","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/EmployeeUser.js":"70","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobDetails.js":"71","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/OtherRequisition.js":"72","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/MyRequisition.js":"73","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisition-template/EditRRFTemplate.js":"74","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisition-template/CreateRRFTemplate.js":"75","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/users/CreateEMPUserForm.js":"76","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/CreateJobForm.js":"77","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/EmployeeCalendar.js":"78","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/profile/ProfileUpdateForm.js":"79","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/CreateCandidateForm.js":"80","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/booked-interview/CandidateInterview.js":"81","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisition/EditRequisition.js":"82","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisition/CreateRequisition.js":"83","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/businessUnits/BusinessUnits.js":"84","/home/raj/Desktop/resumeX/resumeX/src/theme/shadows.js":"85","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/noticePeriod/EditNoticePeriod.js":"86","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/index.js":"87","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/index.js":"88","/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/index.js":"89","/home/raj/Desktop/resumeX/resumeX/src/theme/typography.js":"90","/home/raj/Desktop/resumeX/resumeX/src/utils/Authorization/UserInfo.js":"91","/home/raj/Desktop/resumeX/resumeX/src/theme/palette.js":"92","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/noticePeriod/AddNoticePeriodForm.js":"93","/home/raj/Desktop/resumeX/resumeX/src/theme/shape.js":"94","/home/raj/Desktop/resumeX/resumeX/src/components/Page.js":"95","/home/raj/Desktop/resumeX/resumeX/src/_mocks_/user.js":"96","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/login/index.js":"97","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/booked-interview/PreviousRoundsDetailCards.js":"98","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/index.js":"99","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/index.js":"100","/home/raj/Desktop/resumeX/resumeX/src/pages/LoggedOut.js":"101","/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/DashboardNavbar.js":"102","/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/DashboardSidebar.js":"103","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmployeeDashboardSidebar.js":"104","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmployeeDashboardNavbar.js":"105","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/HrDashboardSidebar.js":"106","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/HrDashboardNavbar.js":"107","/home/raj/Desktop/resumeX/resumeX/src/utils/mockImages.js":"108","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/login/EmpLoginForm.js":"109","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/login/LoginForm.js":"110","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/login/OtpVerifyForm.js":"111","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Autocomplete.js":"112","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobCards.js":"113","/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/AccountPopover.js":"114","/home/raj/Desktop/resumeX/resumeX/src/_mocks_/account.js":"115","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmployeeSidebarConfig.js":"116","/home/raj/Desktop/resumeX/resumeX/src/components/NavSection.js":"117","/home/raj/Desktop/resumeX/resumeX/src/components/Scrollbar.js":"118","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmployeeAccountPopover.js":"119","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/HrAccountPopover.js":"120","/home/raj/Desktop/resumeX/resumeX/src/components/animate/index.js":"121","/home/raj/Desktop/resumeX/resumeX/src/components/@material-extend/index.js":"122","/home/raj/Desktop/resumeX/resumeX/src/components/MenuPopover.js":"123","/home/raj/Desktop/resumeX/resumeX/src/components/animate/MotionContainer.js":"124","/home/raj/Desktop/resumeX/resumeX/src/components/@material-extend/MHidden.js":"125","/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/index.js":"126","/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/Wrap.js":"127","/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/bounce/index.js":"128","/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/bounce/BounceOut.js":"129","/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/bounce/BounceIn.js":"130","/home/raj/Desktop/resumeX/resumeX/src/components/Logo.js":"131","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/RMGSidebarConfig.js":"132","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/FSD_HODSidebarConfig.js":"133","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/DRMSidebarConfig.js":"134","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/BUHeadSideBarConfig.js":"135","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/OnboardingHrSidebarConfig.js":"136","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobsPostsSort.js":"137","/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/SidebarConfig.js":"138","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobsPostsSearch.js":"139","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobsPostCard.js":"140","/home/raj/Desktop/resumeX/resumeX/src/components/SvgIconStyle.js":"141","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/IconButton.js":"142","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Typography.js":"143","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Backdrop.js":"144","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Tooltip.js":"145","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Button.js":"146","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Input.js":"147","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Paper.js":"148","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Lists.js":"149","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Card.js":"150","/home/raj/Desktop/resumeX/resumeX/src/components/SearchNotFound.js":"151","/home/raj/Desktop/resumeX/resumeX/src/components/Label.js":"152","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/InterviewListDialog.js":"153","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/ReviewCompleted.js":"154","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/ReviewScheduleCount.js":"155","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/InterviewCompleted.js":"156","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/InterviewScheduleCount.js":"157","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/CandidateTimeline.js":"158","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/user/index.js":"159","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/index.js":"160","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/booked-interview/BookedInterviewList.js":"161","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/index.js":"162","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/GenerateOfferLetter.js":"163","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/OnboardEngagement.js":"164","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/interviews/index.js":"165","/home/raj/Desktop/resumeX/resumeX/src/utils/formatNumber.js":"166","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/cto-round/CTORoundStatus.js":"167","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/user/UserMoreMenu.js":"168","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/cto-round/CTORoundResult.js":"169","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-two/TechnicalRoundTwoStatus.js":"170","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/cto-round/CTORoundRecording.js":"171","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/user/UserListToolbar.js":"172","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/user/UserListHead.js":"173","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-two/TechnicalRoundTwoRecording.js":"174","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/cto-round/ScheduleCTORound.js":"175","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-two/TechnicalRoundTwoResult.js":"176","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-two/ScheduleTechnicalRoundTwo.js":"177","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-one/TechnicalRoundOneStatus.js":"178","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/review-candidate/ReviewCandidateStatus.js":"179","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-one/TechnicalRoundOneRecording.js":"180","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/review-candidate/SendForReview.js":"181","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/review-candidate/ReviewFeedback.js":"182","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/initial-hr-call/InitialRoundStatus.js":"183","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/initial-hr-call/InitialRoundCallRecording.js":"184","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/initial-hr-call/InitialRoundFeedback.js":"185","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/initial-hr-call/InitialRoundCandidateForm.js":"186","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/screening-round/ScreeningRoundStatus.js":"187","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/screening-round/ScreeningRoundRecording.js":"188","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/screening-round/ScreeningRoundResult.js":"189","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-one/TechnicalRoundOneResult.js":"190","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-one/ScheduleTechnicalRoundOne.js":"191","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/index.js":"192","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/screening-round/ScheduleScreeningRound.js":"193","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/JobListToolbar.js":"194","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/JobListHead.js":"195","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/JobMoreMenu.js":"196","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppWeeklySales.js":"197","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppWebsiteVisits.js":"198","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppTrafficBySite.js":"199","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppTasks.js":"200","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/PrintButton.js":"201","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/interviews/SlotPicker.js":"202","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/interviews/JobApplications.js":"203","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/ListCandOnboardEngagement.js":"204","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/interviews/CandidateCalendar.js":"205","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppNewUsers.js":"206","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppOrderTimeline.js":"207","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppNewsUpdate.js":"208","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppItemOrders.js":"209","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppCurrentVisits.js":"210","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppCurrentSubject.js":"211","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppConversionRates.js":"212","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppBugReports.js":"213","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/UserListToolbar.js":"214","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/UserMoreMenu.js":"215","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/UserListHead.js":"216","/home/raj/Desktop/resumeX/resumeX/src/utils/formatTime.js":"217","/home/raj/Desktop/resumeX/resumeX/src/components/charts/index.js":"218","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandInterview.js":"219","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandJobApp.js":"220","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandDocuments.js":"221","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/resume-parser/ResumeCards.js":"222","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandPerDetails.js":"223","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/joinees/JoineesList.js":"224","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandHRAnalysis.js":"225","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppCandidatesInterviewed.js":"226","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppCandidatesSelected.js":"227","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppJobApplications.js":"228","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppJobListed.js":"229","/home/raj/Desktop/resumeX/resumeX/src/layouts/AuthLayout.js":"230","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobApplyForm.js":"231","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/noticePeriod/NoticePeriod.js":"232","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateStatus/EditCandidateStatus.js":"233","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/educationalDegree/EditEducationDegree.js":"234","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/educationalDegree/AddEducationalDegreeForm.js":"235","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/educationalDegree/EducationalDegree.js":"236","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionStatus/EditRequisitionStatus.js":"237","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionStatus/AddRequisitionStatusForm.js":"238","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStackTechnolgies/TechStackTechnologies.js":"239","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionStatus/RequisitionStatus.js":"240","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionTypes/EditRequisitionType.js":"241","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionTypes/AddRequisitionTypeForm.js":"242","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionTypes/RequisitionType.js":"243","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/currency/AddCurrencyForm.js":"244","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/currency/EditCurrency.js":"245","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/currency/Currency.js":"246","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStackTechnolgies/EditTechStackTechnologies.js":"247","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStackTechnolgies/AddTechStackTechnologiesForm.js":"248","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/ListCandDocuments.js":"249","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/index.js":"250","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/StepperForms/RequiredDetails.js":"251","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/StepperForms/OnboardingDetails.js":"252","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/StepperForms/OfferDetails.js":"253","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/register/index.js":"254","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/index.js":"255","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppConversionRates.js":"256","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppCurrentVisits.js":"257","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppBugReports.js":"258","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppCurrentSubject.js":"259","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppItemOrders.js":"260","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppNewUsers.js":"261","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppNewsUpdate.js":"262","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppOrderTimeline.js":"263","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppTrafficBySite.js":"264","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppWebsiteVisits.js":"265","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppWeeklySales.js":"266","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppTasks.js":"267","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/register/RegisterForm.js":"268","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppConversionRates.js":"269","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppBugReports.js":"270","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppCurrentSubject.js":"271","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppCurrentVisits.js":"272","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppItemOrders.js":"273","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppNewUsers.js":"274","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppNewsUpdate.js":"275","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppOrderTimeline.js":"276","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppTrafficBySite.js":"277","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppTasks.js":"278","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppWebsiteVisits.js":"279","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppWeeklySales.js":"280"},{"size":1049,"mtime":1673848215000,"results":"281","hashOfConfig":"282"},{"size":532,"mtime":1639548545000,"results":"283","hashOfConfig":"282"},{"size":362,"mtime":1639028590000,"results":"284","hashOfConfig":"282"},{"size":5040,"mtime":1639548545000,"results":"285","hashOfConfig":"282"},{"size":1487,"mtime":1675162545000,"results":"286","hashOfConfig":"282"},{"size":1836,"mtime":1675746389000,"results":"287","hashOfConfig":"282"},{"size":321,"mtime":1639548545000,"results":"288","hashOfConfig":"282"},{"size":5404,"mtime":1639548545000,"results":"289","hashOfConfig":"282"},{"size":25177,"mtime":1683028588000,"results":"290","hashOfConfig":"282"},{"size":674,"mtime":1675159699000,"results":"291","hashOfConfig":"282"},{"size":1028,"mtime":1639548545000,"results":"292","hashOfConfig":"282"},{"size":675,"mtime":1675159699000,"results":"293","hashOfConfig":"282"},{"size":343,"mtime":1676526271000,"results":"294","hashOfConfig":"282"},{"size":778,"mtime":1639548545000,"results":"295","hashOfConfig":"282"},{"size":2454,"mtime":1683718148000,"results":"296","hashOfConfig":"282"},{"size":2549,"mtime":1640929297000,"results":"297","hashOfConfig":"282"},{"size":2597,"mtime":1680528583000,"results":"298","hashOfConfig":"282"},{"size":2117,"mtime":1662033890000,"results":"299","hashOfConfig":"282"},{"size":1494,"mtime":1674209955000,"results":"300","hashOfConfig":"282"},{"size":1855,"mtime":1639548545000,"results":"301","hashOfConfig":"282"},{"size":1811,"mtime":1675059007000,"results":"302","hashOfConfig":"282"},{"size":542,"mtime":1661239330000,"results":"303","hashOfConfig":"282"},{"size":7848,"mtime":1681276304000,"results":"304","hashOfConfig":"282"},{"size":1962,"mtime":1683718504000,"results":"305","hashOfConfig":"282"},{"size":7916,"mtime":1678769546000,"results":"306","hashOfConfig":"282"},{"size":6545,"mtime":1676526271000,"results":"307","hashOfConfig":"282"},{"size":7919,"mtime":1680688251000,"results":"308","hashOfConfig":"282"},{"size":4335,"mtime":1673848215000,"results":"309","hashOfConfig":"282"},{"size":5029,"mtime":1680688972000,"results":"310","hashOfConfig":"282"},{"size":8125,"mtime":1680689009000,"results":"311","hashOfConfig":"282"},{"size":6738,"mtime":1678769546000,"results":"312","hashOfConfig":"282"},{"size":6777,"mtime":1678769546000,"results":"313","hashOfConfig":"282"},{"size":6823,"mtime":1683028588000,"results":"314","hashOfConfig":"282"},{"size":6549,"mtime":1683028588000,"results":"315","hashOfConfig":"282"},{"size":6774,"mtime":1683028588000,"results":"316","hashOfConfig":"282"},{"size":7390,"mtime":1683028588000,"results":"317","hashOfConfig":"282"},{"size":7385,"mtime":1683028588000,"results":"318","hashOfConfig":"282"},{"size":6476,"mtime":1683028588000,"results":"319","hashOfConfig":"282"},{"size":6653,"mtime":1683028588000,"results":"320","hashOfConfig":"282"},{"size":6886,"mtime":1683028588000,"results":"321","hashOfConfig":"282"},{"size":7541,"mtime":1683028588000,"results":"322","hashOfConfig":"282"},{"size":6884,"mtime":1683028588000,"results":"323","hashOfConfig":"282"},{"size":6653,"mtime":1683028588000,"results":"324","hashOfConfig":"282"},{"size":4832,"mtime":1680688122000,"results":"325","hashOfConfig":"282"},{"size":7306,"mtime":1683028588000,"results":"326","hashOfConfig":"282"},{"size":6934,"mtime":1683028588000,"results":"327","hashOfConfig":"282"},{"size":10832,"mtime":1680528583000,"results":"328","hashOfConfig":"282"},{"size":8334,"mtime":1639548545000,"results":"329","hashOfConfig":"282"},{"size":14947,"mtime":1679985220000,"results":"330","hashOfConfig":"282"},{"size":695,"mtime":1681122578000,"results":"331","hashOfConfig":"282"},{"size":8019,"mtime":1678769546000,"results":"332","hashOfConfig":"282"},{"size":6870,"mtime":1675846779000,"results":"333","hashOfConfig":"282"},{"size":5839,"mtime":1681279775000,"results":"334","hashOfConfig":"282"},{"size":5864,"mtime":1683028588000,"results":"335","hashOfConfig":"282"},{"size":4820,"mtime":1683028588000,"results":"336","hashOfConfig":"282"},{"size":8897,"mtime":1680687951000,"results":"337","hashOfConfig":"282"},{"size":9631,"mtime":1680687990000,"results":"338","hashOfConfig":"282"},{"size":14673,"mtime":1675059007000,"results":"339","hashOfConfig":"282"},{"size":12433,"mtime":1680686412000,"results":"340","hashOfConfig":"282"},{"size":16276,"mtime":1676526271000,"results":"341","hashOfConfig":"282"},{"size":15439,"mtime":1675059007000,"results":"342","hashOfConfig":"282"},{"size":9235,"mtime":1680688039000,"results":"343","hashOfConfig":"282"},{"size":14571,"mtime":1676526271000,"results":"344","hashOfConfig":"282"},{"size":15934,"mtime":1678769546000,"results":"345","hashOfConfig":"282"},{"size":14428,"mtime":1678769546000,"results":"346","hashOfConfig":"282"},{"size":14973,"mtime":1680771665000,"results":"347","hashOfConfig":"282"},{"size":12847,"mtime":1675059007000,"results":"348","hashOfConfig":"282"},{"size":8310,"mtime":1683028588000,"results":"349","hashOfConfig":"282"},{"size":19243,"mtime":1680611052000,"results":"350","hashOfConfig":"282"},{"size":8312,"mtime":1641552562000,"results":"351","hashOfConfig":"282"},{"size":2894,"mtime":1661504842000,"results":"352","hashOfConfig":"282"},{"size":20368,"mtime":1683028588000,"results":"353","hashOfConfig":"282"},{"size":18655,"mtime":1680686611000,"results":"354","hashOfConfig":"282"},{"size":20996,"mtime":1680685582000,"results":"355","hashOfConfig":"282"},{"size":21931,"mtime":1680690789000,"results":"356","hashOfConfig":"282"},{"size":17221,"mtime":1678769546000,"results":"357","hashOfConfig":"282"},{"size":18445,"mtime":1675059007000,"results":"358","hashOfConfig":"282"},{"size":19211,"mtime":1673848215000,"results":"359","hashOfConfig":"282"},{"size":9639,"mtime":1680528583000,"results":"360","hashOfConfig":"282"},{"size":38473,"mtime":1683028588000,"results":"361","hashOfConfig":"282"},{"size":43404,"mtime":1683269997000,"results":"362","hashOfConfig":"282"},{"size":63776,"mtime":1680687887000,"results":"363","hashOfConfig":"282"},{"size":58658,"mtime":1683629119000,"results":"364","hashOfConfig":"282"},{"size":6173,"mtime":1685009008039,"results":"365","hashOfConfig":"282"},{"size":3936,"mtime":1639548545000,"results":"366","hashOfConfig":"282"},{"size":5851,"mtime":1683028588000,"results":"367","hashOfConfig":"282"},{"size":1399,"mtime":1685007785263,"results":"368","hashOfConfig":"282"},{"size":1441,"mtime":1685007679710,"results":"369","hashOfConfig":"282"},{"size":1354,"mtime":1661239330000,"results":"370","hashOfConfig":"282"},{"size":2082,"mtime":1639548545000,"results":"371","hashOfConfig":"282"},{"size":1655,"mtime":1675162545000,"results":"372","hashOfConfig":"282"},{"size":2881,"mtime":1639548545000,"results":"373","hashOfConfig":"282"},{"size":4809,"mtime":1683028588000,"results":"374","hashOfConfig":"282"},{"size":179,"mtime":1639548545000,"results":"375","hashOfConfig":"282"},{"size":536,"mtime":1639548545000,"results":"376","hashOfConfig":"282"},{"size":738,"mtime":1639548545000,"results":"377","hashOfConfig":"282"},{"size":169,"mtime":1640757688000,"results":"378","hashOfConfig":"282"},{"size":7897,"mtime":1683119650000,"results":"379","hashOfConfig":"282"},{"size":719,"mtime":1639548545000,"results":"380","hashOfConfig":"282"},{"size":232,"mtime":1661239330000,"results":"381","hashOfConfig":"282"},{"size":1801,"mtime":1640951951000,"results":"382","hashOfConfig":"282"},{"size":1727,"mtime":1657547804000,"results":"383","hashOfConfig":"282"},{"size":4148,"mtime":1680528583000,"results":"384","hashOfConfig":"282"},{"size":3610,"mtime":1685008969647,"results":"385","hashOfConfig":"282"},{"size":1740,"mtime":1641552562000,"results":"386","hashOfConfig":"282"},{"size":10687,"mtime":1683028588000,"results":"387","hashOfConfig":"282"},{"size":1722,"mtime":1657547858000,"results":"388","hashOfConfig":"282"},{"size":348,"mtime":1639548545000,"results":"389","hashOfConfig":"282"},{"size":7596,"mtime":1675059007000,"results":"390","hashOfConfig":"282"},{"size":4512,"mtime":1683720578000,"results":"391","hashOfConfig":"282"},{"size":7487,"mtime":1683720607000,"results":"392","hashOfConfig":"282"},{"size":272,"mtime":1639548545000,"results":"393","hashOfConfig":"282"},{"size":2484,"mtime":1676443534000,"results":"394","hashOfConfig":"282"},{"size":5270,"mtime":1680528583000,"results":"395","hashOfConfig":"282"},{"size":244,"mtime":1639548545000,"results":"396","hashOfConfig":"282"},{"size":1236,"mtime":1681204159000,"results":"397","hashOfConfig":"282"},{"size":4886,"mtime":1675333166000,"results":"398","hashOfConfig":"282"},{"size":1478,"mtime":1639548545000,"results":"399","hashOfConfig":"282"},{"size":4529,"mtime":1685007895089,"results":"400","hashOfConfig":"282"},{"size":4511,"mtime":1675171216000,"results":"401","hashOfConfig":"282"},{"size":92,"mtime":1639548545000,"results":"402","hashOfConfig":"282"},{"size":48,"mtime":1639548545000,"results":"403","hashOfConfig":"282"},{"size":1464,"mtime":1639548545000,"results":"404","hashOfConfig":"282"},{"size":616,"mtime":1639548545000,"results":"405","hashOfConfig":"282"},{"size":829,"mtime":1639548545000,"results":"406","hashOfConfig":"282"},{"size":50,"mtime":1639548545000,"results":"407","hashOfConfig":"282"},{"size":445,"mtime":1639548545000,"results":"408","hashOfConfig":"282"},{"size":57,"mtime":1639548545000,"results":"409","hashOfConfig":"282"},{"size":686,"mtime":1639548545000,"results":"410","hashOfConfig":"282"},{"size":1573,"mtime":1639548545000,"results":"411","hashOfConfig":"282"},{"size":348,"mtime":1661934878000,"results":"412","hashOfConfig":"282"},{"size":1339,"mtime":1683028588000,"results":"413","hashOfConfig":"282"},{"size":1763,"mtime":1683028588000,"results":"414","hashOfConfig":"282"},{"size":1117,"mtime":1683028588000,"results":"415","hashOfConfig":"282"},{"size":1187,"mtime":1683028588000,"results":"416","hashOfConfig":"282"},{"size":587,"mtime":1683028588000,"results":"417","hashOfConfig":"282"},{"size":574,"mtime":1661239330000,"results":"418","hashOfConfig":"282"},{"size":1273,"mtime":1680611052000,"results":"419","hashOfConfig":"282"},{"size":2240,"mtime":1661239330000,"results":"420","hashOfConfig":"282"},{"size":7982,"mtime":1676526271000,"results":"421","hashOfConfig":"282"},{"size":886,"mtime":1639548545000,"results":"422","hashOfConfig":"282"},{"size":564,"mtime":1639548545000,"results":"423","hashOfConfig":"282"},{"size":344,"mtime":1639548545000,"results":"424","hashOfConfig":"282"},{"size":748,"mtime":1639548545000,"results":"425","hashOfConfig":"282"},{"size":339,"mtime":1639548545000,"results":"426","hashOfConfig":"282"},{"size":1041,"mtime":1639548545000,"results":"427","hashOfConfig":"282"},{"size":1587,"mtime":1639548545000,"results":"428","hashOfConfig":"282"},{"size":294,"mtime":1639548545000,"results":"429","hashOfConfig":"282"},{"size":693,"mtime":1639548545000,"results":"430","hashOfConfig":"282"},{"size":796,"mtime":1639548545000,"results":"431","hashOfConfig":"282"},{"size":678,"mtime":1639548545000,"results":"432","hashOfConfig":"282"},{"size":2373,"mtime":1639548545000,"results":"433","hashOfConfig":"282"},{"size":5429,"mtime":1681279795000,"results":"434","hashOfConfig":"282"},{"size":1514,"mtime":1675431600000,"results":"435","hashOfConfig":"282"},{"size":1523,"mtime":1675431600000,"results":"436","hashOfConfig":"282"},{"size":1524,"mtime":1675431600000,"results":"437","hashOfConfig":"282"},{"size":1523,"mtime":1675431600000,"results":"438","hashOfConfig":"282"},{"size":32902,"mtime":1680782526000,"results":"439","hashOfConfig":"282"},{"size":180,"mtime":1641552562000,"results":"440","hashOfConfig":"282"},{"size":174,"mtime":1661239330000,"results":"441","hashOfConfig":"282"},{"size":6075,"mtime":1681280048000,"results":"442","hashOfConfig":"282"},{"size":750,"mtime":1641552562000,"results":"443","hashOfConfig":"282"},{"size":15163,"mtime":1685009066818,"results":"444","hashOfConfig":"282"},{"size":12224,"mtime":1675846779000,"results":"445","hashOfConfig":"282"},{"size":183,"mtime":1661239330000,"results":"446","hashOfConfig":"282"},{"size":599,"mtime":1639548545000,"results":"447","hashOfConfig":"282"},{"size":1100,"mtime":1680782588000,"results":"448","hashOfConfig":"282"},{"size":1714,"mtime":1641552562000,"results":"449","hashOfConfig":"282"},{"size":7946,"mtime":1683093185000,"results":"450","hashOfConfig":"282"},{"size":993,"mtime":1661767274000,"results":"451","hashOfConfig":"282"},{"size":5623,"mtime":1680776427000,"results":"452","hashOfConfig":"282"},{"size":2429,"mtime":1641552562000,"results":"453","hashOfConfig":"282"},{"size":1898,"mtime":1641552562000,"results":"454","hashOfConfig":"282"},{"size":5876,"mtime":1673848215000,"results":"455","hashOfConfig":"282"},{"size":12832,"mtime":1680775025000,"results":"456","hashOfConfig":"282"},{"size":8269,"mtime":1683092877000,"results":"457","hashOfConfig":"282"},{"size":14136,"mtime":1680517474000,"results":"458","hashOfConfig":"282"},{"size":993,"mtime":1662108963000,"results":"459","hashOfConfig":"282"},{"size":888,"mtime":1661239330000,"results":"460","hashOfConfig":"282"},{"size":5876,"mtime":1680517474000,"results":"461","hashOfConfig":"282"},{"size":7796,"mtime":1680517474000,"results":"462","hashOfConfig":"282"},{"size":7324,"mtime":1683090828000,"results":"463","hashOfConfig":"282"},{"size":380,"mtime":1661239330000,"results":"464","hashOfConfig":"282"},{"size":361,"mtime":1661239330000,"results":"465","hashOfConfig":"282"},{"size":2391,"mtime":1661239330000,"results":"466","hashOfConfig":"282"},{"size":361,"mtime":1661239330000,"results":"467","hashOfConfig":"282"},{"size":943,"mtime":1683089151000,"results":"468","hashOfConfig":"282"},{"size":6379,"mtime":1680517474000,"results":"469","hashOfConfig":"282"},{"size":5052,"mtime":1683089358000,"results":"470","hashOfConfig":"282"},{"size":8269,"mtime":1683092705000,"results":"471","hashOfConfig":"282"},{"size":14092,"mtime":1680517474000,"results":"472","hashOfConfig":"282"},{"size":180,"mtime":1639548545000,"results":"473","hashOfConfig":"282"},{"size":17405,"mtime":1681276005000,"results":"474","hashOfConfig":"282"},{"size":2970,"mtime":1661239330000,"results":"475","hashOfConfig":"282"},{"size":1896,"mtime":1661239330000,"results":"476","hashOfConfig":"282"},{"size":18639,"mtime":1675846779000,"results":"477","hashOfConfig":"282"},{"size":1517,"mtime":1641552562000,"results":"478","hashOfConfig":"282"},{"size":1644,"mtime":1641552562000,"results":"479","hashOfConfig":"282"},{"size":2072,"mtime":1641552562000,"results":"480","hashOfConfig":"282"},{"size":2041,"mtime":1641552562000,"results":"481","hashOfConfig":"282"},{"size":1459,"mtime":1676526271000,"results":"482","hashOfConfig":"282"},{"size":5694,"mtime":1675846779000,"results":"483","hashOfConfig":"282"},{"size":5822,"mtime":1685007162579,"results":"484","hashOfConfig":"282"},{"size":9691,"mtime":1675764652000,"results":"485","hashOfConfig":"282"},{"size":1224,"mtime":1661239330000,"results":"486","hashOfConfig":"282"},{"size":1491,"mtime":1641552562000,"results":"487","hashOfConfig":"282"},{"size":2661,"mtime":1661239330000,"results":"488","hashOfConfig":"282"},{"size":2415,"mtime":1641552562000,"results":"489","hashOfConfig":"282"},{"size":1516,"mtime":1641552562000,"results":"490","hashOfConfig":"282"},{"size":2115,"mtime":1641552562000,"results":"491","hashOfConfig":"282"},{"size":2089,"mtime":1641552562000,"results":"492","hashOfConfig":"282"},{"size":1344,"mtime":1641552562000,"results":"493","hashOfConfig":"282"},{"size":1490,"mtime":1641552562000,"results":"494","hashOfConfig":"282"},{"size":2429,"mtime":1639548545000,"results":"495","hashOfConfig":"282"},{"size":1714,"mtime":1639548545000,"results":"496","hashOfConfig":"282"},{"size":1898,"mtime":1639548545000,"results":"497","hashOfConfig":"282"},{"size":509,"mtime":1639548545000,"results":"498","hashOfConfig":"282"},{"size":64,"mtime":1639548545000,"results":"499","hashOfConfig":"282"},{"size":4328,"mtime":1675258150000,"results":"500","hashOfConfig":"282"},{"size":1857,"mtime":1675059007000,"results":"501","hashOfConfig":"282"},{"size":14759,"mtime":1683028588000,"results":"502","hashOfConfig":"282"},{"size":1292,"mtime":1673848215000,"results":"503","hashOfConfig":"282"},{"size":44837,"mtime":1683028588000,"results":"504","hashOfConfig":"282"},{"size":5013,"mtime":1676526271000,"results":"505","hashOfConfig":"282"},{"size":56786,"mtime":1683028588000,"results":"506","hashOfConfig":"282"},{"size":1528,"mtime":1641214477000,"results":"507","hashOfConfig":"282"},{"size":1518,"mtime":1641214477000,"results":"508","hashOfConfig":"282"},{"size":1526,"mtime":1641214477000,"results":"509","hashOfConfig":"282"},{"size":1500,"mtime":1641214477000,"results":"510","hashOfConfig":"282"},{"size":1244,"mtime":1639548545000,"results":"511","hashOfConfig":"282"},{"size":14591,"mtime":1680517474000,"results":"512","hashOfConfig":"282"},{"size":6163,"mtime":1683028588000,"results":"513","hashOfConfig":"282"},{"size":7541,"mtime":1683028588000,"results":"514","hashOfConfig":"282"},{"size":5989,"mtime":1683028588000,"results":"515","hashOfConfig":"282"},{"size":4911,"mtime":1683028588000,"results":"516","hashOfConfig":"282"},{"size":6231,"mtime":1683028588000,"results":"517","hashOfConfig":"282"},{"size":7619,"mtime":1683028588000,"results":"518","hashOfConfig":"282"},{"size":6636,"mtime":1683028588000,"results":"519","hashOfConfig":"282"},{"size":7176,"mtime":1683028588000,"results":"520","hashOfConfig":"282"},{"size":6896,"mtime":1683028588000,"results":"521","hashOfConfig":"282"},{"size":7551,"mtime":1683028588000,"results":"522","hashOfConfig":"282"},{"size":6590,"mtime":1683028588000,"results":"523","hashOfConfig":"282"},{"size":6865,"mtime":1683028588000,"results":"524","hashOfConfig":"282"},{"size":6430,"mtime":1683028588000,"results":"525","hashOfConfig":"282"},{"size":7320,"mtime":1683028588000,"results":"526","hashOfConfig":"282"},{"size":6734,"mtime":1683028588000,"results":"527","hashOfConfig":"282"},{"size":9460,"mtime":1683028588000,"results":"528","hashOfConfig":"282"},{"size":9049,"mtime":1683028588000,"results":"529","hashOfConfig":"282"},{"size":14536,"mtime":1683028588000,"results":"530","hashOfConfig":"282"},{"size":750,"mtime":1640929001000,"results":"531","hashOfConfig":"282"},{"size":26335,"mtime":1676526271000,"results":"532","hashOfConfig":"282"},{"size":29800,"mtime":1676526271000,"results":"533","hashOfConfig":"282"},{"size":33536,"mtime":1676526271000,"results":"534","hashOfConfig":"282"},{"size":58,"mtime":1639548545000,"results":"535","hashOfConfig":"282"},{"size":750,"mtime":1639548545000,"results":"536","hashOfConfig":"282"},{"size":1382,"mtime":1675764282000,"results":"537","hashOfConfig":"282"},{"size":2128,"mtime":1675764282000,"results":"538","hashOfConfig":"282"},{"size":1490,"mtime":1640929001000,"results":"539","hashOfConfig":"282"},{"size":2089,"mtime":1640929001000,"results":"540","hashOfConfig":"282"},{"size":1516,"mtime":1640929001000,"results":"541","hashOfConfig":"282"},{"size":1491,"mtime":1640929001000,"results":"542","hashOfConfig":"282"},{"size":2417,"mtime":1675764282000,"results":"543","hashOfConfig":"282"},{"size":8100,"mtime":1678769546000,"results":"544","hashOfConfig":"282"},{"size":2101,"mtime":1675764282000,"results":"545","hashOfConfig":"282"},{"size":1782,"mtime":1675764282000,"results":"546","hashOfConfig":"282"},{"size":1517,"mtime":1640929001000,"results":"547","hashOfConfig":"282"},{"size":2041,"mtime":1640929001000,"results":"548","hashOfConfig":"282"},{"size":5592,"mtime":1683720401000,"results":"549","hashOfConfig":"282"},{"size":1344,"mtime":1639548545000,"results":"550","hashOfConfig":"282"},{"size":1490,"mtime":1639548545000,"results":"551","hashOfConfig":"282"},{"size":2089,"mtime":1639548545000,"results":"552","hashOfConfig":"282"},{"size":2115,"mtime":1639548545000,"results":"553","hashOfConfig":"282"},{"size":1516,"mtime":1639548545000,"results":"554","hashOfConfig":"282"},{"size":1491,"mtime":1639548545000,"results":"555","hashOfConfig":"282"},{"size":2424,"mtime":1661239330000,"results":"556","hashOfConfig":"282"},{"size":5569,"mtime":1678769546000,"results":"557","hashOfConfig":"282"},{"size":2072,"mtime":1639548545000,"results":"558","hashOfConfig":"282"},{"size":2041,"mtime":1639548545000,"results":"559","hashOfConfig":"282"},{"size":1644,"mtime":1639548545000,"results":"560","hashOfConfig":"282"},{"size":1517,"mtime":1639548545000,"results":"561","hashOfConfig":"282"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},"2gltk8",{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"564"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"564"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"564"},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"564"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"564"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"564"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"619","usedDeprecatedRules":"564"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"564"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"564"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"564"},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"564"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"564"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"564"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"564"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"564"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"564"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"564"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"564"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"564"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"564"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661","usedDeprecatedRules":"564"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"564"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"564"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"564"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"564"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"564"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"564"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"564"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"564"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":3,"source":"690","usedDeprecatedRules":"564"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"564"},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"696","usedDeprecatedRules":"564"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699","usedDeprecatedRules":"564"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"564"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"564"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"564"},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"564"},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"564"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"564"},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"564"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"564"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"564"},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"729","usedDeprecatedRules":"564"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732","usedDeprecatedRules":"564"},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"564"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"564"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"564"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"564"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"747","usedDeprecatedRules":"564"},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"564"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"753","messages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755","usedDeprecatedRules":"564"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758","usedDeprecatedRules":"564"},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"761","usedDeprecatedRules":"564"},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"764","usedDeprecatedRules":"564"},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"767","usedDeprecatedRules":"564"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"564"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"564"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"776","usedDeprecatedRules":"564"},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779","usedDeprecatedRules":"564"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"782","usedDeprecatedRules":"564"},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":2,"source":"785","usedDeprecatedRules":"564"},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"564"},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"791","usedDeprecatedRules":"564"},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794"},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"797","messages":"798","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"799","usedDeprecatedRules":"564"},{"filePath":"800","messages":"801","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"802","messages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"810","usedDeprecatedRules":"564"},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"564"},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"818","messages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"820","messages":"821","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"826","usedDeprecatedRules":"564"},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"564"},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"840"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"845","usedDeprecatedRules":"564"},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852","usedDeprecatedRules":"564"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855","usedDeprecatedRules":"564"},{"filePath":"856","messages":"857","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"858","usedDeprecatedRules":"564"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"865","usedDeprecatedRules":"564"},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"870","usedDeprecatedRules":"564"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"873","usedDeprecatedRules":"564"},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878"},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"881","usedDeprecatedRules":"564"},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"898","messages":"899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"904","messages":"905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"922","usedDeprecatedRules":"564"},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"927","messages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"929","messages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"935","messages":"936","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"937","messages":"938","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"939","messages":"940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"941","messages":"942","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"943","messages":"944","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"945","messages":"946","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"947","messages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"949","usedDeprecatedRules":"564"},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"958","messages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"960","usedDeprecatedRules":"564"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"965","messages":"966","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"967","usedDeprecatedRules":"564"},{"filePath":"968","messages":"969","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"970","messages":"971","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"972"},{"filePath":"973","messages":"974","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"975","usedDeprecatedRules":"564"},{"filePath":"976","messages":"977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"978","messages":"979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"986","usedDeprecatedRules":"564"},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"989","messages":"990","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"991","usedDeprecatedRules":"564"},{"filePath":"992","messages":"993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"994","messages":"995","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"996","messages":"997","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"998","usedDeprecatedRules":"564"},{"filePath":"999","messages":"1000","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001","usedDeprecatedRules":"564"},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004","usedDeprecatedRules":"564"},{"filePath":"1005","messages":"1006","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1007","usedDeprecatedRules":"564"},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1010","messages":"1011","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1012","messages":"1013","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1014","usedDeprecatedRules":"564"},{"filePath":"1015","messages":"1016","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1017","usedDeprecatedRules":"564"},{"filePath":"1018","messages":"1019","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1020","usedDeprecatedRules":"564"},{"filePath":"1021","messages":"1022","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1023","usedDeprecatedRules":"564"},{"filePath":"1024","messages":"1025","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1026","usedDeprecatedRules":"564"},{"filePath":"1027","messages":"1028","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1029","usedDeprecatedRules":"564"},{"filePath":"1030","messages":"1031","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1032","usedDeprecatedRules":"564"},{"filePath":"1033","messages":"1034","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1035","messages":"1036","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1037","usedDeprecatedRules":"564"},{"filePath":"1038","messages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1040","usedDeprecatedRules":"564"},{"filePath":"1041","messages":"1042","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1043","usedDeprecatedRules":"564"},{"filePath":"1044","messages":"1045","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1046","usedDeprecatedRules":"564"},{"filePath":"1047","messages":"1048","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1049","messages":"1050","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1051","usedDeprecatedRules":"564"},{"filePath":"1052","messages":"1053","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1054","usedDeprecatedRules":"564"},{"filePath":"1055","messages":"1056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1057","messages":"1058","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1059","usedDeprecatedRules":"564"},{"filePath":"1060","messages":"1061","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1062","messages":"1063","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1064","messages":"1065","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1066","messages":"1067","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1068","messages":"1069","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1070","usedDeprecatedRules":"564"},{"filePath":"1071","messages":"1072","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1073","usedDeprecatedRules":"564"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1076","usedDeprecatedRules":"564"},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1079","usedDeprecatedRules":"564"},{"filePath":"1080","messages":"1081","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1082","messages":"1083","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1084","messages":"1085","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1086","usedDeprecatedRules":"564"},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1089","messages":"1090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1091","messages":"1092","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1093","messages":"1094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1095","messages":"1096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1097","messages":"1098","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1099","messages":"1100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1101","messages":"1102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1103","messages":"1104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1105","messages":"1106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1107","messages":"1108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1109","messages":"1110","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1111","usedDeprecatedRules":"564"},{"filePath":"1112","messages":"1113","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1114","usedDeprecatedRules":"564"},{"filePath":"1115","messages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1117","usedDeprecatedRules":"564"},{"filePath":"1118","messages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1120","messages":"1121","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1122","usedDeprecatedRules":"564"},{"filePath":"1123","messages":"1124","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1125","usedDeprecatedRules":"564"},{"filePath":"1126","messages":"1127","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1128","usedDeprecatedRules":"564"},{"filePath":"1129","messages":"1130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1131","messages":"1132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1133","messages":"1134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1135","messages":"1136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1137","messages":"1138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1139","messages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1141","usedDeprecatedRules":"564"},{"filePath":"1142","messages":"1143","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1144","usedDeprecatedRules":"564"},{"filePath":"1145","messages":"1146","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1147","usedDeprecatedRules":"564"},{"filePath":"1148","messages":"1149","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1150","usedDeprecatedRules":"564"},{"filePath":"1151","messages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1153","usedDeprecatedRules":"564"},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1156","usedDeprecatedRules":"564"},{"filePath":"1157","messages":"1158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1159","usedDeprecatedRules":"564"},{"filePath":"1160","messages":"1161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1162","usedDeprecatedRules":"564"},{"filePath":"1163","messages":"1164","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1165","usedDeprecatedRules":"564"},{"filePath":"1166","messages":"1167","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1168","usedDeprecatedRules":"564"},{"filePath":"1169","messages":"1170","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1171","usedDeprecatedRules":"564"},{"filePath":"1172","messages":"1173","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1174","usedDeprecatedRules":"564"},{"filePath":"1175","messages":"1176","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1177","usedDeprecatedRules":"564"},{"filePath":"1178","messages":"1179","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1180","usedDeprecatedRules":"564"},{"filePath":"1181","messages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1183","usedDeprecatedRules":"564"},{"filePath":"1184","messages":"1185","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1186","usedDeprecatedRules":"564"},{"filePath":"1187","messages":"1188","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1189","usedDeprecatedRules":"564"},{"filePath":"1190","messages":"1191","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1192","usedDeprecatedRules":"564"},{"filePath":"1193","messages":"1194","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"1195","usedDeprecatedRules":"564"},{"filePath":"1196","messages":"1197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1198","messages":"1199","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1200","usedDeprecatedRules":"564"},{"filePath":"1201","messages":"1202","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1203","usedDeprecatedRules":"564"},{"filePath":"1204","messages":"1205","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1206","usedDeprecatedRules":"564"},{"filePath":"1207","messages":"1208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1209","messages":"1210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1211","messages":"1212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1213","messages":"1214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1215","messages":"1216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1217","messages":"1218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1219","messages":"1220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1221","messages":"1222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1223","messages":"1224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1225","messages":"1226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1227","usedDeprecatedRules":"564"},{"filePath":"1228","messages":"1229","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1230","usedDeprecatedRules":"564"},{"filePath":"1231","messages":"1232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1233","messages":"1234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1235","messages":"1236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1237","messages":"1238","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1239","usedDeprecatedRules":"564"},{"filePath":"1240","messages":"1241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1242","messages":"1243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1244","messages":"1245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1246","messages":"1247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1248","messages":"1249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1250","messages":"1251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1252","messages":"1253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1254","messages":"1255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1256","messages":"1257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1258","messages":"1259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1260","messages":"1261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},{"filePath":"1262","messages":"1263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"564"},"/home/raj/Desktop/resumeX/resumeX/src/index.js",[],["1264","1265"],"/home/raj/Desktop/resumeX/resumeX/src/App.js",[],"/home/raj/Desktop/resumeX/resumeX/src/reportWebVitals.js",[],"/home/raj/Desktop/resumeX/resumeX/src/serviceWorker.js",[],"/home/raj/Desktop/resumeX/resumeX/src/utils/auth.js",["1266"],"import { createContext, useContext, useState } from \"react\";\nimport PERMISSIONS from \"./Authorization/Permissions\"\n\n\nexport const AuthContext = createContext(null)\n\nexport const AuthProvider = ({children}) => {\n\n    const [user, setUser] = useState({});\n\n    const login = user => {\n        var user_id = user.pk\n        var user_name = user.username\n        var f_name = user.first_name\n        var m_name = user.middle_name\n        var l_name = user.last_name\n        var u_email = user.email\n        var u_mobile = user.mobile\n        var u_master_role = user.master_role.master_role\n        var u_role = user.role.role_name\n        var u_perm = user.permissions\n        var join_date = user.joined_date\n        var modify_date = user.update_date\n        var is_active = user.is_active\n        var is_staff = user.is_staff\n\n        setUser({ pk: user_id, username: user_name, first_name: f_name, \n            middle_name: m_name, last_name: l_name, master_role: u_master_role, role:u_role, permissions: u_perm, email: u_email, mobile: u_mobile, joining_data: join_date, profile_update_date: modify_date, is_active: is_active, is_staff: is_staff  \n          })\n      \n    };\n\n    // Logout updates the user data to default\n    const logout = () => {\n        setUser(null)\n    };\n\n    return (\n        <AuthContext.Provider value={{ user, login, logout }}>\n        {children}\n        </AuthContext.Provider>\n    );\n}\n\nexport const useAuth = () => {\n    return useContext(AuthContext)\n}\n","/home/raj/Desktop/resumeX/resumeX/src/theme/globalStyles.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/ScrollToTop.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/charts/BaseOptionChart.js",[],"/home/raj/Desktop/resumeX/resumeX/src/routes.js",[],"/home/raj/Desktop/resumeX/resumeX/src/utils/Authorization/Permissions.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/utils/RequireAuth.js",["1267","1268","1269"],"import React, { Children, useContext,  useState } from 'react'\nimport UserInfo from './Authorization/UserInfo'\n\nexport const RequireAuth = ({allowedRoles, permissions, children}) => {  \n    const userData = UserInfo()\n\n    // var is_allowed = userData?.role?.some(allowed_role => allowedRoles?.includes(allowed_role))\n\n    var is_allowed = allowedRoles?.includes(userData?.role)\n\n    // var has_perm = permissions?.includes(userData?.permissions)\n    var has_perm = permissions.some(perm => userData?.permissions?.includes(perm))\n\n    if (is_allowed && has_perm){\n      return(children)\n    }\n    else{\n      return <h1> You do not have enough permissions ! </h1>\n    }\n  }\n\n","/home/raj/Desktop/resumeX/resumeX/src/utils/Authorization/Roles.js",[],"/home/raj/Desktop/resumeX/resumeX/src/layouts/LogoOnlyLayout.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/Login.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/Register.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/DashboardApp.js",["1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281"],"// material\nimport { Box, Grid, Container, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport * as constants from \"src/utils/constants\";\n// components\nimport Page from '../components/Page';\nimport {\n  AppTasks,\n  AppNewUsers,\n  AppBugReports,\n  AppItemOrders,\n  AppNewsUpdate,\n  AppWeeklySales,\n  AppOrderTimeline,\n  AppCurrentVisits,\n  AppWebsiteVisits,\n  AppTrafficBySite,\n  AppCurrentSubject,\n  AppConversionRates\n} from '../components/_dashboard/app';\n\n// ----------------------------------------------------------------------\nconst headerStyle = {\n  color: \"white\",\n  textShadow: \"-1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000\",\n  textAlign: \"center\",\n  fontSize: \"40px\",\n  paddingTop: \"40px\"\n}\nexport default function DashboardApp() {\n\n  const [firstNameData, setFirstNameData]  = useState([]);\n  const getFirstName = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setFirstNameData(response.data.data.user.first_name)\n      console.log(\"working!\")\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n  console.log(firstNameData)\n\n  useEffect(() => {\n    getFirstName()\n  }, [])\n  return (\n    <Page title=\"Dashboard | Minimal-UI\">\n      <Container maxWidth=\"xl\">\n        <Box sx={{ pb: 5 }}>\n          <Typography variant=\"h4\">Hi, Welcome {firstNameData}  </Typography>\n        </Box>\n        \n        <div style={{background: 'url(\"/static/campus-intern_2021.jpg\")', backgroundSize: \"cover\", minHeight: \"580px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n        <h1 style={{fontSize: \"2.75em\",color: \"#fff\", textShadow: \"2px 2px #000\", alignItems: \"center\", justifyContent: \"center\",\n        fontWeight: \"bold\", position: \"relative\", zIndex: \"10\"}}>\n          <span style={{color: \"#f05e0a\"}}>Together, </span>\n          Let’s Connect. Innovate. Transform.</h1>\n        </div>\n\n        <Grid container spacing={3} sx={{ mt: 3 }}>\n\n          <Grid item xs={12} md={6} lg={8}>\n            <AppNewsUpdate />\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={4}>\n            <AppOrderTimeline />\n          </Grid>\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppTrafficBySite />\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={8}>\n            <AppTasks />\n          </Grid> */}\n        </Grid>\n      </Container>\n    </Page>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/pages/EmployeeLogin.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/JobApply.js",["1282","1283","1284","1285","1286"],"import { Link as RouterLink } from \"react-router-dom\";\n// material\nimport { styled } from \"@mui/material/styles\";\nimport { Box, Card, Link, Container, Typography, CardContent } from \"@mui/material\";\n// layouts\nimport AuthLayout from \"../layouts/AuthLayout\";\n// components\nimport Page from \"../components/Page\";\nimport { MHidden } from \"../components/@material-extend\";\nimport { RegisterForm } from \"../components/authentication/register\";\nimport JobApplyForm from \"../components/_dashboard/jobs/JobApplyForm\";\n\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  [theme.breakpoints.up(\"md\")]: {\n    display: \"flex\",\n  },\n}));\n\nconst ContentStyle = styled(\"div\")(({ theme }) => ({\n  margin: \"auto\",\n  maxWidth: \"80%\",\n  flexDirection: \"column\",\n  padding: theme.spacing(5, 0),\n}));\n// ----------------------------------------------------------------------\n\nexport default function JobApply() {\n  return (\n            <RootStyle title=\"Job Apply | ResumeX\">\n            <Link to=\"/dashboard/jobs/openings/\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back </Link>\n            <Container maxWidth=\"xl\">\n              <ContentStyle>\n              <Card sx={{ mt: 2 }} variant=\"outlined\">\n                <CardContent>\n                  <JobApplyForm />\n                </CardContent>\n                </Card>\n                </ContentStyle>\n            </Container>\n          </RootStyle>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/pages/Page404.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/Page401.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/Timeline.js",["1287","1288","1289","1290","1291","1292","1293","1294","1295"],"import axios from 'axios';\nimport Page from '../components/Page';\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete, Button, Card, CardContent, Container, TextField, Typography, Skeleton } from '@mui/material';\n\nexport default function Timeline() {\n    return(\n        <Page title=\"Timeline | ResumeX\">\n            <Container maxWidth=\"xl\">\n                <Typography variant=\"h3\" sx={{mb: 5}} align=\"center\">\n                    Timeline\n                </Typography>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/pages/InterviewDetails.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/LoginOTP.js",["1296","1297"],"import { Link as RouterLink } from 'react-router-dom';\n// material\nimport { styled } from '@mui/material/styles';\nimport { Card, Stack, Link, Container, Typography } from '@mui/material';\n// layouts\nimport AuthLayout from '../layouts/AuthLayout';\n// components\nimport Page from '../components/Page';\nimport { MHidden } from '../components/@material-extend';\nimport { OtpVerifyForm } from '../components/authentication/login/';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  [theme.breakpoints.up('md')]: {\n    display: 'flex'\n  }\n}));\n\nconst SectionStyle = styled(Card)(({ theme }) => ({\n  width: '100%',\n  maxWidth: 464,\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  margin: theme.spacing(2, 0, 2, 2)\n}));\n\nconst ContentStyle = styled('div')(({ theme }) => ({\n  maxWidth: 480,\n  margin: 'auto',\n  display: 'flex',\n  minHeight: '100vh',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function OTPForm() {\n  return (\n    <RootStyle title=\"OTP Verification | ResumeX\">\n\n      <AuthLayout/>\n\n      <MHidden width=\"mdDown\">\n        <SectionStyle>\n          <Typography variant=\"h3\" sx={{ px: 5, mt: 10, mb: 5 }}>\n            OTP Verification\n          </Typography>\n          <img src=\"/static/illustrations/login-illustration.png\" alt=\"login\" />\n        </SectionStyle>\n      </MHidden>\n\n      <Container maxWidth=\"sm\">\n        <ContentStyle>\n          <Stack sx={{ mb: 5 }}>\n            <Typography variant=\"h4\" gutterBottom>\n             Verify OTP\n            </Typography>\n            <Typography sx={{ color: 'text.secondary' }}>We have sent a verification code to your email address.</Typography>\n          </Stack>\n\n          <OtpVerifyForm />\n\n        </ContentStyle>\n      </Container>\n    </RootStyle>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/HrAccChangePass.js",["1298","1299","1300","1301","1302","1303"],"import React from \"react\";\nimport Page from '../../Page';\nimport { useState } from 'react';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { Icon } from '@iconify/react';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport * as Yup from \"yup\";\nimport { useFormik, FormikProvider, ErrorMessage, Field } from \"formik\";\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { TextField, IconButton, CardContent,} from '@mui/material';\nimport { LoadingButton } from \"@mui/lab\";\nimport {useSnackbar} from 'notistack';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport { Card, CardHeader, Container } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\n\nexport default function HrAccChangePass() {\n\n    const authToken = localStorage.getItem('authToken');\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    const [showPassword1, setShowPassword1] = useState(false);\n\n    const [showPassword2, setShowPassword2] = useState(false);\n\n    const handleShowPassword = () => { setShowPassword((show) => !show); };\n\n    const handleShowPassword1 = () => { setShowPassword1((show) => !show); };\n\n    const handleShowPassword2 = () => { setShowPassword2((show) => !show); };\n    \n    const { enqueueSnackbar } = useSnackbar();\n\n    const navigate = useNavigate();\n\n    const thisUser = localStorage.getItem('user')\n    const thisUserObject = JSON.parse(thisUser);\n\n    const PasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]{8,}$/\n\n    const ChangePassFormSchema = Yup.object().shape({\n        OldPassword: Yup.string()\n            .required('Old password is required'),\n\n        NewPassword: Yup.string()\n            .min(8, \"Minimum Password Length is 8\")\n            .matches(PasswordRegex, 'Password must have atleast 1 lower,upper,number and special character').\n            required('New password is required'),\n\n        ConfirmPassword: Yup.string()\n            .min(8,\"Minimum Password Length is 8\")\n            .matches(PasswordRegex, 'Password must have atleast 1 lower,upper,number and special character')\n            .oneOf([Yup.ref('NewPassword')], 'Your passwords do not match.')\n            .required('Confirm password is required')\n      });\n\n      const callChangePassword = async (formValues) => {\n\n        var bodyFormData = new FormData();\n\n        bodyFormData.append(\"old_password\", formValues.OldPassword);\n        bodyFormData.append(\"new_password1\", formValues.NewPassword);\n        bodyFormData.append(\"new_password2\", formValues.ConfirmPassword);\n\n\n        await apiInstance({\n            method: \"post\",\n            url: \"user/password/change/\",\n            headers: {\n                Authorization: \"token \" + authToken,\n            },\n            data: bodyFormData,\n        })\n            .then(async function (response) {                \n                enqueueSnackbar(response.data?.detail, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/app\", { replace: true });\n            })\n            .catch(function (error) {\n                let error_msg_key = Object.keys(error.response.data)[0]\n                let err_msg = error.response.data?.[error_msg_key]\n\n                enqueueSnackbar(err_msg, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n\n    const formik = useFormik({\n        initialValues: {\n        OldPassword: '',\n        NewPassword: '',\n        ConfirmPassword: '',\n        },\n        validationSchema: ChangePassFormSchema,\n        onSubmit: (values) => {\n            callChangePassword(values)\n        }\n    });\n\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n\n    return (\n        <Page title=\"Candidates\">\n            <center>\n            <Container maxWidth=\"xl\" style={{alignContent: \"center\", verticalAlign: \"center\"}}>\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\n                    <Card sx={{ mt: 20 }} variant=\"outlined\" style={{width: \"50%\", height: \"30rem\"}}>\n                    <CardHeader title=\"Change Password\" /><br/><br/>\n                    <CardContent>\n\n                    <TextField \n                        style={{width: \"80%\"}}\n                        label=\"Old Password\" \n\n                        {...getFieldProps('OldPassword')}\n\n                        type={showPassword ? 'text' : 'password'}\n\n                        InputProps={{\n\n                        endAdornment: (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={handleShowPassword} edge=\"end\">\n                            <Icon icon={showPassword ? eyeFill : eyeOffFill} />\n                            </IconButton>\n                        </InputAdornment>\n                        )}}\n\n                        error={Boolean(touched.OldPassword && errors.OldPassword)}\n                        helperText={touched.OldPassword && errors.OldPassword} />\n\n                        <TextField \n                        style={{width: \"80%\", marginTop:\"3%\"}}\n                        label=\"New Password\" \n\n                        {...getFieldProps('NewPassword')}\n\n                        type={showPassword1 ? 'text' : 'password'}\n\n                        InputProps={{\n                        endAdornment: \n                        (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={handleShowPassword1} edge=\"end\">\n                            <Icon icon={showPassword1 ? eyeFill : eyeOffFill} />\n                            </IconButton>\n                        </InputAdornment>\n                        )}}\n\n                        error={Boolean(touched.NewPassword && errors.NewPassword)}\n                        helperText={touched.NewPassword && errors.NewPassword}\n\n                        />\n                \n                        <TextField \n                        style={{width: \"80%\", marginTop:\"3%\"}}\n                        label=\"Confirm Password\" \n\n                        {...getFieldProps('ConfirmPassword')}\n\n                        type={showPassword2 ? 'text' : 'password'}\n\n                        InputProps={{\n                        endAdornment: \n                        (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={handleShowPassword2} edge=\"end\">\n                            <Icon icon={showPassword2 ? eyeFill : eyeOffFill} />\n                            </IconButton>\n                        </InputAdornment>\n                        )}}\n\n                        error={Boolean(touched.ConfirmPassword && errors.ConfirmPassword)}\n                        helperText={touched.ConfirmPassword && errors.ConfirmPassword}\n\n                        />\n\n                        <LoadingButton\n                        style={{width: \"80%\", marginTop:\"3%\"}}\n                        fullWidth\n                        size=\"large\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        loading={isSubmitting}\n                        >\n                            Change Password\n                        </LoadingButton>\n                    </CardContent>\n                </Card>\n            </form>\n        </Container>\n        </center>\n    </Page>\n    )\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/HrDashboardApp.js",["1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314"],"import React, { useEffect, useState } from \"react\";\n// material\nimport { Box, Grid, Container, Typography, Button } from '@mui/material';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\n// components\nimport Page from '../../Page';\nimport AppJobListed from '../app/AppJobListed';\nimport AppJobApplications from '../app/AppJobApplications';\nimport AppCandidatesInterviewed from '../app/AppCandidatesInterviewed';\nimport AppCandidatesSelected from '../app/AppCandidatesSelected';\nimport {\n  AppTasks,\n  AppNewUsers,\n  AppBugReports,\n  AppItemOrders,\n  AppNewsUpdate,\n  AppWeeklySales,\n  AppOrderTimeline,\n  AppCurrentVisits,\n  AppWebsiteVisits,\n  AppTrafficBySite,\n  AppCurrentSubject,\n  AppConversionRates,\n} from '../app';\n\nimport JoineesList from '../joinees/JoineesList'\n\n// axios\nimport axios from 'axios';\nimport { useSnackbar } from 'notistack';\nimport { apiInstance } from \"src/utils/apiAuth\";\nimport UserInfo from \"src/utils/Authorization/UserInfo\";\n\n\n// ----------------------------------------------------------------------\n\nexport default function HrDashboardApp() {\n  const { enqueueSnackbar } = useSnackbar();\n  const hrToken = localStorage.getItem(\"authToken\");\n  const [open, setOpen] = useState(false);\n  const [joineesData, setJoineesData] = useState([]);\n  const userInfo = UserInfo();\n  const userRole = userInfo?.role\n\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  \n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const getJoineesList = () => {\n    apiInstance({\n        method: \"get\",\n        url: \"candidate-viewset/joinees_list/\",\n        headers: {\n            Authorization: \"token \" + hrToken,\n        }\n    })\n        .then(function (response) {\n            const joineesList = getJoineesArray(response.data.data)\n            setJoineesData(joineesList)\n            setOpen(true)\n        })\n        .catch(function (error) {\n          console.log('Something went wrong. Please try after sometime.')\n        });\n  }\n\n  const getJoineesArray = (Data) =>\n        Data.map((JObj) => ({\n            pk: JObj.id,\n            Name: JObj.user.first_name + \" \" + JObj.user.last_name,\n            Email: JObj.user.email,\n            Mobile: JObj.user.mobile,\n            Doj: JObj.onboard_details.join_date,\n            Status: JObj.status.status\n        }));\n\n  useEffect(() => {\n    getJoineesList()\n   }, [])   \n\n  return (\n    <Page title=\"Hr Dashboard | Minimal-UI\">\n      <Container maxWidth=\"xl\">\n        <Box sx={{ pb: 5 }}>\n          <Typography variant=\"h4\">Hi, Welcome back</Typography>\n        </Box>\n\n        <div style={{background: 'url(\"/static/campus-intern_2021.jpg\")', backgroundSize: \"cover\", minHeight: \"380px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n        <h1 style={{fontSize: \"2.75em\",color: \"#fff\", textShadow: \"2px 2px #000\", alignItems: \"center\", justifyContent: \"center\",\n        fontWeight: \"bold\", position: \"relative\", zIndex: \"10\"}}>\n          <span style={{color: \"#f05e0a\", alignItems: \"center\", justifyContent: \"center\"}}>Connecting People</span>\n          <p style={{alignItems: \"center\", justifyContent: \"center\"}}>Together with Opportunity & Resilience</p></h1>\n        </div>\n\n        <Grid container spacing={3} sx={{ mt: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n            <AppJobListed />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <AppJobApplications />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <AppCandidatesInterviewed />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <AppCandidatesSelected />\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={8}>\n            <AppNewsUpdate />\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={4}>\n            <AppOrderTimeline />\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={8}>\n            <AppWebsiteVisits />\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={4}>\n            <AppCurrentVisits />\n          </Grid>\n\n          <Grid item xs={12} md={6} lg={8}>\n            <AppConversionRates />\n          </Grid>\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppCurrentSubject />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppOrderTimeline />\n          </Grid> */}\n\n          <Grid item xs={12} md={6} lg={4}>\n            <AppTrafficBySite />\n          </Grid>\n\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppTasks />\n          </Grid> */}\n        </Grid>\n\n        {/* <h1 style={headerStyle}>Connecting People</h1>\n        <h1 style={{textAlign: 'center', fontWeight: 'bold', fontSize: \"40px\", paddingBottom: \"40px\"}}>Together with Opportunity & Resilience</h1> */}\n\n        <Grid container spacing={3} sx={{mt: 5}}>\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppWebsiteVisits />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppCurrentVisits />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppConversionRates />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppCurrentSubject />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppNewsUpdate />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppTrafficBySite />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppTasks />\n          </Grid> */}\n        </Grid>\n\n        {/* ------------ Joinees List Dialog Box ---------------- */}\n\n        {userRole === 'FSD_Admin' || userRole === 'FSD_HOD' || userRole === 'OnBoarding_HR' ? \n\n          <Dialog\n            maxWidth='lg'\n            open={open}\n            keepMounted\n            onClose={handleClose}\n          >         \n          <DialogTitle \n                style={{textAlign: \"center\", \n                        marginTop:\"30px\"\n                      }}\n          >\n              Joinees List\n          </DialogTitle>\n          <DialogContent>\n            <JoineesList data={joineesData}/>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose}>CLOSE</Button>\n          </DialogActions>\n          </Dialog>\n\n      : null}\n      </Container>\n    </Page>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/Joinees.js",["1315","1316","1317","1318"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport * as constants from 'src/utils/constants';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function Joinees() {\n    // state to save candidate ID\n\n    const options = {\n        selectableRows: \"none\", // It will remove checkbox\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        fixedHeader: true,\n        fixedSelectColumn: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Candidate Name\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var jid = tableMeta.rowData[0]\n                    return (\n                        // <a href={`/resumeX/candidates/edit/${rowClickData}`} style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                        <RouterLink \n                            to={`/resumeX/candidates/edit/${jid}`} \n                            state={{fromPage: \"joinees\"}}  \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}\n                        > \n                           {value} \n                        </RouterLink>\n                    )\n                },\n                setCellProps: () => ({\n                    style: {\n                      whiteSpace: \"nowrap\",\n                      position: \"sticky\",\n                      left: 0,\n                      background: \"white\",\n                      zIndex: 100\n                    }\n                  }),\n                  setCellHeaderProps: () => ({\n                    style: {\n                      whiteSpace: \"nowrap\",\n                      position: \"sticky\",\n                      left: 0,\n                      background: \"white\",\n                      zIndex: 101\n                    }\n                  })\n            }\n        },\n        {\n            name: \"Email\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Phone Number\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Experience\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"BU\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Department\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"RRF Number\",\n            options: {\n                filter: true,\n            }\n        },  \n        {\n            name: \"Status\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Designation\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Joining Date\",\n            options: {\n                filter: true,\n            }\n        },   \n        {\n            name: \"Created By\",\n            options: {\n                filter: true,\n            }\n        },          \n   ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [candidateData, setCandidateData] = useState([])\n\n    const getCandidates = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/candidate-viewset/joinees_list/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setCandidateData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getCandidates()\n    }, [])\n\n    return (\n        <Page title=\"Joinees | ResumeX\">\n            <Container maxWidth=\"xl\">\n                {/* <Typography variant=\"h4\" gutterBottom sx={{ mb: 5 }} align=\"center\">\n                    Joinees\n                </Typography> */}\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Joinees</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        data={candidateData?.slice(0).reverse().map(data => {\n                            return [\n                                data.id,\n                                // {name: data.user?.first_name + \" \" + data.user?.last_name, uid: data.id},\n                                data.user?.first_name + \" \" + data.user?.last_name,\n                                data.user.email,\n                                data.user.mobile,\n                                data.total_experience,\n                                data.requisition.bu_group,\n                                data.requisition.department,\n                                data.requisition.requisite_number,\n                                data.status.status,\n                                data.requisition.designation,\n                                data.onboard_details.join_date,   \n                                data.created_by?.member?.first_name + \" \" + data.created_by?.member?.last_name,\n                               \n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/ResumeParser.js",["1319"],"import axios from 'axios';\nimport Page from '../../Page';\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete, Button, Backdrop, Card, CardContent, CircularProgress, Container, Grid, TextField, Typography, Stack, Skeleton } from '@mui/material';\n\nimport ResumeCards from '../resume-parser/ResumeCards'\nimport SearchIcon from '@mui/icons-material/Search';\nimport * as constants from 'src/utils/constants';\n\nexport default function ResumeParser() {\n    const [technologyData, setTechnologyData] = useState([])\n    const getTechnology = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n        setTechnologyData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    const [selectedTechnology, setSelectedTechnology] = React.useState([]);\n\n    const [resumeData, setResumeData] = React.useState([]);\n\n    const handleButtonClick = () => {\n        handleToggle()\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`\n        }\n\n        const data = {\n            technology: selectedTechnology.map((item) => (item.technology_name))\n        }\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/resume-parser/\", data, {headers})\n        .then((response) => {\n            setResumeData(response.data.data)\n            handleClose()\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    useEffect(() => {\n        getTechnology()\n    }, [])\n\n    const [open, setOpen] = React.useState(false);\n    const handleClose = () => {\n      setOpen(false);\n    };\n\n    const handleToggle = () => {\n      setOpen(!open);\n    };\n\n    return(\n        <Page title=\"Resume Parser | ResumeX\">\n            <Container maxWidth=\"xl\">\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                    Resume Parser\n                </Typography>\n\n                <Card style={{ border: \"none\", boxShadow: \"none\" }}>\n                    <CardContent>\n                        <Stack spacing={3}>\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                <Autocomplete\n                                multiple\n                                sx={{width: \"80%\"}}\n                                id=\"tags-standard\"\n                                options={technologyData}\n                                getOptionLabel={(option) => option.technology_name}\n                                onChange={(event, value) => setSelectedTechnology(value)}\n                                renderInput={(params) => (\n                                    <TextField\n                                    {...params}\n                                    variant=\"standard\"\n                                    label=\"Technology\"\n                                    />\n                                )}\n                                >\n                                </Autocomplete>\n\n                                <Button\n                                size=\"medium\"\n                                variant=\"outlined\"\n                                onClick={handleButtonClick}\n                                >\n                                    Search Resume &emsp; <SearchIcon />\n                                </Button>\n                            </Stack>\n                        </Stack>\n                    </CardContent>\n                </Card>\n\n                <Backdrop\n                sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n                open={open}\n                onClick={handleClose}\n                >\n                    Let the magic happen... &emsp; \n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n\n                <Grid container spacing={5} justifyContent=\"center\" sx={{mt: 5}} >\n                    {resumeData.map((resume, index) => (\n                        <ResumeCards resume={resume} index={index}/>\n                    ))}\n                </Grid>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/MasterRoles.js",["1320","1321","1322","1323","1324"],"import React, { useEffect, useState } from \"react\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport Page from '../../Page';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport plusFill from '@iconify/icons-eva/plus-fill';\n\nimport axios from 'axios';\nimport * as constants from 'src/utils/constants';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },        \n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function MasterRoles() {\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: false,\n        download: false,\n        print: false,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        rowHover:false,\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Role Name\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Is Active\",\n            options: {\n                filter: false,\n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(false)\n\n    const [rolesData, setRolesData] = useState([])\n    \n    const getRoles = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/master-roles/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setRolesData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getRoles()\n    }, [])\n\n    return (\n        <Page title=\"Roles | ResumeX\">\n            <Container maxWidth=\"xl\">\n                {/* <Typography variant=\"h4\" gutterBottom sx={{ mb: 5 }} align=\"center\" >\n                    Master Roles\n                </Typography> */}\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Master Roles</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        data={rolesData.map(data => {\n                            return [\n                                data?.id,\n                                data?.master_role,\n                                data?.is_active ? \n                                <CheckOutlinedIcon \n                                fontSize='medium' color='success' /> : \n                                <CloseRoundedIcon  \n                                fontSize='medium' color='error'/>\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/Groups.js",["1325","1326"],"import React, { useEffect, useState } from \"react\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport Page from '../../Page';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport Chip from '@mui/material/Chip';\nimport { Icon } from '@iconify/react';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport plusFill from '@iconify/icons-eva/plus-fill';\n\nimport axios from 'axios';\nimport * as constants from 'src/utils/constants';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },        \n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function Groups() {\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: false,\n        download: false,\n        print: false,\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        rowHover:false,\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n                sortDirection: 'asc'\n            },\n        },\n        {\n            name: \"Role Name\",\n            options: {\n                filter: true,\n                customFilterListOptions: { render: v => `Role: ${v}` },\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    const gid =  tableMeta.rowData[0]\n                    return (\n                        <RouterLink to={`/resumeX/roles/edit-role/${gid}`}  style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}> {value}</RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Permissions\",\n            options: {\n                filter: false,\n                setCellProps: () => ({\n                    style: {\n                      whiteSpace: \"wrap\",\n                      background: \"white\",\n                      maxWidth: \"500px\",\n                    } }),\n                customBodyRender: (value, tableMeta, updateValue) => {\n                        return value.map(item => {return (<Chip key= {item.id} \n                            label={item.permission_name} \n                            color='info' variant='outlined' \n                            style={{marginLeft:5, marginTop:10}}/>)})\n                    },\n            }\n                   \n        },\n        {\n            name: \"Parent Role\",\n            options: {\n                filter: true,\n                customFilterListOptions: { render: v => `Parent Role: ${v}` },\n            }\n        },\n        {\n            name: \"Is Active\",\n            options: {\n                filter: true,\n                customFilterListOptions: { render: v => `Is Active: ${v}` },\n                customBodyRender: (value, tableMeta, updateValue) => {\n                            if (value) \n                             return <CheckOutlinedIcon \n                            fontSize='medium' color='success' />\n                            else\n                             return <CloseRoundedIcon  \n                                fontSize='medium' color='error'/>\n                        }                \n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(false)\n\n    const [rolesData, setRolesData] = useState([])\n    const getRoles = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/roles/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setRolesData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getRoles()\n    }, [])\n\n    return (\n        <Page title=\"Roles | ResumeX\">\n            <Container maxWidth=\"xl\">\n                {/* <Typography variant=\"h4\" gutterBottom sx={{ mb: 5 }} align=\"center\">\n                    Roles\n                </Typography> */}\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Roles</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/roles/create-role\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Role\n                            </Button>\n                        }\n                        data={rolesData.map(data => {\n                            return [\n                                data?.id,\n                                // {name: data?.role_name, uid: data?.id},\n                                data?.role_name,\n                                // data?.permissions?.map((perm) => \n                                // <Chip key= {perm.id} \n                                // label={perm.permission_name} \n                                // color='info' variant='outlined' \n                                // style={{marginLeft:5, marginTop:10}}/>),\n                                data?.permissions,\n                                data?.master_role?.master_role,\n                                // data?.is_active ? \n                                // <CheckOutlinedIcon \n                                // fontSize='medium' color='success' /> : \n                                // <CloseRoundedIcon  \n                                // fontSize='medium' color='error' />\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/FSDUser.js",["1327"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckIcon from '@mui/icons-material/Check';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport * as constants from 'src/utils/constants';\n\n// ----------------------------------------------------------------------\n\n\nconst theme = createTheme({\n  components: {\n      MUIDataTable: {\n      styleOverrides: {\n          root: {\n          backgroundColor: '#red',\n          },\n          paper: {\n          boxShadow: 'none',\n          },\n      },\n      },\n      MuiToolbar: {\n      styleOverrides: {\n          root: {\n          // backgroundColor: 'yellow',\n          },\n      },\n      },\n      MuiTableCell: {\n      styleOverrides: {\n          head: {\n          backgroundColor: 'purple',\n          },\n      },\n      },\n      MUIDataTableHeadCell: {\n          styleOverrides: {\n              root: {\n                  fontWeight: '700',\n              },\n              data: {\n              fontWeight: '700',\n              }\n          }\n      },\n      MUIDataTableSelectCell: {\n      styleOverrides: {\n          headerCell: {\n          // backgroundColor: 'blue',\n          fontWeight: '500px'\n          },\n      },\n      },\n      MuiTableFooter: {\n      styleOverrides: {\n          root: {\n          '& .MuiToolbar-root': {\n          //   backgroundColor: 'purple',\n          },\n          },\n      },\n      },\n  },\n});\n\nconst components = {\n  ExpandButton: function (props) {\n      return <ExpandButton {...props} />;\n  }\n};\n\nconst StyledButton = {\n  backgroundColor: \"#00AB55\", \n  fontFamily: \"Public Sans,sans-serif\", \n  fontWeight: \"700\", \n  borderRadius: \"8px\",\n  boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function FSDUsers() {\n  const [rowClickData, setRowClickData] = useState([]) \n\n  const options = {\n      selectableRows: false, // It will turn off checkboxes in rows\n      filter: true,\n      filterType: \"dropdown\",\n      responsive: \"standard\",\n      draggableColumns: {enabled: true},\n      onRowClick: (rowData) => {setRowClickData(rowData[0])},\n  };\n  \n  const columns = [\n      {\n          name: \"ID\",\n          options: {\n              filter: false,\n          },\n      },\n      {\n        name: \"Name\",\n        options: {\n            filter: false,\n            customBodyRender: (value, tableMeta, updateValue) => {\n                var fid = tableMeta.rowData[0]\n                return (\n                    // <a href={`/resumeX/fsdusers/edit/${rowClickData}`} style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                   \n                    <RouterLink to={`/resumeX/fsdusers/edit/${fid}`}  style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}> {value}</RouterLink>\n                )\n            }\n        }\n    },\n    {\n        name: \"Email\",\n        options: {\n              filter: false,\n          }\n    },\n    {\n        name: \"Mobile\",\n        options: {\n              filter: false,\n          }\n    },\n    {\n        name: \"Bu Group\",\n        options: {\n              filter: true,\n          }\n    },\n    {\n        name: \"Interview Role\",\n        options: {\n              filter: true,\n          }\n    },\n    {\n          name: \"Role\",\n          options: {\n              filter: true,\n          }\n    },      \n    {\n          name: \"IsActive\",\n          options: {\n              filter: true,\n              customBodyRender: (value, tableMeta, updateValue) => {\n                return (\n                    value === true ? <CheckIcon fontSize='medium' color='success' /> : < ClearIcon  fontSize='medium' color='error'/>\n                )\n            }\n          }\n    }\n  ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n  \n\n    const [ UserData, setUserData] = useState([])\n\n    const getUser = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/fsd-members/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setUserData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getUser()\n    }, [])\n\n    return(\n\n      <Page title=\"FSD Members | ResumeX\">\n      <Container maxWidth=\"xl\">\n          <Typography variant=\"h4\" gutterBottom sx={{ mb: 5 }} align=\"center\">\n            FSD Members\n          </Typography>\n\n          {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                    title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/fsdusers/fsd-create-user/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                               Add FSD Member\n                                </Button>\n                        }\n                          \n                        data={UserData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                // {name: data?.member?.first_name + \" \" + data?.member?.last_name, uid: data?.id},\n                                data?.member?.first_name + \" \" + data?.member?.last_name,\n                                data?.member?.email,\n                                data?.member?.mobile,\n                                data?.bu_group?.bu_name,\n                                data?.interview_role?.interview_role,\n                                data?.member?.role?.role_name,\n                                data?.member?.is_active\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>   \n                )}\n\n      </Container>\n      </Page>\n    )\n\n    }","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/EmployeeUser.js",["1328","1329"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport * as constants from 'src/utils/constants';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport {Stack} from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst theme = createTheme({\n  components: {\n      MUIDataTable: {\n      styleOverrides: {\n          root: {\n          backgroundColor: '#red',\n          },\n          paper: {\n          boxShadow: 'none',\n          },\n      },\n      },\n      MuiToolbar: {\n      styleOverrides: {\n          root: {\n          // backgroundColor: 'yellow',\n          },\n      },\n      },\n      MuiTableCell: {\n      styleOverrides: {\n          head: {\n          backgroundColor: 'purple',\n          },\n      },\n      },\n      MUIDataTableHeadCell: {\n          styleOverrides: {\n              root: {\n                  fontWeight: '700',\n              },\n              data: {\n              fontWeight: '700',\n              }\n          }\n      },\n      MUIDataTableSelectCell: {\n      styleOverrides: {\n          headerCell: {\n          // backgroundColor: 'blue',\n          fontWeight: '500px'\n          },\n      },\n      },\n      MuiTableFooter: {\n      styleOverrides: {\n          root: {\n          '& .MuiToolbar-root': {\n          //   backgroundColor: 'purple',\n          },\n          },\n      },\n      },\n      MUIDataTableToolbar: {\n        styleOverrides: {\n          filterPaper: {\n              width: \"450px\",\n          },\n        },\n      },\n  },\n});\n\nconst components = {\n  ExpandButton: function (props) {\n      return <ExpandButton {...props} />;\n  }\n};\n\nconst StyledButton = {\n  backgroundColor: \"#00AB55\", \n  fontFamily: \"Public Sans,sans-serif\", \n  fontWeight: \"700\", \n  borderRadius: \"8px\",\n  boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function FSDUsers() {\n  const [rowClickData, setRowClickData] = useState([]) \n\n  const options = {\n      selectableRows: false, // It will turn off checkboxes in rows\n      filter: true,\n      filterType: \"dropdown\",\n      responsive: \"standard\",\n      draggableColumns: {enabled: true},\n      onRowClick: (rowData) => {setRowClickData(rowData[0])},\n  };\n  \n  const columns = [\n      {\n          name: \"ID\",\n          options: {\n              filter: false,\n              sortDirection: 'asc'\n          },\n      },\n      {\n        name: \"Name\",\n        options: {\n            filter: false,\n            sort: true,\n            customBodyRender: (value, tableMeta, updateValue) => {\n                var eid = tableMeta.rowData[0]\n                return (\n                    // <a href={`/resumeX/fsdusers/edit/${rowClickData}`} style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                   \n                    <RouterLink to={`/resumeX/empusers/edit/${eid}`}  style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}> {value}</RouterLink>\n                )\n            }\n        }\n    },\n    {\n        name: \"Email\",\n        options: {\n            filter: false,\n        }\n    },\n    {\n        name: \"Mobile\",\n        options: {\n            filter: false,\n        }\n    },\n    {\n        name: \"Interview Tech-Stack\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"Designation\",\n        options: {\n              filter: true,\n        }\n    },\n    {\n        name: \"IsActive\",\n        options: {\n              filter: true,\n              customBodyRender: (value, tableMeta, updateValue) => {\n                return (\n                    value === true ? <CheckIcon fontSize='medium' color='success' /> : < ClearIcon  fontSize='medium' color='error'/>\n                )\n            }\n          }\n    }\n  ];\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n  \n    const [ UserData, setUserData] = useState([])\n    const getUser = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setUserData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getUser()\n    }, [])\n\n    return(\n\n      <Page title=\"Employees | ResumeX\">\n      <Container maxWidth=\"xl\">\n          <Typography variant=\"h4\" gutterBottom sx={{ mb: 5 }} align=\"center\">\n            Employees\n          </Typography>\n\n          {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                    title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/empusers/emp-create-user/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                               Add Employee\n                                </Button>\n                        }\n                          \n                        data={UserData.slice(0).reverse().map(data => {\n                            return [\n                                data.id,\n                                // {name: data?.user?.first_name + \" \" + data?.user?.last_name, uid: data?.id},\n                                data?.user?.first_name + \" \" + data?.user?.last_name,\n                                data?.user?.email,\n                                data?.user?.mobile,\n                                data?.interview_tech?.tech_stack_name,\n                                data?.user?.role?.role_name,\n                                data?.user?.is_active\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>   \n                )}\n\n      </Container>\n      </Page>\n    )\n    }","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/officeLocation/OfficeLocation.js",["1330","1331","1332"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function OfficeLocation() {\n    const userInfo = UserInfo()\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Location\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var oid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/office-location/edit/${oid}`}\n                            state={{fromPage: \"office-location\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Active\",\n            options: {\n              filter: true,\n              customFilterListOptions: { render: v => `Is Active: ${v}` },\n              customBodyRender: (value, tableMeta, updateValue) => {\n                          if (value) \n                           return <CheckOutlinedIcon \n                          fontSize='medium' color='success' />\n                          else\n                           return <CloseRoundedIcon  \n                              fontSize='medium' color='error'/>\n                      }                \n          }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [locationData, setlocationData] = useState([])\n    const getlocations = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/office-locations/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setlocationData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getlocations()\n    }, [])\n\n    return (\n        <Page title=\"Office Location | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Office Location</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/office-location/add-location/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Location\n                            </Button>\n                        }\n\n                        data={locationData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.office_location,\n                                data?.created,\n                                data?.modified,\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/officeLocation/AddLocationForm.js",["1333","1334","1335","1336","1337","1338","1339","1340"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    MenuItem, Autocomplete\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddLocationForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddLocationAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"office-locations/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/office-location\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const LocationSchema = Yup.object().shape({\n        LocationName: Yup.string()\n            .required(\"Office Location name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            LocationName: '',\n            is_active: '',\n            \n        },\n        validationSchema: LocationSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"office_location\": values.LocationName,\n                \"is_active\": values.is_active\n            }\n\n            // call create location API\n            callAddLocationAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Office Location\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/office-location\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Location\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Office Location Name\"\n\n                                            {...getFieldProps('LocationName')}\n\n                                            error={Boolean(touched.LocationName && errors.LocationName)}\n                                            helperText={touched.LocationName && errors.LocationName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack>\n                                       \n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Location Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Location\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/technology/Technology.js",["1341","1342","1343"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function Technology() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Technology\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var tid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/technology/edit/${tid}`}\n                            state={{fromPage: \"technology\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Active\",\n            options: {\n              filter: true,\n              customFilterListOptions: { render: v => `Is Active: ${v}` },\n              customBodyRender: (value, tableMeta, updateValue) => {\n                          if (value) \n                           return <CheckOutlinedIcon \n                          fontSize='medium' color='success' />\n                          else\n                           return <CloseRoundedIcon  \n                              fontSize='medium' color='error'/>\n                      }                \n          }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [technologyData, setTechnologyData] = useState([])\n    const gettechnologys = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setTechnologyData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      gettechnologys()\n    }, [])\n\n    return (\n        <Page title=\"Technology | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Technology</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/technology/add-technology/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Technology\n                            </Button>\n                        }\n\n                        data={technologyData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.technology_name,\n                                data?.created,\n                                data?.modified,\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/technology/EditTechnology.js",["1344","1345"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditTechnology() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores Technology information\n    const [technologyInfo, setTechnologyInfo] = useState({});\n\n\n    const getTechnologyInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"technology/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setTechnologyInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getTechnologyInfo();\n    }, [])\n\n    const callEditTechnologyAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"technology/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/technology\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const technologySchema = Yup.object().shape({\n        TechnologyName: Yup.string()\n            .required(\"technology name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            TechnologyName: technologyInfo?.technology_name ?? '',\n            is_active: technologyInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: technologySchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"technology_name\": values.TechnologyName,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit Technology API\n            callEditTechnologyAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Technology\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/technology\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Technology\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Technology\"\n\n                                            {...getFieldProps('TechnologyName')}\n\n                                            error={Boolean(touched.TechnologyName && errors.TechnologyName)}\n                                            helperText={touched.TechnologyName && errors.TechnologyName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Tech Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update Technology\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/officeLocation/EditLocation.js",["1346","1347"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditLocation() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores location information\n    const [locationInfo, setLocationInfo] = useState({});\n\n\n    const getLocationInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"office-locations/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setLocationInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getLocationInfo();\n    }, [])\n\n    const callEditLocationAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"office-locations/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/office-location\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const LocationSchema = Yup.object().shape({\n        LocationName: Yup.string()\n            .required(\"Location name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            LocationName: locationInfo?.office_location ?? '',\n            is_active: locationInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: LocationSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"office_location\": values.LocationName,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit location API\n            callEditLocationAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Office Location\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/office-location\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Office Location\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Office Location\"\n\n                                            {...getFieldProps('LocationName')}\n\n                                            error={Boolean(touched.LocationName && errors.LocationName)}\n                                            helperText={touched.LocationName && errors.LocationName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Location Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Update Location\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/technology/AddTechnologyForm.js",["1348","1349","1350"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddTechnologyForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddTechnologyAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"technology/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/technology\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const TechnologySchema = Yup.object().shape({\n        TechnologyName: Yup.string()\n            .required(\"Technology name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            TechnologyName: '',\n            is_active: '',\n            \n        },\n        validationSchema: TechnologySchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"technology_name\": values.TechnologyName,\n                \"is_active\": values.is_active\n            }\n\n            // call create Technology API\n            callAddTechnologyAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Technology\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/technology\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Technology\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Technology Name\"\n\n                                            {...getFieldProps('TechnologyName')}\n\n                                            error={Boolean(touched.TechnologyName && errors.TechnologyName)}\n                                            helperText={touched.TechnologyName && errors.TechnologyName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack>\n                                       \n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Tech Active? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Technology\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateSource/AddCandidateSourceForm.js",["1351","1352","1353","1354","1355","1356","1357","1358"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    MenuItem, Autocomplete\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddCandidateSourceForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddCandidateSourceAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"candidate-source/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidate-source\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const CandidateSourceSchema = Yup.object().shape({\n        CandidateSourceName: Yup.string()\n            .required(\"Candidate Source name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            CandidateSourceName: '',\n            is_active: '',\n            \n        },\n        validationSchema: CandidateSourceSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"source\": values.CandidateSourceName,\n                \"is_active\": values.is_active\n            }\n\n            // call create Candidate Source API\n            callAddCandidateSourceAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Candidate Source\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/candidate-source\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Candidate Source\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Candidate Source\"\n\n                                            {...getFieldProps('CandidateSourceName')}\n\n                                            error={Boolean(touched.CandidateSourceName && errors.CandidateSourceName)}\n                                            helperText={touched.CandidateSourceName && errors.CandidateSourceName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack>\n                                       \n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Source Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Candidate Source\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateSource/CandidateSource.js",["1359","1360","1361"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function CandidateSource() {\n    const userInfo = UserInfo()\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Candidate Source\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var sid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/candidate-source/edit/${sid}`}\n                            state={{fromPage: \"candidate-source\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Active\",\n            options: {\n              filter: true,\n              customFilterListOptions: { render: v => `Is Active: ${v}` },\n              customBodyRender: (value, tableMeta, updateValue) => {\n                          if (value) \n                           return <CheckOutlinedIcon \n                          fontSize='medium' color='success' />\n                          else\n                           return <CloseRoundedIcon  \n                              fontSize='medium' color='error'/>\n                      }                \n          }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [candidateSourceData, setCandidateSourceData] = useState([])\n    const getcandidateSources = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/candidate-source/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setCandidateSourceData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getcandidateSources()\n    }, [])\n\n    return (\n        <Page title=\"Candidate Source | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Candidate Source</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/candidate-source/add-candidate-source/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Candidate Source\n                            </Button>\n                        }\n\n                        data={candidateSourceData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.source,\n                                data?.created,\n                                data?.modified,\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateSource/EditCandidateSource.js",["1362","1363"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditCandidateSource() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores Candidate Source information\n    const [candidateSourceInfo, setCandidateSourceInfo] = useState({});\n\n\n    const getcandidateSourceInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"candidate-source/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setCandidateSourceInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getcandidateSourceInfo();\n    }, [])\n\n    const callEditCandidateSourceAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"candidate-source/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidate-source\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const CandidateSourceSchema = Yup.object().shape({\n        CandidateSourceName: Yup.string()\n            .required(\"Candidate Source name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            CandidateSourceName: candidateSourceInfo?.source ?? '',\n            is_active: candidateSourceInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: CandidateSourceSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"source\": values.CandidateSourceName,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit Candidate Source API\n            callEditCandidateSourceAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Candidate Source\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/candidate-source\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Candidate Source\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Candidate Source\"\n\n                                            {...getFieldProps('CandidateSourceName')}\n\n                                            error={Boolean(touched.CandidateSourceName && errors.CandidateSourceName)}\n                                            helperText={touched.CandidateSourceName && errors.CandidateSourceName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Source Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Update Candiate Source\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateStatus/CandidateStatus.js",["1364","1365","1366"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function CandidateStatus() {\n    const userInfo = UserInfo()\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Candidate Status\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var sid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/candidate-status/edit/${sid}`}\n                            state={{fromPage: \"candidate-status\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Active\",\n            options: {\n              filter: true,\n              customFilterListOptions: { render: v => `Is Active: ${v}` },\n              customBodyRender: (value, tableMeta, updateValue) => {\n                          if (value) \n                           return <CheckOutlinedIcon \n                          fontSize='medium' color='success' />\n                          else\n                           return <CloseRoundedIcon  \n                              fontSize='medium' color='error'/>\n                      }                \n          }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [candidateStatusData, setCandidateStatusData] = useState([])\n    const getcandidateStatus = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/candidate-status/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setCandidateStatusData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getcandidateStatus()\n    }, [])\n\n    return (\n        <Page title=\"Candidate Status | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Candidate Status</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/candidate-status/add-candidate-status/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Candidate Status\n                            </Button>\n                        }\n\n                        data={candidateStatusData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.status,\n                                data?.created,\n                                data?.modified,\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateStatus/AddCandidateStatusForm.js",["1367","1368","1369","1370","1371","1372","1373","1374"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    MenuItem, Autocomplete\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddCandidateStatusForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddCandidateStatusAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"candidate-status/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidate-status\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const CandidateStatusSchema = Yup.object().shape({\n        CandidateStatusName: Yup.string()\n            .required(\"Candidate Status name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            CandidateStatusName: '',\n            is_active: '',\n            \n        },\n        validationSchema: CandidateStatusSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"status\": values.CandidateStatusName,\n                \"is_active\": values.is_active\n            }\n\n            // call create Candidate Status API\n            callAddCandidateStatusAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Candidate Status\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/candidate-status\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Candidate Status\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Candidate Status\"\n\n                                            {...getFieldProps('CandidateStatusName')}\n\n                                            error={Boolean(touched.CandidateStatusName && errors.CandidateStatusName)}\n                                            helperText={touched.CandidateStatusName && errors.CandidateStatusName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack>\n                                       \n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Status Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Candidate Status\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandidate.js",["1375","1376","1377"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {Container, Link, Stack, Typography } from '@mui/material';\nimport {Link as RouterLink, useLocation, useParams} from 'react-router-dom';\nimport axios from 'axios';\n\nimport { Tabs, Tab, Row, Col, Form } from \"react-bootstrap\";\nimport EditCandidatePersonalDetails from './EditCandPerDetails';\nimport EditCandidateJobApplication from \"./EditCandJobApp\";\nimport EditCandidateHRAnalysis from \"./EditCandHRAnalysis\";\nimport EditCandidateDocuments from \"./EditCandDocuments\";\nimport InterviewStepper from \"./EditCandInterview\";\nimport OnboardEngagement from './OnboardEngagement'\nimport GenerateOfferLetter from './GenerateOfferLetter';\nimport * as constants from 'src/utils/constants';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\n\nexport default function EditCandidate(props) {\n    const { id } = useParams();\n    const location = useLocation();\n    const userInfo = UserInfo();\n\n    const previousPage = location?.state?.fromPage\n    const userRole = userInfo?.role\n\n    const [candidateData, setCandidateData] = useState([])\n\n    const getCandidateData = async () => {\n        await axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/candidate-viewset/\" + id + \"/\", { headers: { \"Authorization\": `Token ${localStorage.getItem('authToken')}` } })\n        .then((response) => {\n            setCandidateData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    useEffect(() => {\n        getCandidateData()\n    }, [])\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={72} sx={{ mb: 6 }}>\n                    <Link to={`/resumeX/${previousPage}` }\n                        color=\"green\" \n                        underline=\"hover\" \n                        component={RouterLink} \n                        fontSize=\"20px\"> \n                            <ArrowCircleLeftIcon fontSize=\"large\" />\n                    </Link>\n\n                    {/* <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                        Edit Candidate\n                    </Typography> */}\n\n                    <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Edit Candidate</h2>\n                </Stack>\n\n                <Row>\n                    <Col>\n                        <Tabs defaultActiveKey=\"candidate_profile\"\n                            id=\"controlled-tab-example\">\n                            <Tab eventKey=\"candidate_profile\" title=\"Candidate Profile\">\n                                <EditCandidatePersonalDetails candidateData={candidateData} />\n                            </Tab>\n\n                            { userRole !== 'OnBoarding_HR' ? \n                            <Tab eventKey=\"hr_analysis\" title=\"HR Analysis\">\n                                <EditCandidateHRAnalysis candidateData={candidateData} />\n                            </Tab> : null}\n\n                            <Tab eventKey=\"documents\" title=\"Documents\">\n                                <EditCandidateDocuments candidateData={candidateData} />\n                            </Tab>\n\n                            { userRole !== 'OnBoarding_HR' ? \n                            <Tab eventKey=\"job_application\" title=\"Job Application\">\n                                <EditCandidateJobApplication candidateData={candidateData} />\n                            </Tab> : null }\n\n                            {candidateData?.status?.status === 'Offered' || 'Offer Accepted' ?\n                                <Tab eventKey=\"candidate_interview\" title=\"Interview\">\n                                    <InterviewStepper candidateData={candidateData}/>\n                                </Tab>\n                            : null }\n\n                            {candidateData?.status?.status === 'Offered' || 'Offer Accepted' ?\n                                <Tab eventKey=\"onboarding_engagement\" title=\"Onboarding Engagement\">\n                                    <OnboardEngagement candidateData={candidateData}/>\n                                </Tab>\n                            : null }\n\n                            {candidateData?.status?.status === 'Offered' || 'Offer Accepted' ?\n                                <Tab eventKey=\"generate_offer_letter\" title=\"Generate Offer Letter\">\n                                    <GenerateOfferLetter candidateData={candidateData}/>\n                                </Tab>\n                            : null }\n\n                        </Tabs>\n                    </Col>\n                </Row>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStack/AddTechStackForm.js",["1378","1379","1380"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddTechStackForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddTechStackAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"tech-stack/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/tech-stack\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const TechStackSchema = Yup.object().shape({\n        TechStackName: Yup.string()\n            .required(\"TechStack name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            TechStackName: '',\n            Priority: '',\n            is_active: '',\n            \n        },\n        validationSchema: TechStackSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"tech_stack_name\": values.TechStackName,\n                \"stack_priority\": values.Priority,\n                \"is_active\": values.is_active\n            }\n\n            // call create TechStack API\n            callAddTechStackAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add TechStack\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/tech-stack\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add TechStack\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"TechStack Name\"\n\n                                            {...getFieldProps('TechStackName')}\n\n                                            error={Boolean(touched.TechStackName && errors.TechStackName)}\n                                            helperText={touched.TechStackName && errors.TechStackName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    \n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                   <TextField\n                                            fullWidth\n                                            label=\"TechStack Priority\"\n                                            type=\"number\"\n                                            {...getFieldProps(\"Priority\")}\n                                            error={Boolean(touched.Priority && errors.Priority)}\n                                            helperText={touched.Priority && errors.Priority}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack>\n                                       \n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is TechStack Active? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add TechStack\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStack/TechStack.js",["1381","1382","1383"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function TechStack() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"TechStack\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var tid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/tech-stack/edit/${tid}`}\n                            state={{fromPage: \"tech-stack\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Priority\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Active\",\n            options: {\n              filter: true,\n              customFilterListOptions: { render: v => `Is Active: ${v}` },\n              customBodyRender: (value, tableMeta, updateValue) => {\n                          if (value) \n                           return <CheckOutlinedIcon \n                          fontSize='medium' color='success' />\n                          else\n                           return <CloseRoundedIcon  \n                              fontSize='medium' color='error'/>\n                      }                \n          }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [TechStackData, setTechStackData] = useState([])\n    const getTechStack = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/tech-stack/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setTechStackData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getTechStack()\n    }, [])\n\n    return (\n        <Page title=\"TechStack | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>TechStack</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/tech-stack/add-tech-stack/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add TechStack\n                            </Button>\n                        }\n\n                        data={TechStackData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.tech_stack_name,\n                                data?.stack_priority,\n                                data?.created,\n                                data?.modified,\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/pages/ScheduleInterview.js",["1384","1385","1386","1387","1388","1389","1390","1391"],"import React, { useEffect, useState } from \"react\";\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// material\nimport { Grid, Button, Container, Stack, Typography } from \"@mui/material\";\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useTheme } from '@mui/material/styles';\n\n// components\nimport Page from \"../components/Page\";\nimport { CandidateCalendar, SlotPicker } from \"../components/_dashboard/interviews/\";\nimport { JobApplications } from \"../components/_dashboard/interviews/\";\n\n// axios\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport { apiInstance } from \"src/utils/apiAuth\";\n\nexport default function ScheduleInterview() { \n  const [open, setOpen] = React.useState(false);\n  const [confirmOpen, setConfirmOpen] = React.useState(false)\n\n  const [eventInfo, setEventInfo] = React.useState({})\n  const [eventsData, seteventsData] = useState([]);\n\n  const [hasBooking, setHasBooking] = React.useState(null)\n  const [interviewDetails, setInterviewDetails] = React.useState({})\n\n  const [noApplications, setNoApplications] = React.useState(false)\n\n  const theme = useTheme();\n\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleClose = () => {\n    setConfirmOpen(false)\n    window.location.reload(false);\n  };\n\n  function handleSlotBooking() {\n    bookInterviewSlot()\n  }\n\n  // ---------- Call save slot API [Full calendar] ------------\n\n  // const bookInterviewSlot = () => {\n\n  //   let empID = eventInfo.event?.extendedProps?.employeeId\n  //   let jAppId = eventInfo.event?.extendedProps?.jobApplicationId\n\n  //   let startDt = eventInfo.event.start\n  //   let newStartDt = (new Date(startDt).toISOString()).slice(0, 19) + 'Z'\n\n  //   let endDt = eventInfo.event.end\n  //   let newEndDt = (new Date(endDt).toISOString()).slice(0, 19) + 'Z'\n\n  //   apiInstance({\n  //     method: 'post',\n  //     url: '/confirmed-interviews/',\n  //     headers: {\n  //       Authorization: \"token \" + localStorage.getItem(\"candidateToken\"),\n  //     },\n  //     data: {\n  //       \"employee_id\": empID,\n  //       \"job_application_id\": jAppId,\n  //       \"start_date\": newStartDt,\n  //       \"end_date\": newEndDt,\n  //       \"interview_round_id\": 5,\n  //       \"interview_status\": \"CONFIRMED\"\n  //     }\n  //   }).then(function (response) {\n\n  //     if (response.status === 200) {\n\n  //       enqueueSnackbar(response.data.message, {\n  //         anchorOrigin: {\n  //           vertical: 'top',\n  //           horizontal: 'right',\n  //         },\n  //         variant: 'success',\n  //         autoHideDuration: 1500,\n\n  //       });\n\n  //       eventInfo.el.style.backgroundColor = \"green\";\n  //       eventInfo.el.style.borderColor = \"red\";\n\n  //       setConfirmOpen(true)\n  //       setOpen(false)\n  //     }\n\n  //   })\n  //     .catch(function (error) {\n  //       enqueueSnackbar(error.response.data.detail, {\n  //         anchorOrigin: {\n  //           vertical: 'top',\n  //           horizontal: 'right',\n  //         },\n  //         variant: 'error',\n  //         autoHideDuration: 2000,\n  //       });\n  //     });\n  // }\n\n  //  ---------- Call save slot API [react datepicker calendar] ------------\n\n  const bookInterviewSlot = () => {\n\n    let candID = eventInfo[0]?.candidateId\n    let title = eventInfo[0]?.title\n    let empID = eventInfo[0]?.employeeId\n    let jAppId = eventInfo[0]?.jobApplicationId\n    let startDt = eventInfo[0]?.start\n    let endDt = eventInfo[0]?.end\n\n    apiInstance({\n      method: 'post',\n      url: '/confirmed-interviews/',\n      headers: {\n        Authorization: \"token \" + localStorage.getItem(\"candidateToken\"),\n      },\n      data: {\n        \"candidate_id\": candID,\n        \"employee_id\": empID,\n        \"job_application_id\": jAppId,\n        \"start_date\": startDt,\n        \"end_date\": endDt,\n        \"intv_round\": title,\n        \"interview_status\": \"CONFIRMED\"\n      }\n    }).then(function (response) {\n\n      if (response.status === 200) {\n\n        enqueueSnackbar(response.data.message, {\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'right',\n          },\n          variant: 'success',\n          autoHideDuration: 1500,\n\n        });\n\n        setConfirmOpen(true)\n        setOpen(false)\n        localStorage.setItem(\"candIsInterviewed\", true)\n      }\n\n    })\n      .catch(function (error) {\n        enqueueSnackbar(\"Something went wrong. Please try after sometime.\", {\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'right',\n          },\n          variant: 'error',\n          autoHideDuration: 2000,\n        });\n      });\n  }\n\n  // ---------- Get calendar events API -------------\n\n  useEffect(() => {\n    getCandidateConfirmIntvDetails();\n  }, []);\n\n  const getCandidateConfirmIntvDetails = () => {\n\n    apiInstance({\n      method: \"get\",\n      url: \"candidate-interview/\",\n      headers: {\n        Authorization: \"token \" + localStorage.getItem(\"candidateToken\"),\n      },\n    })\n      .then(function (response) {\n        let intvObj = response.data.data;\n        let intvStatus = response.data?.data?.interview_status;\n        if (intvStatus === \"CONFIRMED\") {\n          setInterviewDetails(intvObj);\n          setHasBooking(true);\n          setNoApplications(false);\n          setIsLoading(false);\n          // getEventsAPIData();\n        } else {\n          setHasBooking(false);\n        }\n      })\n      .catch(function (error) {\n        if (error.response.status === 404) {\n\n          enqueueSnackbar(\"You don't have any job applications yet !\", {\n            anchorOrigin: {\n              vertical: \"top\",\n              horizontal: \"right\",\n            },\n            variant: \"error\",\n            autoHideDuration: 2000,\n          });\n\n          setNoApplications(true);\n\n        }\n        else {\n          // enqueueSnackbar(\"Something went wrong. Please try after sometime.\", {\n          //   anchorOrigin: {\n          //     vertical: \"top\",\n          //     horizontal: \"right\",\n          //   },\n          //   variant: \"error\",\n          //   autoHideDuration: 2000,\n          // });\n\n          getEventsAPIData();\n          setHasBooking(false);\n          // setNoApplications(false);\n        }\n      });\n  };\n\n  const getEventsAPIData = () => {\n    apiInstance({\n      method: \"get\",\n      url: \"candidate-events/\",\n      headers: {\n        Authorization: \"token \" + localStorage.getItem(\"candidateToken\"),\n      },\n    })\n      .then(function (response) {\n        const eData = getEventsDataArray(response.data.data);\n        seteventsData(eData);\n      })\n      .catch(function (error) {\n        enqueueSnackbar(\"You have not booked your slots yet!\", {\n          anchorOrigin: {\n            vertical: \"top\",\n            horizontal: \"right\",\n          },\n          variant: \"warning\",\n          autoHideDuration: 2000,\n        });\n      });\n  };\n  const getEventsDataArray = (eData) =>\n    eData.map((eObj) => ({\n      title: eObj.title,\n      start: eObj.start,\n      end: eObj.end,\n      candidateId: eObj.extendedProps?.candidate_id,\n      employeeId: eObj.extendedProps?.employee_id,\n      jobApplicationId: eObj.extendedProps?.job_app_id,\n      startRecur: eObj?.startRecur,\n      endRecur: eObj?.endRecur,\n      startTime: eObj?.startTime,\n      endTime: eObj?.endTime,\n      startTz: eObj?.startTz,\n      endTz: eObj?.endTz\n    }));\n\n    const[color,setColor]=useState(true)\n    const onStartTimeSelect=(e)=>{\n    if(window.confirm('Date Selected')){\n        setColor(true)\n        // e.resetDate(new Date())\n        //   e.resetSelectedTimeState()\n    } \n}\n  // Linear progress bar state\n  const [isLoading, setIsLoading] = useState(true)\n\n  if (hasBooking !== null && !hasBooking) {\n  return (\n    <Page title=\"Interview Slots | ResumeX\">\n       {/* {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : ( */}\n      <Container>\n        <Stack alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\n          <Typography variant=\"h4\" gutterBottom>\n            Let's Book Your Interview !\n          </Typography>\n        </Stack>\n        <Dialog\n          fullScreen={fullScreen}\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"responsive-dialog-title\">\n\n          <DialogTitle id=\"responsive-dialog-title\">\n            {eventInfo[0]?.title}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <div>\n                <b> Start Date - </b> {new Date(eventInfo[0]?.start).getDate()}- {new Date(eventInfo[0]?.start).getMonth() + 1}- {new Date(eventInfo[0]?.start).getFullYear()} &nbsp; &nbsp;\n                <b> Start Time - </b> {new Date(eventInfo[0]?.start).getHours()}:{new Date(eventInfo[0]?.start).getMinutes()}:{new Date(eventInfo[0]?.start).getSeconds()}\n              </div>\n              <div>\n                <b> End Date - </b> {new Date(eventInfo[0]?.end).getDate()}- {new Date(eventInfo[0]?.end).getMonth() + 1}- {new Date(eventInfo[0]?.end).getFullYear()} &nbsp; &nbsp;\n                <b> End Time - </b> {new Date(eventInfo[0]?.end).getHours()}:{new Date(eventInfo[0]?.end).getMinutes()}:{new Date(eventInfo[0]?.end).getSeconds()}\n              </div>\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus onClick={handleSlotBooking}>\n              Book Slot\n            </Button>\n            <Button autoFocus onClick={() => setOpen(false)}>\n              Cancel\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n\n        <Dialog fullScreen={fullScreen} open={confirmOpen} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n          <DialogTitle id=\"responsive-dialog-title\">\n            Slot Booking Confirmation\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Congratulations, your interview slot has been booked !\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus onClick={handleClose}>\n              OK\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n\n        <SlotPicker eventsData={eventsData} setOpen={setOpen} setEventInfo={setEventInfo} />\n      </Container>\n      {/* )} */}\n    </Page>\n  );\n  }\n  else {\n    return (\n      <JobApplications interviewObj={interviewDetails} noApplications={noApplications} />\n    )\n  }\n}\n","/home/raj/Desktop/resumeX/resumeX/src/pages/User.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/UploadDocuments.js",["1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412"],"import axios from \"axios\";\nimport Page from \"../components/Page\";\nimport { Form } from 'react-bootstrap';\nimport { useSnackbar } from \"notistack\";\nimport React,  { useEffect, useState } from \"react\";\nimport { Box, Grid, Button, Container, Stack } from \"@mui/material\";\nimport { apiInstance } from \"src/utils/apiAuth\";\nimport * as constants from \"src/utils/constants\";\nimport {\n    Card, CardContent,\n    Link, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem, Tooltip, Fade\n}\n    from '@mui/material';\nimport { Link as RouterLink, useNavigate, useParams} from 'react-router-dom';\nimport { useFormik, FormikProvider, ErrorMessage, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nexport default function UploadDocuments() {\n    \n    const [candidateData, setCandidateData]  = useState([]);\n    const [visible, setVisible] = useState(false);\n    const getCandidateData = () => {\n      const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n      .then((response) => {\n        setCandidateData(response.data.data)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    useEffect(() => {\n        getCandidateData()\n    }, [])\n\n  const { enqueueSnackbar } = useSnackbar();\n  const navigate = useNavigate();\n\n  const [resumeFile, setResumeFile] = useState(null);\n  const [photoIDFile, setPhotoIDFile] = useState(null);\n  const [payslipDoc, setPaySlipDoc] = useState([]);\n\nconst handleResumeUpload = (event) => {\n    const rexFile = event.target.files[0]\n    formik.setFieldValue(\"Resume\", rexFile);\n    setResumeFile(rexFile)\n};\n\nconst handlePhotoIDUpload = (event) => {\n    const IDFile = event.target.files[0]\n    formik.setFieldValue(\"PhotoID\", IDFile);\n    setPhotoIDFile(IDFile)\n};\n\nconst handlePaySlipUpload = (event) => {\n    const paySlipFiles = event.target.files\n\n    let slipsArray = [];\n\n    for (var i = 0; i < paySlipFiles.length; i++) {            \n        slipsArray.push(paySlipFiles[i]);\n    }\n\n    formik.setFieldValue(\"Payslip\", slipsArray);\n\n    setPaySlipDoc(paySlipFiles)\n};\n\nconst callCandidateUpdateDocuments = async (formValues) => {\n\n\n    var bodyFormData = new FormData();\n    \n\n    if (photoIDFile != null) {\n        bodyFormData.append(\"photo_id_file\", photoIDFile);\n    }\n\n    if (resumeFile != null){\n        bodyFormData.append(\"resume_file\", resumeFile);\n    } \n\n\n    if (payslipDoc.length != 0){\n        for (let i = 0 ; i < payslipDoc.length ; i++) {\n                bodyFormData.append(\"payslip_files\", payslipDoc[i]);\n            }\n    } \n    \n    await apiInstance({\n        method: \"put\",\n        url: \"candidate/\",\n        headers: {\n          Authorization: \"token \" + localStorage.getItem(\"candidateToken\"),\n            'Content-Type': \"multipart/form-data\",\n        },\n        data: bodyFormData,\n    })\n        .then(async function (response) {\n            enqueueSnackbar(response.data.message, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'success',\n                autoHideDuration: 2000,\n            });\n            navigate(\"/dashboard/app\", { replace: true });\n        })\n        .catch(function (error) {\n            enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'error',\n                autoHideDuration: 2000,\n            });\n\n        });\n}\n\nconst CandidateSchema = Yup.object().shape({\n    PhotoID: Yup.mixed(),\n    Payslip: Yup.array()\n        .min(3, \"3 payslips are required.\")\n        .max(3, \"Only 3 files can be uploaded\"),\n    Resume: Yup.mixed(),\n});\n\nconst formik = useFormik({\n    initialValues: {\n        PhotoID: '',\n        Payslip: '',\n        Resume: '',\n    },\n    validationSchema: CandidateSchema,\n    onSubmit: (values) => {\n        if(values.Payslip === '' && values.PhotoID === '' && values.Resume === ''){\n            setSubmitting(false);\n            setVisible(true);\n            \n        }\n        else{\n        // call create candidate API\n        setVisible(false);\n        callCandidateUpdateDocuments(values)\n        }\n        \n    }\n});\n\nconst { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting } = formik;\n\n  return (\n    <Page title=\"Dashboard: Upload Documents \">\n      <Container maxWidth=\"xl\">\n\n      <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n  \n\n        <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"left\"}}>\n          <h1 style={{fontSize: '25px', fontWeight: '600'}}>\n          Upload Documents\n          </h1>\n        </div>\n        <Card sx={{ mt: 2 }} variant=\"outlined\">\n                            <CardContent>\n                            <Typography variant=\"h6\" color=\"#f05e0a\" align=\"center\" fontStyle=\"Bold\" gutterBottom>\n                                    Documents\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                      \n\n                                        <InputLabel\n                                            id=\"photo-id-upload-label\"\n                                            style={{ width: \"15%\", padding: \"8px 0\" }}\n                                        >\n                                            Display Picture:\n                                        </InputLabel>\n\n                                        <input\n                                            halfwidth\n                                            id=\"PhotoID\"\n                                            name=\"PhotoID\"\n                                            className=\"form-control\"\n                                            type=\"file\"\n                                            accept=\".jpg\"\n                                            onChange={handlePhotoIDUpload}\n                                        />\n\n                                        <ErrorMessage name=\"PhotoID\">\n                                            {(msg) => <span\n                                                style={{ width: \"25%\", color: \"#FF4842\", fontSize: \"12px\", textAlign: \"left\" }}>\n                                                {msg}\n                                            </span>}\n                                        </ErrorMessage>\n\n                                    </Stack>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                      <InputLabel\n                                          id=\"resume-upload-label\"\n                                          style={{ width: \"15%\", padding: \"8px 0\" }}\n                                      >\n                                          Resume:\n                                      </InputLabel>\n                                      <input\n                                          halfwidth\n                                          id=\"Resume\"\n                                          name=\"Resume\"\n                                          className=\"form-control\"\n                                          type=\"file\"\n                                          accept=\".pdf\"                                           \n                                          onChange={handleResumeUpload}\n                                      />\n                                      <ErrorMessage name=\"Resume\">\n                                          {(msg) => <span\n                                              style={{ width: \"15%\", color: \"#FF4842\", \n                                                      fontSize: \"12px\", textAlign: \"center\" \n                                                      }}>\n                                              {msg}\n                                          </span>}\n                                      </ErrorMessage>\n                                      </Stack>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <InputLabel\n                                            id=\"payslip-upload-label\"\n                                            style={{ width: \"15%\", padding: \"8px 0\" }}\n                                        >\n                                            3 Months Payslips:\n                                        </InputLabel>\n\n                                        <input halfwidth id=\"Payslip\" name=\"Payslip\" className=\"form-control\" type=\"file\" multiple accept=\".pdf\" onChange={handlePaySlipUpload} />\n                                    </Stack>\n                                    <ErrorMessage name=\"Payslip\">\n                                            {(msg) => <span\n                                                style={{ width: \"25%\", color: \"#FF4842\", fontSize: \"12px\", textAlign: \"left\" }}>\n                                                {msg}\n                                            </span>}\n                                        </ErrorMessage>\n                                </Stack>\n                               \n                                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n                                {visible && <p id=\"FieldError\" style={{textAlign:\"center\", color: \"red\", fontSize: \"smaller\"}}>Enter atleast one field</p>}\n                                <LoadingButton\n                                    fullWidth\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    loading={isSubmitting}\n                                >\n                                    Upload Documents\n                                </LoadingButton>\n                        </CardContent>\n                    </Card>\n                </Form>\n            </FormikProvider>\n            \n\n            \n            <Card sx={{ mt: 2 }} variant=\"outlined\">\n            <CardContent>\n                <Typography variant=\"h6\" color=\"#f05e0a\" align=\"center\"  gutterBottom>\n                    Documents List\n                </Typography>\n            </CardContent>\n\n            <CardContent>\n\n<TableContainer component={Paper}>\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Document Type </TableCell>\n                        <TableCell>Document Name </TableCell>\n                        <TableCell>File Size (KB)</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>                                 \n            {/* -------- resume --------- */}\n\n            {candidateData?.resume?.resume_file ? (\n\n            <TableRow\n                key=\"resume\"\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n               \n\n                <TableCell>                         \n                {candidateData?.resume && candidateData?.resume?.resume_file !== '' ? \"RESUME\" : ''} \n                \n                </TableCell>\n                <TableCell>\n                <a href={constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + `${candidateData?.resume?.resume_file}`} \n                    target=\"_blank\" style={{color: \"brown\", fontWeight: \"italic\"}\n                }>\n                    {candidateData?.resume?.resume_file}\n                </a>    \n                </TableCell>\n                <TableCell>{Math.round(candidateData?.resume?.size * 0.001).toFixed(1)}</TableCell>\n            \n\n            </TableRow>  ) : null }    \n        \n                    {/* -------- photo_id --------- */}\n\n                    {candidateData?.documents?.photo_id?.photo_id? (\n                    <TableRow\n                        key=\"photo_id\"\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                      \n                        <TableCell>\n                        {candidateData?.documents?.photo_id && candidateData?.documents?.photo_id?.photo_id !== null ? \"PHOTO\" : ''} \n                        </TableCell>\n                        <TableCell>\n                        <a href={constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + `${candidateData?.documents?.photo_id?.photo_id}`} \n                            target=\"_blank\" style={{color: \"brown\", fontWeight: \"italic\"}\n                        }>                       \n                        {candidateData?.documents?.photo_id?.photo_id}\n                        </a>\n                        </TableCell>\n                        <TableCell>{Math.round(candidateData?.documents?.photo_id?.size * 0.001).toFixed(1)}  </TableCell>\n\n                    </TableRow> ) : null }\n                    \n                    {/* -------- payslips --------- */}\n\n                    {candidateData?.payslips?.map((row, i) => (\n                        <TableRow\n                            key={row.id}\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                           \n                            <TableCell> {row.payslip ? \"PAYSLIP\" : null }</TableCell>\n                            <TableCell>\n                            <a href={constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + `${row.payslip}`} \n                            target=\"_blank\" style={{color: \"brown\", fontWeight: \"italic\"}}>\n                                {row.payslip}\n                            </a>\n                            </TableCell>\n                            <TableCell>{row.payslip ? Math.round(row.size * 0.001).toFixed(1): null}</TableCell>\n                                          \n                            \n\n                        </TableRow> \n                    )) }\n\n                </TableBody>\n            </Table>\n        </TableContainer>\n\t</CardContent>\n</Card>\n\n\n\n      </Container>\n    </Page>\n  );\n}\n\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/BookedInterviews.js",["1413"],"import { React } from \"react\";\nimport Page from '../../Page';\nimport { Container, Typography } from '@mui/material';\nimport BookedInterviewList from '../booked-interview/BookedInterviewList'\n\nexport default function BookedInterviews() {\n    return (\n        <Page title=\"Booked Interview | ResumeX\">\n            <Container maxWidth=\"xl\" align=\"center\">\n                {/* <Typography align=\"center\" variant=\"h3\" sx={{ mb:5 }}>\n                    Booked Interviews\n                </Typography> */}\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800'}}>Booked Interviews</h2>\n\n                <BookedInterviewList />\n\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmpAccChangePass.js",["1414","1415","1416","1417","1418","1419"],"import React from \"react\";\nimport Page from '../../Page';\nimport { useState } from 'react';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { Icon } from '@iconify/react';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport * as Yup from \"yup\";\nimport { useFormik, FormikProvider, ErrorMessage, Field } from \"formik\";\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { TextField, IconButton, CardContent,} from '@mui/material';\nimport { LoadingButton } from \"@mui/lab\";\nimport {useSnackbar} from 'notistack';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport { Card, CardHeader, Container } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\n\nexport default function EmpAccChangePass() {\n\n    const authToken = localStorage.getItem('authToken');\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    const [showPassword1, setShowPassword1] = useState(false);\n\n    const [showPassword2, setShowPassword2] = useState(false);\n\n    const handleShowPassword = () => { setShowPassword((show) => !show); };\n\n    const handleShowPassword1 = () => { setShowPassword1((show) => !show); };\n\n    const handleShowPassword2 = () => { setShowPassword2((show) => !show); };\n    \n    const { enqueueSnackbar } = useSnackbar();\n\n    const navigate = useNavigate();\n\n    const thisUser = localStorage.getItem('user');\n    const thisUserObject = JSON.parse(thisUser);\n\n    const PasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]{8,}$/\n\n    const ChangePassFormSchema = Yup.object().shape({\n        OldPassword: Yup.string()\n            .required('Old password is required'),\n\n        NewPassword: Yup.string()\n            .min(8, \"Minimum Password Length is 8\")\n            .matches(PasswordRegex, 'Password must have atleast 1 lower,upper,number and special character').\n            required('New password is required'),\n\n        ConfirmPassword: Yup.string()\n            .min(8,\"Minimum Password Length is 8\")\n            .matches(PasswordRegex, 'Password must have atleast 1 lower,upper,number and special character')\n            .oneOf([Yup.ref('NewPassword')], 'Your passwords do not match.')\n            .required('Confirm password is required')\n      });\n\n      const callChangePassword = async (formValues) => {\n\n        var bodyFormData = new FormData();\n\n        bodyFormData.append(\"old_password\", formValues.OldPassword);\n        bodyFormData.append(\"new_password1\", formValues.NewPassword);\n        bodyFormData.append(\"new_password2\", formValues.ConfirmPassword);\n\n\n        await apiInstance({\n            method: \"post\",\n            url: \"user/password/change/\",\n            headers: {\n                Authorization: \"token \" + authToken,\n            },\n            data: bodyFormData,\n        })\n            .then(async function (response) {                \n                enqueueSnackbar(response.data?.detail, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/employee-dashboard/app\", { replace: true });\n            })\n            .catch(function (error) {\n                let error_msg_key = Object.keys(error.response.data)[0]\n                let err_msg = error.response.data?.[error_msg_key]\n\n                enqueueSnackbar(err_msg, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n\n    const formik = useFormik({\n        initialValues: {\n        OldPassword: '',\n        NewPassword: '',\n        ConfirmPassword: '',\n        },\n        validationSchema: ChangePassFormSchema,\n        onSubmit: (values) => {\n            callChangePassword(values)\n        }\n    });\n\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n\n    return (\n        <Page title=\"Candidates\">\n            <center>\n            <Container maxWidth=\"xl\" style={{alignContent: \"center\", verticalAlign: \"center\"}}>\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\n                    <Card sx={{ mt: 20 }} variant=\"outlined\" style={{width: \"50%\", height: \"30rem\"}}>\n                    <CardHeader title=\"Change Password\" /><br/><br/>\n                    <CardContent>\n\n                    <TextField \n                        style={{width: \"80%\", marginTop:\"3%\"}}\n                        label=\"Old Password\" \n\n                        {...getFieldProps('OldPassword')}\n\n                        type={showPassword ? 'text' : 'password'}\n\n                        InputProps={{\n                        endAdornment: (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={handleShowPassword} edge=\"end\">\n                            <Icon icon={showPassword ? eyeFill : eyeOffFill} />\n                            </IconButton>\n                        </InputAdornment>\n                        )\n                        }}\n\n                        error={Boolean(touched.OldPassword && errors.OldPassword)}\n                        helperText={touched.OldPassword && errors.OldPassword}\n                        />\n                    \n\n                        <TextField \n                        style={{width: \"80%\", marginTop:\"3%\"}}\n                        label=\"New Password\" \n\n                        {...getFieldProps('NewPassword')}\n\n                        type={showPassword1 ? 'text' : 'password'}\n\n                        InputProps={{\n                        endAdornment: (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={handleShowPassword1} edge=\"end\">\n                            <Icon icon={showPassword1 ? eyeFill : eyeOffFill} />\n                            </IconButton>\n                        </InputAdornment>\n                        )\n                        }}\n\n                        error={Boolean(touched.NewPassword && errors.NewPassword)}\n                        helperText={touched.NewPassword && errors.NewPassword}\n\n                        />\n                     \n                        <TextField \n                        style={{width: \"80%\", marginTop:\"3%\"}}\n                        label=\"Confirm Password\" \n\n                        {...getFieldProps('ConfirmPassword')}\n\n                        type={showPassword2 ? 'text' : 'password'}\n\n                        InputProps={{\n                        endAdornment: (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={handleShowPassword2} edge=\"end\">\n                            <Icon icon={showPassword2 ? eyeFill : eyeOffFill} />\n                            </IconButton>\n                        </InputAdornment>\n                        )\n                        }} \n\n                        error={Boolean(touched.ConfirmPassword && errors.ConfirmPassword)}\n                        helperText={touched.ConfirmPassword && errors.ConfirmPassword}\n\n                        />\n                        <LoadingButton\n                        style={{width: \"80%\", marginTop:\"3%\"}}\n                        fullWidth\n                        size=\"large\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        loading={isSubmitting}\n                        >\n                            Change Password\n                        </LoadingButton>\n                    </CardContent>\n                </Card>\n            </form>\n        </Container>\n        </center>\n    </Page>\n    )\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/EmployeeDashboardApp.js",["1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430","1431","1432","1433","1434"],"import React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\n// material\nimport { Box, Button, Dialog, DialogContent, DialogActions, DialogTitle,   Grid, Container, Typography } from '@mui/material';\n// components\nimport Page from '../../Page';\nimport InterviewScheduleCount from '../app/InterviewScheduleCount';\nimport ReviewScheduleCount from '../app/ReviewScheduleCount';\nimport InterviewCompleted from '../app/InterviewCompleted';\nimport ReviewCompleted from '../app/ReviewCompleted';\nimport InterviewListDialog from '../pages/InterviewListDialog';\nimport {\n  AppTasks,\n  AppNewUsers,\n  AppBugReports,\n  AppItemOrders,\n  AppNewsUpdate,\n  AppWeeklySales,\n  AppOrderTimeline,\n  AppCurrentVisits,\n  AppWebsiteVisits,\n  AppTrafficBySite,\n  AppCurrentSubject,\n  AppConversionRates,\n} from '../app';\nimport * as constants from \"src/utils/constants\";\n\n// ----------------------------------------------------------------------\n\nconst headerStyle = {\n  color: \"white\",\n  textShadow: \"-1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000\",\n  textAlign: \"center\",\n  fontSize: \"40px\",\n  paddingTop: \"40px\"\n}\n\nexport default function EmployeeDashboardApp() {\n  const [open, setOpen] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // get and save employee data\n  const [employeeData, setEmployeeData] = useState([])\n  const employeeDataLoad = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT +'/api/v1/employee-data/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n          setEmployeeData(response.data.data)\n          setOpen(true)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n  }\n\n  useEffect(() => {\n      employeeDataLoad()\n    }, [])\n\n    const InterviewData = []\n\n    if (employeeData.booked_interviews)\n        employeeData.booked_interviews.forEach(data => (data.interview_status=='CONFIRMED' && data.interview_feedback==null) ? \n        InterviewData.push({\n            id: data.id,\n            jobApplicationId: data.job_application_id,\n            rrfNumber: data.rrf_number,\n            candidateName: data.candidate_name,\n            candidateEmail: data.candidate_email,\n            candidatePhoneNumber: data.candidate_number,\n            interviewRound: data.interview_round,\n            start: data.start_date, \n            end: data.end_date, \n            status: data.interview_status, \n            link: data.interview_moderator_link\n        }) : \"Not Available\") \n\n        const InterviewCompletedData = []\n\n        if (employeeData.booked_interviews)\n            employeeData.booked_interviews.forEach(data => (data.interview_status=='COMPLETED') ? \n            InterviewCompletedData.push({\n                id: data.id,\n                jobApplicationId: data.job_application_id,\n                rrfNumber: data.rrf_number,\n                candidateName: data.candidate_name,\n                candidateEmail: data.candidate_email,\n                candidatePhoneNumber: data.candidate_number,\n                interviewRound: data.interview_round,\n                start: data.start_date, \n                end: data.end_date, \n                status: data.interview_status, \n                link: data.interview_moderator_link\n            }) : \"Not Available\")         \n\n      \n  return (\n    <Page title=\"Employee Dashboard | Minimal-UI\">\n      <Container maxWidth=\"xl\">\n        <Box sx={{ pb: 4 }}>\n          <Typography variant=\"h4\">Hi {employeeData?.user?.first_name}, Welcome back</Typography>\n        </Box>\n        {/* <Box component=\"img\" src=\"/static/people-banner.jpg\" /> */}\n\n        <div style={{background: 'url(\"/static/people-banner.jpg\")', backgroundSize: \"cover\", minHeight: \"580px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n        <h1 style={{fontSize: \"2.75em\",color: \"#fff\", textShadow: \"2px 2px #000\", alignItems: \"center\", justifyContent: \"center\",\n        fontWeight: \"bold\", position: \"relative\", zIndex: \"10\"}}>\n          <span style={{color: \"#f05e0a\", marginLeft: \"20%\"}}>Real People. Real Stories.</span>\n          <br></br>\n          It’s an Exciting Journey… We are Gatewayites!</h1>\n        </div>\n\n        {/* <h1 style={headerStyle}>ENGINEERING THE DIGITAL INNOVATION</h1>\n        <h1 style={{textAlign: 'center', fontWeight: 'bold', fontSize: \"30px\"}}>DECIDE. COMMIT. SUCCEED.</h1>\n\n        <p style={{fontSize: \"20px\", padding: \"40px\", textAlign: \"center\"}}>\n          Our growth strategies are built around our culture of Integrity, Ethics and Commitment, and the Brilliance of our Team.\n        </p> */}\n\n        <Grid container spacing={3} sx={{mt: 3}}>\n        <Grid item xs={12} sm={6} md={3}>\n            <InterviewScheduleCount countData={InterviewData?.filter(data => data.interviewRound !== 'REVIEW_CANDIDATE').length}/>\n          </Grid> \n          <Grid item xs={12} sm={6} md={3}>\n            <ReviewScheduleCount countData={InterviewData?.filter(data => data.interviewRound === 'REVIEW_CANDIDATE').length}/>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <InterviewCompleted countData={InterviewCompletedData?.filter(data => data.interviewRound !== 'REVIEW_CANDIDATE').length} />\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <ReviewCompleted countData={InterviewCompletedData?.filter(data => data.interviewRound === 'REVIEW_CANDIDATE').length} />\n          </Grid>\n\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppWebsiteVisits />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppCurrentVisits />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppConversionRates />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppCurrentSubject />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppNewsUpdate />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppOrderTimeline />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={4}>\n            <AppTrafficBySite />\n          </Grid> */}\n\n          {/* <Grid item xs={12} md={6} lg={8}>\n            <AppTasks />\n          </Grid> */}\n        </Grid>\n\n        <Dialog\n          maxWidth='lg'\n          open={open}\n          keepMounted\n          onClose={handleClose}\n        >\n        {/* ------------ Dialog Box ---------------- */}\n        \n        <DialogTitle>{\"Interview List\"}</DialogTitle>\n        <DialogContent>\n          <InterviewListDialog data={InterviewData}/>\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" onClick={handleClose}>CLOSE</Button>\n        </DialogActions>\n        </Dialog>\n      </Container>\n    </Page>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/CompletedInterview.js",["1435","1436","1437"],"import { React } from \"react\";\nimport Page from '../../Page';\nimport axios from 'axios';\nimport {useState, useEffect} from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Typography } from '@mui/material';\nimport MUIDataTable from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport * as constants from 'src/utils/constants';\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nexport default function CompletedInterview() {\n    const options = {\n        selectableRows: false,\n        filter: true,\n        filterType: \"multiselect\",\n        responsive: \"standard\",\n        download: false,\n        print: false,\n        draggableColumns: {enabled: true},\n    };\n\n    const columns = [\n        {\n            name: \"Interview ID\",\n            options: {\n                filter: false,\n                display:false\n            },\n        },\n        {\n            name: \"Job Application ID\",\n            options: {\n                filter: false,\n                display:false\n            },\n        },\n        {\n            name: \"RRF Number\",\n            options: {\n                filter: true,\n            },\n        },\n        {\n            name: \"Candidate Name\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Interview Round\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <b>{value}</b>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Email\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Phone Number\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Interview Date\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Interview Status\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                       value === 'CONFIRMED' ?  <b style={{color: 'red'}}>Pending</b> : <b style={{color: 'green'}}>Completed</b> \n                    )\n                }\n            }\n        }\n    ];\n\n    // get and save employee data\n    const [employeeData, setEmployeeData] = useState([])\n    const employeeDataLoad = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee-data/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setEmployeeData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }\n\n    useEffect(() => {\n        employeeDataLoad()\n      }, [])\n\n    const InterviewData = []\n    if (employeeData.booked_interviews)\n        employeeData.booked_interviews.forEach(data => (data.interview_status=='COMPLETED') ? \n        InterviewData.push({\n            id: data.id,\n            jobApplicationId: data.job_application_id,\n            rrfNumber: data.rrf_number,\n            candidateName: data.candidate_name,\n            candidateEmail: data.candidate_email,\n            candidatePhoneNumber: data.candidate_number,\n            interviewRound: data.interview_round,\n            start: data.start_date, \n            end: data.end_date, \n            status: data.interview_status, \n            link: data.interview_moderator_link\n        }) : \"Not Available\") \n\n    return (\n    <Page title=\"Booked Interview | ResumeX\">\n        <Container maxWidth=\"xl\" align=\"center\">\n\n            <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800'}}>Completed Interviews</h2>\n\n            <ThemeProvider theme={theme}>\n                <MUIDataTable\n                    data={InterviewData.map(data => {\n                        return [\n                            data.id,\n                            data.jobApplicationId,\n                            data.rrfNumber,\n                            data.candidateName,\n                            data.interviewRound,\n                            data.candidateEmail,\n                            data.candidatePhoneNumber,\n                            data.start.substring(0, 10).split('-').reverse().join('-'),\n                            data.status\n                        ]\n                    })}\n                    columns={columns}\n                    options={options}\n                />\n            </ThemeProvider>  \n        </Container>\n    </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/businessUnits/EditBusinessUnits.js",["1438","1439","1440","1441","1442","1443"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditBusinessUnits() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores BusinessUnits information\n    const [BusinessUnitsInfo, setBusinessUnitsInfo] = useState({});\n\n\n    const getBusinessUnitsInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"business-units/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setBusinessUnitsInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getBusinessUnitsInfo();\n    }, [])\n\n    const callEditBusinessUnitsAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"business-units/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/business-units\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const BusinessUnitsSchema = Yup.object().shape({\n        BusinessUnitsName: Yup.string()\n            .required(\"Business Unit name required\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            BusinessUnitsName: BusinessUnitsInfo?.bu_name ?? '',        \n        },\n        enableReinitialize: true,\n        validationSchema: BusinessUnitsSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"bu_name\": values.BusinessUnitsName,\n            }\n\n            // call Edit BusinessUnits API\n            callEditBusinessUnitsAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Business Unit\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/business-units\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Business Unit\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Business Unit\"\n\n                                            {...getFieldProps('BusinessUnitsName')}\n\n                                            error={Boolean(touched.BusinessUnitsName && errors.BusinessUnitsName)}\n                                            helperText={touched.BusinessUnitsName && errors.BusinessUnitsName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update Business Unit\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/businessUnits/AddBusinessUnitsForm.js",["1444","1445","1446","1447","1448","1449"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddBusinessUnitsForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddBusinessUnitsAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"business-units/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/business-units\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const BusinessUnitsSchema = Yup.object().shape({\n        BusinessUnitsName: Yup.string()\n            .required(\"Business Unit name required\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            BusinessUnitsName: '',\n            \n        },\n        validationSchema: BusinessUnitsSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"bu_name\": values.BusinessUnitsName,\n            }\n\n            // call create BusinessUnits API\n            callAddBusinessUnitsAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Business Unit\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/business-units\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Business Unit\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Business Unit Name\"\n\n                                            {...getFieldProps('BusinessUnitsName')}\n\n                                            error={Boolean(touched.BusinessUnitsName && errors.BusinessUnitsName)}\n                                            helperText={touched.BusinessUnitsName && errors.BusinessUnitsName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Business Unit\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/HrJobApplication.js",["1450","1451"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { useState } from 'react';\nimport React, { useEffect } from \"react\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Stack, Container, Typography} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nexport default function HrJobApplication() {\n    // state to save job application ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {selectableRows: 'none', // It will turn off rows selection\n        filter: true,\n        filterType: \"multiselect\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n    };\n\n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Candidate Name\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <a href={`/resumeX/job-application/edit/${rowClickData}`} style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                    )\n                }\n            }\n        },\n        {\n            name: \"RRF Number\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Email\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Phone Number\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Source\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Tech Stack\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Business Unit\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Status\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"DRM\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Application Date\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        value.substring(0, 10).split('-').reverse().join('/')\n                    )\n                }\n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n    const userInfo = UserInfo()\n    const [jobApplicationData, setJobApplicationData] = useState([])\n    const [empData, setEmpData] = useState([])\n\n    const getJobApplication = () => \n    {\n        apiInstance({\n            method: \"get\",\n            url: \"job-application/\",\n            headers: {\n                Authorization: \"token \" + localStorage.getItem('authToken'),\n            }\n        })\n        .then(function (response) {\n            setJobApplicationData(response.data.data)\n            setIsLoading(false)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    const getEmployeeData = () => \n    {\n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n\n        if(user_role === 'BU_HEAD')\n        {\n            apiInstance({\n                method: \"get\",\n                url: \"employee-data/\",\n                headers: {\n                    Authorization: \"token \" + localStorage.getItem('authToken'),\n                }\n            })\n            .then(function (response) {\n                var emp_info = response.data.data\n                setEmpData(emp_info)\n            })\n            .catch((e) => console.log('something went wrong :(', e));\n        }\n    };\n\n    const getJobData = () => {\n        if (userInfo.role === 'BU_HEAD')\n        {\n            let user_bu = empData?.bu_group?.bu_name\n            let filteredApps = jobApplicationData.filter((item) => item.requisition.bu_group === user_bu);\n            return filteredApps            \n        }\n        else if(userInfo.role === 'DRM'){\n            let uid = userInfo.pk\n            let filteredData = jobApplicationData.filter((item) => item.drm_user?.user?.pk === uid)\n            return filteredData\n        }\n        else{\n            return jobApplicationData\n        }\n    }\n  \n    useEffect(() => {\n      getJobApplication()\n      getEmployeeData()\n    }, [])\n\n    return(\n        <Page title=\"Job Application | ResumeX\">\n            <Container maxWidth=\"xl\">\n                {/* <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                    Job Applications\n                </Typography> */}\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Job Applications</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        // data={jobApplicationData.map(data => {\n                        //     return [\n                        //         data.id,\n                        //         data?.resume?.candidate?.user?.first_name + \" \" + data?.resume?.candidate?.user?.last_name,\n                        //         data.resume.candidate.requisition.requisite_number,\n                        //         data.resume.candidate.user.email,\n                        //         data.resume.candidate.user.mobile,\n                        //         data.resume.candidate.source.source,\n                        //         data.resume.candidate.requisition.bu_group,\n                        //         data.resume.candidate.status.status,\n                        //         data.created\n                        //     ]\n                        // })}\n                        data={getJobData().slice(0).reverse().map(data => {\n                            return [\n                                data.id,\n                                data?.resume?.candidate?.user?.first_name + \" \" + data?.resume?.candidate?.user?.last_name,\n                                data.requisition.requisite_number,\n                                data.resume.candidate.user.email,\n                                data.resume.candidate.user.mobile,\n                                data.resume?.candidate?.source?.source,\n                                data.requisition.tech_stack.tech_stack_name,\n                                data.requisition.bu_group,\n                                data.resume?.candidate?.status?.status,\n                                data.drm_user?.user ? data.drm_user?.user?.first_name + \" \" +data.drm_user?.user?.last_name : \" - \",\n                                data.created\n                            ]\n                          }\n                        )}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>   \n                )}\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/Candidates.js",["1452"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function Candidates() {\n    const userInfo = UserInfo()\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Candidate Name\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var cid = tableMeta.rowData[0]\n                    return (\n                        // <a href={`/resumeX/candidates/edit/${rowClickData}`} style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n\n                        <RouterLink \n                            to={`/resumeX/candidates/edit/${cid}`}\n                            state={{fromPage: \"candidates\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"RRF Number\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Project\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"BU\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Email\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Phone Number\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Source\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Status\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Notice Period\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Created By\",\n            options: {\n                filter: true,\n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [candidateData, setCandidateData] = useState([])\n    const getCandidates = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/candidate-viewset/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setCandidateData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    const getCandData = () => {\n        if(userInfo.role === 'DRM')\n        {\n            let uid = userInfo.pk\n            const result = candidateData\n                .map(item => ({\n                    ...item,\n                    children: item.job_application?.filter(child => child?.drm_user?.pk === uid)\n                }))\n                .filter(item => item.children.length > 0)\n            \n            const userRecords = candidateData.filter(cand => cand.created_by?.member?.pk === uid)\n\n            // By Using Loadash Library\n            const mergedData = _.unionBy(result, userRecords, \"created_by\")\n\n            // Another way of merging\n            // var ids = new Set(userRecords.map(d => d.id));\n            // var merged = [...userRecords, ...result.filter(d => !ids.has(d.id))];\n            // console.log(\"\\n\\n merged --> \", merged)\n            \n            // return result\n            return mergedData\n\n        }\n        else{\n            return candidateData\n        }\n    }\n  \n    useEffect(() => {\n      getCandidates()\n    }, [])\n\n    return (\n        <Page title=\"Candidates | ResumeX\">\n            <Container maxWidth=\"xl\">\n                {/* <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                Candidates\n                </Typography> */}\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Candidates</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/candidates/create-candidate/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Create Candidate\n                            </Button>\n                        }\n                        // data={candidateData.map(data => {\n                        //     return [\n                        //         data?.id,\n                        //         {name: data?.user?.first_name + \" \" + data?.user?.last_name, uid: data?.id},\n                        //         data?.requisition?.requisite_number,\n                        //         data?.requisition?.bu_group,\n                        //         data?.user?.email,\n                        //         data?.user?.mobile,\n                        //         data?.source?.source,\n                        //         data?.status?.status,\n                        //         data?.created_by?.member?.first_name + \" \" + data?.created_by?.member?.last_name\n                        //     ]\n                        // })}\n                        data={getCandData().slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                // {name: data?.user?.first_name + \" \" + data?.user?.last_name, uid: data?.id},\n                                data?.user?.first_name + \" \" + data?.user?.last_name,\n                                data?.requisition?.requisite_number,\n                                data?.requisition?.project_name,\n                                data?.requisition?.bu_group,\n                                data?.user?.email,\n                                data?.user?.mobile,\n                                data?.source?.source,\n                                data?.status?.status,\n                                data?.notice_period?.notice_period,\n                                data?.created_by.member ? data?.created_by?.member?.first_name + \" \" + data?.created_by?.member?.last_name : \"PORTAL\"\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/HrCreateJobs.js",["1453","1454","1455","1456","1457","1458","1459","1460"],"import React, { useEffect } from \"react\";\nimport { filter } from 'lodash';\nimport { Icon } from '@iconify/react';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { useFormik } from 'formik';\nimport { useState } from 'react';\n// material\nimport {\n  Card,\n  Table,\n  Stack,\n  Avatar,\n  Button,\n  Checkbox,\n  TableRow,\n  TableBody,\n  TableCell,\n  Container,\n  Typography,\n  TableContainer,\n  TablePagination\n} from '@mui/material';\nimport { Link as RouterLink } from 'react-router-dom';\n// components\nimport Page from '../../Page';\nimport axios from 'axios';\nimport Label from '../../Label';\nimport Scrollbar from '../../Scrollbar';\nimport SearchNotFound from '../../SearchNotFound';\nimport { JobListHead, JobListToolbar, JobMoreMenu } from '../create-jobs';\nimport Popup from 'reactjs-popup';\nimport * as constants from \"src/utils/constants\";\n\n// ----------------------------------------------------------------------\n\n\nconst TABLE_HEAD = [\n  { id: 'pk', label: 'ID', alignRight: false, alignCenter: true },\n  { id: 'jobName', label: 'Job Name', alignRight: false },\n  { id: 'jobTechnology', label: 'Technology', alignRight: false, alignCenter: true },\n  { id: 'jobOpenings', label: 'Openings', alignRight: false },\n  { id: 'jobActive', label: 'Active', alignRight: false },\n];\n\n// ----------------------------------------------------------------------\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction applySortFilter(array, comparator, query) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  if (query) {\n    return filter(array, (_user) => _user.jobName.toLowerCase().indexOf(query.toLowerCase()) !== -1);\n  }\n  return stabilizedThis.map((el) => el[0]);\n}\n\n\nexport default function HrCreateJobs() {\n  // menu open state\n  const [isOpen, setIsOpen] = useState(false);\n\n  // popup open state\n  const [popupOpen, setPopupOpen] = useState(false);\n  const closePopup = () => setPopupOpen(false);\n\n  const [jobData, setJobData] = useState([])\n  const getJob = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/jobs/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n    .then((response) => {\n      const jData = getDataArray(response.data.data)\n      setJobData(jData)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  useEffect(() => {\n    getJob()\n  }, [])\n\n    const getDataArray = (jData) =>\n    jData.map((jobObj) => ({\n      pk: jobObj.id,\n      jobName: jobObj.job_name,\n      jobCategory: jobObj.job_category,\n      jobPrimaryTechnology: jobObj.primary_technology,\n      jobLocation: jobObj.location,\n      jobMaxExp: jobObj.max_exp,\n      jobMinExp: jobObj.min_exp,\n      jobSkills: jobObj.skills,\n      jobRequirements: jobObj.requirements,\n      jobResponsibility: jobObj.responsibility,\n      jobDescription: jobObj.description,\n      jobTechnology: jobObj.technology,\n      jobOpenings: jobObj.total_openings,\n      jobActive: jobObj.is_active\n    }));\n\n  const USERLIST = jobData\n\n  const [page, setPage] = useState(0);\n  const [order, setOrder] = useState('asc');\n  const [selected, setSelected] = useState([]);\n  const [orderBy, setOrderBy] = useState('job_data');\n  const [filterName, setFilterName] = useState('');\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = USERLIST.map((n) => n.job_name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, job_name) => {\n    const selectedIndex = selected.indexOf(job_name);\n    let newSelected = [];\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, job_name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleFilterByName = (event) => {\n    setFilterName(event.target.value);\n  };\n\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - USERLIST.length) : 0;\n\n  const filteredUsers = applySortFilter(USERLIST, getComparator(order, orderBy), filterName);\n\n  const isUserNotFound = filteredUsers.length === 0;\n\n  return (\n    <Page title=\"Create Jobs | ResumeX\">\n      <Container>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\n          <Typography variant=\"h4\" gutterBottom>\n            Create Jobs\n          </Typography>\n          <Button\n            variant=\"contained\"\n            component={RouterLink}\n            to=\"/resumeX/create-jobs/create-job-form\"\n            startIcon={<Icon icon={plusFill} />}\n          >\n            Create Job\n          </Button>\n        </Stack>\n\n        <Card>\n          <JobListToolbar\n            numSelected={selected.length}\n            filterName={filterName}\n            onFilterName={handleFilterByName}\n          />\n\n          <Scrollbar>\n            <TableContainer sx={{ minWidth: 800 }}>\n              <Table>\n                <JobListHead\n                  order={order}\n                  orderBy={orderBy}\n                  headLabel={TABLE_HEAD}\n                  rowCount={USERLIST.length}\n                  numSelected={selected.length}\n                  onRequestSort={handleRequestSort}\n                  onSelectAllClick={handleSelectAllClick}\n                />\n                <TableBody>\n                  {filteredUsers\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row) => {\n                      const avatarUrl = \"/static/mock-images/cities/city.jpg\"\n\n                      const { pk, jobName, jobCategory, jobPrimaryTechnology, jobLocation, jobMaxExp, jobMinExp, jobSkills, \n                        jobRequirements, jobResponsibility, jobDescription, jobTechnology, \n                        jobOpenings, jobActive } = row;\n\n                      const isItemSelected = selected.indexOf(jobName) !== -1;\n\n                      const technologies = []\n                      const locations = []\n                    \n                      jobTechnology.forEach(technology => {\n                        technologies.push(technology.technology_name + ' | ')\n                      });\n\n                      jobLocation.forEach((location) => {\n                        locations.push(location.office_location + \" | \");\n                      });\n                        \n                      return (\n                        <TableRow\n                          hover\n                          key={pk}\n                          tabIndex={-1}\n                          role=\"checkbox\"\n                          selected={isItemSelected}\n                          aria-checked={isItemSelected}\n                        >\n                          <TableCell padding=\"checkbox\">\n                            <Checkbox\n                              checked={isItemSelected}\n                              onChange={(event) => handleClick(event, jobName)}\n                            />\n                          </TableCell>\n                          <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                              <Avatar alt={jobName} src={avatarUrl} />\n                              <Typography variant=\"subtitle2\" noWrap>\n                                {pk}\n                              </Typography>\n                            </Stack>\n                          </TableCell>\n\n                          <Popup\n                            contentStyle={{\n                              alignItems: \"center\",\n                              left: \"150px\",\n                              width: \"70%\",\n                              maxHeight: \"70vh\",\n                              overflowY: \"auto\",\n                            }}\n                            modal\n                            trigger={\n                              <TableCell align=\"left\"><a href=\"#\" style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{jobName}</a></TableCell>\n                            }\n                            on=\"click\">\n                              \n                            <div style={{ color: 'black', backgroundColor: '#00AB5514' }}>\n                              <h3>{jobName}</h3>\n                              <hr></hr>\n                            </div>\n\n                            <div style={{paddingTop: \"0px\", height: \"120px\"}}>\n                              <div style={{width: \"30%\", height: \"100%\", float: \"left\"}}>\n                              <h5 style={{paddingTop: \"20px\", }}>Job Category:</h5>\n                                {jobCategory.job_category_name}\n                              </div>\n                              <div style={{width: \"30%\", height: \"100%\", float: \"left\"}}>\n                              <h5 style={{paddingTop: \"20px\", }}>Location:</h5>\n                                {locations}\n                              </div>\n                              <div style={{width: \"30%\", height: \"100%\", float: \"left\"}}>\n                              <h5 style={{paddingTop: \"20px\", }}>Primary Technology:</h5>\n                                {jobPrimaryTechnology}\n                              </div>\n                            </div>\n                            <hr></hr>\n\n                            <div style={{paddingTop: \"10px\", height: \"100px\"}}>\n                              <div style={{width: \"30%\", height: \"100%\", float: \"left\"}}>\n                              <h5 style={{paddingTop: \"20px\", }}>Technology:</h5>\n                                {technologies}\n                              </div>\n\n                              <div style={{width: \"30%\", height: \"100%\", float: \"left\"}}>\n                              <h5 style={{paddingTop: \"20px\", }}>Minimum Experience:</h5>\n                                {jobMinExp}\n                              </div>\n                              <div style={{width: \"20%\", height: \"100%\", float: \"left\"}}>\n                              <h5 style={{paddingTop: \"20px\", }}>Maximum Experience:</h5>\n                                {jobMaxExp}\n                              </div>\n                              <div style={{width: \"20%\", height: \"100%\", float: \"left\"}}>\n                              <h5 style={{paddingTop: \"20px\", }}>Total Openings:</h5>\n                                {jobOpenings}\n                              </div>\n                            </div>\n                            <hr></hr>\n\n                            <h5 style={{paddingTop: \"20px\", }}>Skills:</h5>\n                            {jobSkills}\n                            <hr></hr>\n\n                            <h5 style={{paddingTop: \"20px\", }}>Requirements:</h5>\n                            {jobRequirements}\n                            <hr></hr>\n\n                            <h5 style={{paddingTop: \"20px\", }}>Responsibility:</h5>\n                            {jobResponsibility}\n                            <hr></hr>\n\n                            <h5 style={{paddingTop: \"20px\", }}>Description:</h5>\n                            {jobDescription}\n                          </Popup>\n\n                          <TableCell align=\"left\">{technologies} </TableCell>\n                          <TableCell align=\"left\">{jobOpenings}</TableCell>\n                          <TableCell align=\"left\">\n                            <Label\n                              variant=\"ghost\"\n                              color={jobActive ? \"success\" : \"warning\"}\n                            >\n                            {jobActive ? \"Yes\" : \"No\"}\n                            </Label>\n                          </TableCell>\n\n                          <TableCell align=\"right\">\n                            <JobMoreMenu id={pk} jobName={jobName} jobCategory={jobCategory.id}\n                             jobPrimaryTechnology={jobPrimaryTechnology}\n                             jobLocation={jobLocation} jobMaxExp={jobMaxExp} jobMinExp={jobMinExp}\n                             jobSkills={jobSkills} jobRequirements={jobRequirements} \n                             jobResponsibility={jobResponsibility} jobDescription={jobDescription}\n                             jobTechnology={jobTechnology} jobOpenings={jobOpenings} jobActive={jobActive}/>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  {emptyRows > 0 && (\n                    <TableRow style={{ height: 53 * emptyRows }}>\n                      <TableCell colSpan={6} />\n                    </TableRow>\n                  )}\n                </TableBody>\n                {isUserNotFound && (\n                  <TableBody>\n                    <TableRow>\n                      <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n                        <SearchNotFound searchQuery={filterName} />\n                      </TableCell>\n                    </TableRow>\n                  </TableBody>\n                )}\n              </Table>\n            </TableContainer>\n          </Scrollbar>\n\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={USERLIST.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </Card>\n\n\n      </Container>\n    </Page>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/RRFTemplates.js",["1461","1462","1463"],"import {useState, useEffect} from \"react\";\nimport Page from '../../Page';\nimport { Button, Container, Typography } from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport TableRow from '@mui/material/TableRow';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport { Icon } from '@iconify/react';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport axios from 'axios';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nimport Table from '@mui/material/Table';\nimport { styled } from '@mui/material/styles';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableContainer from '@mui/material/TableContainer';\nimport * as constants from \"src/utils/constants\";\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: 'white',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'rgb(0 171 85)',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n    });\n\n    const components = {\n        ExpandButton: function (props) {\n            return <ExpandButton {...props} />;\n        }\n    };\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: \"#00AB55\",\n        color: theme.palette.common.white,\n        fontWeight: \"bold\",\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n    }));\n    \n    const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 1,\n    },\n}));\n\nexport default function RRFTemplates() {\n    const navigate = useNavigate();\n\n    // state to save requisition template ID\n    const [rowClickData, setRowClickData] = useState([])\n\n    const handleOnRowClick = (rowData) => {\n        setRowClickData(rowData[0])\n\n        let requisitionTemplate = requisitionTemplateData.filter(item => {\n            return item.id === rowData[0]\n        })\n\n        navigate(\"/resumeX/rrf-templates/edit\", {state:{\n            requisitionTemplate: requisitionTemplate,\n            technologyData: technologyData\n        }})\n    }    \n\n    const options = {\n        selectableRows: false, // <===== will turn off checkboxes in rows\n        filter: true,\n        filterType: \"multiselect\",\n        responsive: \"standard\",\n        download: false,\n        print: false,\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {handleOnRowClick(rowData)},\n        expandableRows: true,\n        expandableRowsHeader: false,\n        expandableRowsOnClick: false,\n        isRowExpandable: (dataIndex, expandedRows) => {\n        //   if (dataIndex === 3 || dataIndex === 4) return false;\n    \n            // Prevent expand/collapse of any row if there are 4 rows expanded already (but allow those already expanded to be collapsed)\n            if (\n                expandedRows.data.length > 4 &&\n                expandedRows.data.filter((d) => d.dataIndex === dataIndex).length === 0\n            )\n            return false;\n            return true;\n        },\n\n        customToolbarSelect: () => {},\n    \n    renderExpandableRow: (rowData, rowMeta) => {\n        const colSpan = rowData.length + 1;\n        \n        let requisitions = requisitionData.filter(item => {\n            return item.rrf_template === rowData[0]\n        })\n        \n        return (\n            <tr>\n            <td colSpan={9}>\n              <TableContainer style={{ width: \"100%\" }}>\n                <Table>\n                  <TableHead>\n                      <TableCell></TableCell>\n                      <StyledTableCell>RRF Number</StyledTableCell>\n                      <StyledTableCell>Requisitioner</StyledTableCell>\n                      <StyledTableCell>Technology Stack</StyledTableCell>\n                      <StyledTableCell>Business Unit</StyledTableCell>\n                      <StyledTableCell>Requisition Date</StyledTableCell>\n                      <StyledTableCell>Expected DOJ</StyledTableCell>\n                  </TableHead>\n                  <TableBody>\n                      {requisitions.length > 0 ? (\n                          requisitions.map((requisition) => (\n                          <StyledTableRow>\n                              <TableCell></TableCell>\n                              <StyledTableCell><font style={{color: \"#00AB55\", fontWeight: \"bolder\"}}>{requisition.requisite_number}</font></StyledTableCell>\n                              <StyledTableCell>{requisition.requisite_creator.first_name + \" \" +  requisition.requisite_creator.last_name}</StyledTableCell>\n                              <StyledTableCell>{requisition.tech_stack.tech_stack_name}</StyledTableCell>\n                              <StyledTableCell>{requisition.bu_group.bu_name}</StyledTableCell>\n                              <StyledTableCell>{requisition.created.substring(0, 10).split('-').reverse().join('-')}</StyledTableCell>\n                              <StyledTableCell>{requisition.expected_join_date.substring(0, 10).split('-').reverse().join('-')}\n                              </StyledTableCell>\n                          </StyledTableRow>\n                          ))) : (\n                          <StyledTableRow>\n                              <StyledTableCell>No Data Available</StyledTableCell>\n                          </StyledTableRow>\n                          )\n                      }\n                  </TableBody>\n              </Table>\n              </TableContainer>\n          </td>\n          </tr>\n        );\n    },\n    \n    onRowExpansionChange: (curExpanded, allExpanded, rowsExpanded) =>\n        console.log(curExpanded, allExpanded, rowsExpanded)\n    };\n\n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Job Name\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <a href=\"\" style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Technology Stack\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Default FSD Members\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Primary Technology\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Required Experience\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Department\",\n            options: {\n                filter: true\n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    // Get requisition template data\n    const [requisitionTemplateData, setRequisitionTemplateData] = useState([])\n    \n    const getRequisitionTemplateData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-template/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionTemplateData(response.data.data)\n            setIsLoading(false)            \n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    // Get requisition data\n    const [requisitionData, setRequisitionData] = useState([])\n\n    const getRequisitionData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisitions/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // technology data state\n    const [technologyData, setTechnologyData] = useState([])\n\n    const getTechnologyData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechnologyData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    };      \n\n    useEffect(() => {\n        getRequisitionTemplateData()\n        getTechnologyData()\n        getRequisitionData()\n    }, [])\n\n    return (\n        <Page title='Requisition Templates | ResumeX'>\n            <Container maxWidth=\"xl\">\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Requisition Template</h2>\n\n                {/* <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                    Requisition Template\n                </Typography> */}\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (                \n                    <ThemeProvider theme={theme}>\n                        <MUIDataTable\n                            title={\n                            <Button \n                                variant=\"contained\" \n                                startIcon={<Icon icon={plusFill} />} \n                                style={StyledButton}\n                                component={RouterLink}\n                                to=\"/resumeX/rrf-templates/create\"\n                                >\n                                    Create RRF Template\n                            </Button>\n                            }\n                            data={requisitionTemplateData.slice(0).reverse().map(data => {\n                                return [\n                                    data.id,\n                                    data.job_name,\n                                    data.tech_stack.tech_stack_name,\n                                    data.fsd_members.recruiters.map(\n                                        (user, index) => (index ? ', ': '') + user.member.first_name + \" \" + user.member.last_name),\n                                    data.primary_technology?.map(\n                                        (technology, index) => (index ? ', ': '') + technology.technology_name),\n                                    data.job_exp,\n                                    data.department.job_category_name\n                                ]\n                            })}\n                            columns={columns}\n                            options={options}\n                            components={components}\n                        />\n                    </ThemeProvider>\n                )}                    \n            </Container>\n        </Page>\n    );\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/DRMRequisition.js",["1464","1465","1466","1467","1468","1469","1470","1471","1472","1473"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport {useState, useEffect} from \"react\";\nimport TableRow from '@mui/material/TableRow';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { Button, Container, Typography } from '@mui/material';\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n\nimport Table from '@mui/material/Table';\nimport Paper from '@mui/material/Paper';\nimport { styled } from '@mui/material/styles';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport { ConstructionOutlined } from '@mui/icons-material';\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n            styleOverrides: {\n                root: {\n                    backgroundColor: 'white',\n                },\n                paper: {\n                    boxShadow: 'none',\n                },\n            },\n        },\n        MuiToolbar: {\n            styleOverrides: {\n                root: {\n                    // backgroundColor: 'yellow',\n                },\n            },\n        },\n        MuiTableCell: {\n            styleOverrides: {\n                head: {\n                    backgroundColor: 'rgb(0 171 85)',\n                },\n            },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                    fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n            styleOverrides: {\n                headerCell: {\n                    // backgroundColor: 'blue',\n                    fontWeight: '500px'\n                },\n            },\n        },\n        MuiTableFooter: {\n            styleOverrides: {\n                root: {\n                    '& .MuiToolbar-root': {\n                        //   backgroundColor: 'purple',\n                    },\n                },\n            },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: \"#00AB55\",\n        color: theme.palette.common.white,\n        fontWeight: \"bold\",\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n    }));\n    \n    const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 1,\n    },\n    }));\n\nfunction createData(name, calories, fat, carbs, protein) {\n    return { name, calories, fat, carbs, protein };\n    }\n\nconst rows = [\n    createData('Technical', 0, 0, 0, 0, 0, 0, 0, 0),\n    createData('Non-Technical', 0, 0, 0, 0, 0, 0, 0, 0),\n    createData('HR-Campus', 0, 0, 0, 0, 0, 0, 0, 0),\n    ];\n\nexport default function DRMRequisition() {\n    const navigate = useNavigate();\n    // state to save requisition ID\n    const [rowClickData, setRowClickData] = useState([])\n\n    const handleOnRowClick = (rowData) => {\n        setRowClickData(rowData[0])\n\n        let requisitionTemplate = requisitionData.filter(item => {\n            return item.id === rowData[0]\n        })\n\n        navigate(\"/resumeX/requisition/edit\", {state:{\n            from: requisitionTemplate, \n            office:officeLocationData,\n            fsdMembers: fsdMembersData,\n            technologyData: technologyData\n        }})\n    }\n\n    const options = {\n        selectableRows: 'none', // <===== will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        onRowClick: (rowData) => {handleOnRowClick(rowData)},\n        expandableRows: true,\n        expandableRowsHeader: false,\n        expandableRowsOnClick: false,\n        isRowExpandable: (dataIndex, expandedRows) => {\n        //   if (dataIndex === 3 || dataIndex === 4) return false;\n    \n            // Prevent expand/collapse of any row if there are 4 rows expanded already (but allow those already expanded to be collapsed)\n            if (\n                expandedRows.data.length > 4 &&\n                expandedRows.data.filter((d) => d.dataIndex === dataIndex).length === 0\n            )\n            return false;\n            return true;\n        },\n\n        customToolbarSelect: () => {},\n    \n    renderExpandableRow: (rowData, rowMeta) => {\n        const colSpan = rowData.length + 1;\n        let candidateData = requisitionData.filter(item => {\n            return item.id === rowData[0]\n        })  \n        return (\n        <tr>\n          <td colSpan={20}>\n            <TableContainer style={{ width: \"100%\" }}>\n              <Table>\n                <TableHead>\n                    <TableCell></TableCell>\n                    <StyledTableCell>Name</StyledTableCell>\n                    <StyledTableCell>Email</StyledTableCell>\n                    <StyledTableCell>Mobile</StyledTableCell>\n                    <StyledTableCell>Experience</StyledTableCell>\n                    <StyledTableCell>Status</StyledTableCell>\n                    <StyledTableCell>Technology</StyledTableCell>\n                    <StyledTableCell>Notice Period</StyledTableCell>\n                    <StyledTableCell>Current CTC</StyledTableCell>\n                    <StyledTableCell>Expected CTC</StyledTableCell>\n                    <StyledTableCell>Source</StyledTableCell>\n                    <StyledTableCell>Current Location</StyledTableCell>\n                </TableHead>\n                <TableBody>\n                    {candidateData[0].candidate.length > 0 ? (\n                        candidateData[0].candidate.map((candidate) => (\n                        <StyledTableRow>\n                            <TableCell></TableCell>\n                            <StyledTableCell>\n                                {candidate?.job_application?.[0]?.drm_user.pk === userInfo.pk ? (\n                                <RouterLink \n                                    to={`/resumeX/candidates/edit/${candidate.id}`}\n                                    state={{fromPage: \"drm-requisition\"}} \n                                    style={{textDecoration: 'none', \n                                            color: '#00AB55', \n                                            fontWeight: 'bold'}}> \n                                    {candidate.user.first_name + \" \" + candidate.user.last_name}\n                                </RouterLink>\n                                ) : \n                                candidate?.requisition?.assigned_drm?.uid === userInfo.pk ? \n                                <RouterLink \n                                to={`/resumeX/candidates/edit/${candidate.id}`}\n                                state={{fromPage: \"drm-requisition\"}} \n                                style={{textDecoration: 'none', \n                                        color: '#00AB55', \n                                        fontWeight: 'bold'}}> \n                                {candidate.user.first_name + \" \" + candidate.user.last_name}\n                                </RouterLink> :\n\n                                candidate.user.first_name + \" \" + candidate.user.last_name\n                                \n                                }                               \n                            </StyledTableCell>\n\n                            <StyledTableCell> {candidate.user.email} </StyledTableCell>\n                            <StyledTableCell> {candidate.user.mobile} </StyledTableCell>\n                            <StyledTableCell>{candidate.total_experience} Years</StyledTableCell>\n                            <StyledTableCell>{candidate.status.status}</StyledTableCell>\n                            <StyledTableCell>{candidate.technology.map(\n                                (tech, index) => (index ? ', ': '') + (tech.technology_name)\n                            )}\n                            </StyledTableCell>\n\n                            <StyledTableCell>{candidate?.notice_period?.notice_period}</StyledTableCell>\n                            <StyledTableCell>{candidate?.current_ctc}</StyledTableCell>\n                            <StyledTableCell>{candidate?.expected_ctc}</StyledTableCell>\n                            <StyledTableCell>{candidate?.source?.source}</StyledTableCell>\n                            <StyledTableCell>{candidate.current_location}</StyledTableCell>\n                        </StyledTableRow>\n                        ))) : (\n                        <StyledTableRow>\n                            <StyledTableCell>No Data Available</StyledTableCell>\n                        </StyledTableRow>\n                        )\n                    }\n                </TableBody>\n            </Table>\n            </TableContainer>\n        </td>\n        </tr>\n        );\n    },\n    \n    onRowExpansionChange: (curExpanded, allExpanded, rowsExpanded) =>\n        console.log(curExpanded, allExpanded, rowsExpanded)\n    };\n\n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"RRF Number\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <span style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</span>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Technology Stack\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Designation\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Business Unit\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Requisition Type\",\n            options: {\n                filter: true\n            }\n        },        \n        {\n            name: \"Requisition Status\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Positions\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Assigned Recruiters\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Expected DOJ\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Created At\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Requisitioner\",\n            options: {\n                filter: false\n            }\n        },\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    // Get requisition template data\n    const [requisitionData, setRequisitionData] = useState([])\n\n    const userInfo = UserInfo()\n    const UserID = userInfo.pk;\n    \n    const getRequisitionData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisitions/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionData(response.data.data)\n            setIsLoading(false)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    // get office locations\n    const [officeLocationData, setOfficeLocationData] = useState([])\n    const getOfficeLocations = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/office-locations/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setOfficeLocationData(response.data.data)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get fsd members\n    const [fsdMembersData, setFsdMembers] = useState([])\n    const getFsdMembers = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/fsd-members/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setFsdMembers(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // technology data state\n    const [technologyData, setTechnologyData] = useState([])\n\n    const getTechnologyData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechnologyData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    };\n    \n    const getReqData = () => {\n        if(userInfo.role === 'DRM'){\n            let uid = userInfo.pk\n            const result = requisitionData\n                .map(item => ({\n                    ...item,\n                    children: item.assigned_fsd_user?.filter(child => child?.member?.pk === uid)\n                }))\n                .filter(item => item.children.length > 0)\n            return result\n        }\n        else{\n            return requisitionData\n        }\n    }\n\n    useEffect(() => {\n        getRequisitionData()\n        getOfficeLocations()\n        getFsdMembers()\n        getTechnologyData()\n    }, [])\n\n\n    return (\n        <Page title='Requisition Templates | ResumeX'>\n            <Container maxWidth=\"xl\">\n                <Typography variant=\"h4\" sx={{ mb: 5 }}>\n                    Assigned Requisition\n                </Typography>\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                    <ThemeProvider theme={theme}>\n                        <MUIDataTable\n                            data={getReqData().map(data => {\n                                return [\n                                    data.id,\n                                    data.requisite_number,\n                                    data.tech_stack.tech_stack_name,\n                                    data.designation,\n                                    data.bu_group.bu_name,\n                                    data.requisite_type.req_type_name,\n                                    data.requisite_status.requisition_status,\n                                    data.positions,\n                                    data.assigned_fsd_user.map(\n                                        (user, index) => \n                                        (index ? ', ': '') + user.member.first_name + \" \" + user.member.last_name),\n                                    data.expected_join_date.substring(0, 10).split('-').reverse().join('-'),\n                                    data.created.substring(0, 10).split('-').reverse().join('-'),\n                                    data.requisite_creator.first_name + \" \" +  data.requisite_creator.last_name, \n                                ]\n                            })}\n                            columns={columns}\n                            options={options}\n                            components={components}\n                        />\n                    </ThemeProvider>\n                    )}\n            </Container>\n        </Page>\n    );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/roles-&-rights/EditGroup.js",["1474","1475","1476","1477","1478","1479","1480"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    Autocomplete, Chip, InputLabel, MenuItem\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport axios from 'axios';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditGroup() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const [permData, setPermData] = useState([]);\n\n    // Stores role information\n    const [roleInfo, setRoleInfo] = useState({});\n\n    // Stores role's permissions data\n    const [userPerm, setUserPerm] = useState([]);\n\n    const [editPerm, setEditPerm] = useState({});\n\n    // Stores deleted permissions\n    const [deleteItem, setDeleteItem] = useState([]);\n\n    const [masterRole, setMasterRole] = useState([]);\n\n    const getPermissionsList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"rights/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const permArray = getPermArray(response.data.data)\n                setPermData(permArray)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n    const getMasterRolesList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"master-roles/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setMasterRole(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    const getRoleInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"roles/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setRoleInfo(response.data.data)\n                var user_perm = response.data.data.permissions\n                setUserPerm(user_perm)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n    const getPermArray = (permissionObj) =>\n    permissionObj.map((obj) => {\n        return ({\n        id: obj.id,\n        permission_name: obj.permission_name,\n        is_active: obj.is_active\n    })});\n\n    // This method handles delete operations on current permission chips list.\n    const handleChipDelete = (chipObj) => () => {\n        deleteItem.push(chipObj)\n        // Removes item from the state\n        setUserPerm((chips) => chips.filter((chip) => chip.id !== chipObj.id));\n        // Add item to the dropdown menu  \n        permData.push(chipObj)\n    }\n  \n    // This method handles dropdown values.\n    const getMenuData = () => {\n        if (deleteItem.length <= 0)\n        {          \n            var _ = require('lodash');\n\n            var result = permData.filter(function(obj){\n                return _.findIndex(userPerm, {'id': obj.id}) !== -1 ? false : true;\n            });        \n            setPermData(result)        \n        }\n        else{\n            // This block removes the repeated item from the list\n            var updatedList = [...new Map(permData.map(item => [item['id'], item])).values()]\n            setPermData(updatedList)\n        }\n    }\n\n    useEffect(() => {\n        getRoleInfo();\n        getPermissionsList();\n        getMasterRolesList();\n    }, [])\n\n    const callEditRoleAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"roles/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/roles\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const RoleSchema = Yup.object().shape({\n        RoleName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for role name\")\n            .required(\"Role name required\"),\n        ParentRole: Yup.string()\n            .required(\"Parent role is required.\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n        Permissions: Yup.array()\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            RoleName: roleInfo?.role_name ?? '',\n            ParentRole: roleInfo?.master_role?.id ?? '',\n            Permissions: [],\n            is_active: roleInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: RoleSchema,\n        onSubmit: (values) => {            \n            var user_perm_id = userPerm.map((obj) => obj.id )\n            var new_ids_list = [...user_perm_id, ...values.Permissions]\n\n            let formData = {\n                \"role_name\": values.RoleName,\n                \"master_role_id\": values.ParentRole,\n                \"permissions_id\": new_ids_list,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit role API\n            callEditRoleAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Roles\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/roles\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Role\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Role Name\"\n\n                                            {...getFieldProps('RoleName')}\n\n                                            error={Boolean(touched.RoleName && errors.RoleName)}\n                                            helperText={touched.RoleName && errors.RoleName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack>\n                                        <div> \n                                            <InputLabel sx={{marginLeft:'10px'}}> \n                                            Current Permissions      \n                                            </InputLabel>\n\n                                            {/* {values.nameList?.length !== 0 ?\n                                            <span>{values.nameList?.map((opt) => <Chip label={opt} style={{marginLeft:5, marginTop:10 }} variant='outlined' color='primary' />)} </span> : <span> <Chip label='Not assigned yet' style={{marginLeft:5, marginTop:10 }} variant='outlined' color='error' /> </span> } */}\n\n                                            <span > \n                                            {userPerm?.length !== 0 ?\n                                            userPerm?.map((opt) =>{\n                                            return (\n                                                <Chip key={opt.id} \n                                                    style={{marginLeft:'10px', marginTop: '5px'}}\n                                                    label={opt.permission_name}\n                                                    onDelete={handleChipDelete(opt)}\n                                                    />\n                                                )}) : \n                                                <span> \n                                                    <Chip \n                                                    key='not-available' label='Not assigned yet' style={{marginLeft:5, marginTop:10 }} variant='outlined' color='error' /> </span> }\n                                            </span>\n\n                                        </div>\n                                    </Stack>\n\n                                    <Stack>\n                                        <Autocomplete\n                                            multiple\n                                            id=\"permission-list\"\n                                            options={permData}\n                                            getOptionLabel={(option) => option.permission_name}\n                                            filterSelectedOptions\n                                            onOpen={getMenuData}\n                                            onChange={(event, value) => {\n                                                var list = value.map((v) => v.id)\n                                                setFieldValue(\"Permissions\", list);\n                                              }}\n                                            renderInput={(params) => (\n                                            <TextField\n                                                {...params}\n                                                label=\"Add Permissions\"\n                                                placeholder=\"Select\"\n\n                                                {...getFieldProps(\"Permissions\")}\n\n                                            error={Boolean(touched.Permissions && errors.Permissions)}\n                                            helperText={touched.Permissions && errors.Permissions}\n                                            />\n                                            )}\n                                        />\n                                        \n                                        <TextField\n                                            fullWidth\n                                            label=\"Parent Role\"\n                                            select\n                                            sx={{marginTop:3}}\n\n                                            {...getFieldProps('ParentRole')}\n\n                                            error={Boolean(touched.ParentRole && errors.ParentRole)}\n                                            helperText={touched.ParentRole && errors.ParentRole}\n                                        >\n                                            {masterRole.map((option) => (\n                                            <MenuItem key={option.id} value={option.id}>\n                                            {option.master_role}\n                                            </MenuItem>\n                                            ))}\n\n                                        </TextField>\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Role Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update Role\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/job-application/EditJobAplication.js",["1481","1482","1483","1484","1485"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { styled } from '@mui/material/styles';\nimport React, { useState, useEffect } from 'react';\nimport {Link as RouterLink, useParams} from 'react-router-dom';\nimport CandidateTimeline from '../candidate/CandidateTimeline';\nimport { Card, CardContent, Container, Link, Stack, Table, TableContainer, TableRow, \n    TableHead, TableBody, TableCell, tableCellClasses, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.body}`]: {\n        backgroundColor: '#514b4c',\n        color: theme.palette.common.white,\n        fontWeight: 'bold'\n    },\n    [`&.${tableCellClasses.head}`]: {\n        fontSize: 14,\n    },\n}));\n    \nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nexport default function EditJobApplication() {\n    const { id } = useParams(); \n    const [jobApplicationData, setJobApplicationData] = useState([])\n    const getJobApplicationData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-application/' + id + '/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setJobApplicationData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    useEffect(() => {\n        getJobApplicationData()\n    }, [])\n\n    const candidateTechnologies = []\n    const candidateLocations = []\n    const previousJobApplication = []\n  \n    jobApplicationData?.resume?.candidate?.technology.forEach((technology, index) => {\n        candidateTechnologies.push((index ? ', ': '') + technology.technology_name)\n      });\n\n    jobApplicationData?.resume?.candidate?.preferred_location.forEach((location, index) => {\n    candidateLocations.push((index ? ', ': '') + location.office_location);\n    });\n\n    jobApplicationData?.resume?.candidate?.job_application.forEach((application) => {\n        if (application.id != id) {\n            previousJobApplication.push({\"id\": application.id, \"selected\": application.is_candidate_selected ? \"Selected\": \"Rejected\"})\n        }\n    })\n\n    return (\n        <Page title=\"Candidates\">\n            <Container  maxWidth=\"xl\" sx={{ mt:0 }} >\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={72} sx={{ mb: 2 }}>\n                    <Link to=\"/resumeX/job-application\"\n                        color=\"green\"\n                        underline=\"hover\"\n                        component={RouterLink}\n                        fontSize=\"20px\"> \n                            <ArrowCircleLeftIcon fontSize=\"large\" />\n                    </Link>\n\n                    {/* <Typography variant=\"h4\" align=\"center\">\n                        Candidate Timeline\n                    </Typography> */}\n\n                    <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Candidate Timeline</h2>\n                </Stack>\n\n                <Card sx={{mt: 2}} variant=\"outlined\" style={{ border: \"none\", boxShadow: \"none\" }}>\n                    {/* <CardContent sx={{mb: -5}}>\n                        <Typography variant=\"h6\" color=\"text.secondary\" >\n                            Personal Details\n                        </Typography>\n                    </CardContent> */}\n                    <CardContent>\n                    <TableContainer style={{ width: \"100%\" }}>\n                        <Table>\n                            <TableHead>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                            </TableHead>\n                            <TableBody>\n                                <StyledTableRow>\n                                    <StyledTableCell>Name</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.user?.first_name + \" \" + jobApplicationData?.resume?.candidate?.user?.last_name}</TableCell>\n                                    <StyledTableCell>Experience</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.total_experience} Years</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <StyledTableCell>Mobile No.</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.user?.mobile}</TableCell>\n                                    <StyledTableCell>Notice Period</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.notice_period?.notice_period}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <StyledTableCell>Gender</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.gender}</TableCell>\n                                    <StyledTableCell>Current Location</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.current_location}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <StyledTableCell>DoB</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.dob}</TableCell>\n                                    <StyledTableCell>Current CTC</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.current_ctc} LPA</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <StyledTableCell>Email</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.user?.email}</TableCell>\n                                    <StyledTableCell>Expected CTC</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.expected_ctc} LPA</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <StyledTableCell>Technology</StyledTableCell>\n                                    <TableCell>{candidateTechnologies}</TableCell>\n                                    <StyledTableCell>Preferred Location</StyledTableCell>\n                                    <TableCell>{candidateLocations}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <StyledTableCell>Resume</StyledTableCell>\n                                    <TableCell><a href={jobApplicationData?.resume?.resume} target=\"_blank\" style={{color: \"green\", fontWeight: \"bold\"}}>{jobApplicationData?.resume?.resume?.split('/')[5]}</a></TableCell>\n                                    <StyledTableCell>Applied For</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.requisition?.requisite_number + \" | \" + jobApplicationData?.requisition?.job_name + \" | \" + jobApplicationData?.requisition?.job_category}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <StyledTableCell>Previous Job Application</StyledTableCell>\n                                    <TableCell>\n                                    {previousJobApplication.length ? (\n                                        previousJobApplication.map((data) => \n                                        <b style={{color: data.selected == \"Selected\" ? \"green\" : \"red\"}}>\n                                            <a href={\"/resumeX/job-application/edit/\" + data.id} style={{color: \"green\"}}>\n                                                {\"/resumeX/job-application/edit/\" + data.id}\n                                            </a>\n                                            {data.selected}<br></br></b>)\n                                            ) : (<b style={{color: \"red\"}}>None</b>)}\n                                    </TableCell>\n                                    <StyledTableCell>Source</StyledTableCell>\n                                    <TableCell>{jobApplicationData?.resume?.candidate?.source?.source}</TableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    </CardContent>\n                </Card>\n\n                <CandidateTimeline></CandidateTimeline>\n\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/users/CreateFSDUserForm.js",["1486","1487","1488","1489","1490","1491","1492","1493"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,Checkbox,\n    Link, Stack, TextField, Typography,\n    InputAdornment, MenuItem\n}\n    from '@mui/material';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack';\nimport * as constants from 'src/utils/constants';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function CreateFSDUserForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n    const hrToken = localStorage.getItem(\"authToken\");\n    const navigate = useNavigate();\n    const [UserData, setUserData] = useState([]);\n\n    // get business units\n    const [BusinessUnitData, setBusinessUnitData] = useState([])\n    const getBusinessUnits = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/business-units/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setBusinessUnitData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };  \n\n    // get Interview Roles\n    const [InterviewData, setInterviewData] = useState([])\n    const getInterviews = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/interview-role/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setInterviewData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };      \n\n    // get Roles\n    const [RolesData, setRolesData] = useState([])\n    const getRoles = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/roles/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRolesData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };    \n\n    // is_active state\n    const [checked, setChecked] = useState(true);\n    const handleIsActiveChange = event =>{\n        setChecked(event.target.checked);\n    };\n\n    useEffect(() => {\n        getUserList();\n        getBusinessUnits();\n        getInterviews();\n        getRoles();\n    }, [])\n\n    const getUserList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"fsd-members/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const UserData = getUserArray(response.data.data)\n                setUserData(UserData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const callCreateUser = async (formValues) => {\n\n        var new_mobile_no = \"+91\" + formValues.Mobile_no;\n        var bodyFormData = new FormData();\n\n        bodyFormData.append(\"first_name\", formValues.FirstName);\n        bodyFormData.append(\"last_name\", formValues.LastName);\n        bodyFormData.append(\"email\", formValues.Email);\n        bodyFormData.append(\"mobile\", new_mobile_no);\n        bodyFormData.append(\"bu_group_id\", formValues.BusinessUnit);\n        bodyFormData.append(\"intv_role_id\", formValues.InterviewRole);\n        bodyFormData.append(\"role_id\", formValues.Role);\n        bodyFormData.append(\"is_active\",checked);\n        \n        await apiInstance({\n            method: \"post\",\n            url: \"fsd-members/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: bodyFormData,\n        })\n            .then(async function (response) {                \n                enqueueSnackbar(response.data?.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/fsdusers\", { replace: true });\n            })\n            .catch(function (error) {\n                let error_msg_key = Object.keys(error.response.data)[0]\n                let err_msg = error.response.data?.[error_msg_key]\n\n                enqueueSnackbar(err_msg, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n\n    const getUserArray = (UserData) =>\n        UserData.map((UserObj) => ({\n            pk: UserObj.id,\n            UserName: UserObj.User\n        }));\n\n    const UserSchema = Yup.object().shape({\n        Mobile_no: Yup.string()\n            .min(10, 'Mobile Number must be of 10 digit')\n            .max(15, 'Mobile Number must be of 10 digit')\n            .required('Mobile Number is required'),\n        FirstName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for first name \")\n            .required(\"First name required\"),\n        LastName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for last name \")\n            .required(\"Last name required\"),\n        Email: Yup.string()\n            .email(\"Email must be a valid email address\")\n            .required(\"Email is required\"),\n        BusinessUnit: Yup.string()\n            .required(\"BusinessUnit is required.\"),\n        InterviewRole: Yup.string()\n            .required(\"InterviewRole is required.\"),\n        Role: Yup.string()\n            .required(\"Role is required.\"),\n        IsActive: Yup.bool(),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            FirstName: '',\n            LastName: '',\n            Email: '',\n            Mobile_no: '',\n            BusinessUnit: '',\n            InterviewRole: '',\n            Role: '',\n            IsActive: '',\n        },\n        validationSchema: UserSchema,\n        onSubmit: (values) => {\n            // call create User API\n            callCreateUser(values)\n        }\n    });\n\n    //-----------------------------Functions-----------------------------------\n\n    const thisFsdRoleData = RolesData.map((items) => { if(items.role_name == \"FSD_HOD\" || items.role_name == \"DRM\" || items.role_name == \"FSD_Admin\" ){ return items } })\n    const FsdRoleData = thisFsdRoleData.filter(function (el) { return el != null; });\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue } = formik;\n\n    return (\n        <Page title=\"FSD Member\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/fsdusers\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n            </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Create FSD Member\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2 }} variant=\"outlined\" style={{ border: \"none\", boxShadow: \"none\" }}>\n                            <CardContent sx={{ mb: 5 }}>    \n                                <Typography variant=\"h6\" color=\"#aaaa55\" fontStyle=\"italic\" gutterBottom>\n                                    <div style={{float: \"left\", width: \"50%\", marginTop: \"20px\"}}>\n                                    FSD Member Details\n                                    </div>\n                                </Typography>\n                            </CardContent>\n                            <CardContent>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"First Name\"\n                                            {...getFieldProps('FirstName')}\n                                            error={Boolean(touched.FirstName && errors.FirstName)}\n                                            helperText={touched.FirstName && errors.FirstName}\n                                        >\n                                        </TextField>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Last Name\"\n                                            {...getFieldProps('LastName')}\n                                            error={Boolean(touched.LastName && errors.LastName)}\n                                            helperText={touched.LastName && errors.LastName}\n                                        >\n                                        </TextField>\n                                        {<TextField\n                                            fullWidth\n                                            label=\"Email\"\n                                            {...getFieldProps('Email')}\n                                            error={Boolean(touched.Email && errors.Email)}\n                                            helperText={touched.Email && errors.Email}\n                                        >\n                                        </TextField>}\n                                    </Stack>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                    <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Role\"\n                                            {...getFieldProps('Role')}\n                                            error={Boolean(touched.Role && errors.Role)}\n                                            helperText={touched.Role && errors.Role}\n                                        >\n                                            {FsdRoleData.map((unit) => (\n                                                <MenuItem key={unit.id} value={unit.id}>{unit.role_name}</MenuItem>\n                                            ))}\n                                        </TextField>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Business Unit\"\n                                            {...getFieldProps(\"BusinessUnit\")}\n                                            error={Boolean(touched.BusinessUnit && errors.BusinessUnit)}\n                                            helperText={touched.BusinessUnit && errors.BusinessUnit}\n                                        >\n                                            {BusinessUnitData.map((unit) => (\n                                                <MenuItem key={unit.id} value={unit.id}>{unit.bu_name}</MenuItem>\n                                            ))}\n                                        </TextField>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Interview Role\"\n                                            {...getFieldProps(\"InterviewRole\")}\n                                            error={Boolean(touched.InterviewRole && errors.InterviewRole)}\n                                            helperText={touched.InterviewRole && errors.InterviewRole}\n                                        >\n                                            {InterviewData.map((unit) => (\n                                                <MenuItem key={unit.id} value={unit.id}>{unit.interview_role}</MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </Stack>\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                <TextField\n                                    style={{width: \"25%\"}}\n                                    label=\"Mobile\"\n                                    {...getFieldProps('Mobile_no')}\n                                    InputProps={{\n                                        startAdornment: <InputAdornment position=\"start\">\n                                            +91\n                                        </InputAdornment>,\n                                    }}\n                                    error={Boolean(touched.Mobile_no && errors.Mobile_no)}\n                                    helperText={touched.Mobile_no && errors.Mobile_no}\n                                >\n                                </TextField>\n                            <Stack spacing={2} >\n                                    {/* ---- Is Active ---- */}\n                                    <Typography>\n                                        <Checkbox onChange={handleIsActiveChange}/>\n                                        Active\n                                    </Typography>\n                            </Stack>\n                            </Stack>\n                            </Stack>\n                            </CardContent>\n                        </Card>\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n                        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} > Add FSD Member </LoadingButton>\n                    </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/users/EditFSDUser.js",["1494","1495","1496","1497","1498","1499"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport axios from 'axios';\nimport * as constants from 'src/utils/constants';\nimport {\n    Card, CardContent, Container,Checkbox,\n    Link, Stack, TextField, Typography, MenuItem\n}\n    from '@mui/material';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditFsdUser(props) {\n\n    const { id } = useParams();\n    const { enqueueSnackbar } = useSnackbar();\n    const hrToken = localStorage.getItem(\"authToken\");\n    const navigate = useNavigate();\n    const [UserData, setUserData] = useState([])\n\n    // get business units\n    const [BusinessUnitData, setBusinessUnitData] = useState([])\n    const getBusinessUnits = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/business-units/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setBusinessUnitData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };  \n\n    // get Interview Roles\n    const [InterviewData, setInterviewData] = useState([])\n    const getInterviews = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/interview-role/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setInterviewData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };      \n\n    // get Roles\n    const [RolesData, setRolesData] = useState([])\n    const getRoles = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/roles/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRolesData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }; \n\n    const getUserData = async () => {\n        await axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/fsd-members/\" + id + \"/\", { headers: { \"Authorization\": `Token ${localStorage.getItem('authToken')}` } })\n        .then((response) => {\n            setUserData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    useEffect(() => {\n        getUserData();\n        getBusinessUnits();\n        getInterviews();\n        getRoles();\n    }, [])\n\n    const getUserList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"fsd-members/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const UserData = getUserArray(response.data.data)\n                setUserData(UserData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n        }\n\n    const callUpdateFSDUser = (formValues) => {\n        var fsduser_id = UserData?.id\n        var apiData = {\n            \"first_name\": formValues.FirstName,\n            \"last_name\": formValues.LastName,\n            \"email\": formValues.Email,\n            \"mobile\": formValues.Mobile_no,\n            \"role_id\": formValues.Role,\n            \"created_by\": formValues.CreatedBy,\n            \"joined_date\": formValues.JoiningDate,\n            \"bu_group_id\": formValues.BusinessUnit,\n            \"intv_role_id\": formValues.InterviewRole,\n            \"is_active\": formValues.IsActive,\n        }\n         apiInstance({\n            method: \"put\",\n            url: \"fsd-members/\"+ fsduser_id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiData,\n        })\n            .then(function (response) {                \n                enqueueSnackbar(response.data?.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/fsdusers\", { replace: true });\n            })\n            .catch(function (error) {\n                let error_msg_key = Object.keys(error.response.data)[0]\n                let err_msg = error.response.data?.[error_msg_key]\n\n                enqueueSnackbar(err_msg, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    const getUserArray = (UserData) =>\n        UserData.map((UserObj) => ({\n            pk: UserObj.id,\n            UserName: UserObj.User\n        }));\n\n    const FSDUserSchema = Yup.object().shape({\n        Mobile_no: Yup.string(),\n        FirstName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for first name \")\n            .required(\"First name required\"),\n        LastName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for last name \")\n            .required(\"Last name required\"),\n        Email: Yup.string()\n            .email(\"Email must be a valid email address\")\n            .required(\"Email is required\"),\n        BusinessUnit: Yup.string()\n            .required(\"BusinessUnit is required.\"),\n        InterviewRole: Yup.string()\n            .required(\"InterviewRole is required.\"),\n        Role: Yup.string()\n            .required(\"Role is required.\"),\n        CreatedBy: Yup.string()\n            .required(\"Creator is required.\"),\n        JoiningDate: Yup.date()\n        .required(\"Joining Date is required.\"),\n        IsActive: Yup.bool(),\n    });\n    const formik = useFormik({\n        initialValues: {\n            FirstName: UserData?.member?.first_name ?? '',\n            LastName:  UserData?.member?.last_name ?? '', \n            Email:  UserData?.member?.email ?? '', \n            Mobile_no:  UserData?.member?.mobile ?? '',\n            Role: UserData?.member?.role?.id ?? '',\n            CreatedBy: UserData?.created_by?.first_name + \" \" + UserData?.created_by?.last_name  ?? '',\n            JoiningDate: UserData?.member?.joined_date ?? '',\n            BusinessUnit:  UserData?.bu_group?.id ?? '', \n            InterviewRole: UserData?.interview_role?.id ?? '',\n            IsActive: UserData?.is_active ?? '',\n        },\n        enableReinitialize: true,\n        validationSchema: FSDUserSchema,\n        onSubmit: (values) => {\n            // call Update User API\n            callUpdateFSDUser(values)\n        }\n    });\n\n    const thisFsdRoleData = RolesData.map((items) => { if(items.role_name == \"FSD_HOD\" || items.role_name == \"DRM\" || items.role_name == \"FSD_Admin\" ){ return items } })\n    const FsdRoleData = thisFsdRoleData.filter(function (el) { return el != null; });\n    const date = UserData?.member?.joined_date.substring(0,10);\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue } = formik;\n\n    return (\n        <Page title=\"FSD Member\">\n            <Container maxWidth=\"xl\">\n            <Link to=\"/resumeX/fsdusers\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n            </Link>\n            <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                Edit FSD Member\n            </Typography>\n            <FormikProvider value={formik}>\n                <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                    <Card sx={{ mt: 2 }} variant=\"outlined\">\n                        <CardContent>\n                            <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                FSD Member Details\n                            </Typography>\n                        </CardContent>\n                        <CardContent>\n                            <Stack spacing={3}>\n                                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"First Name\"\n                                        required\n                                        {...getFieldProps('FirstName')}\n                                        error={Boolean(touched.FirstName && errors.FirstName)}\n                                        helperText={touched.FirstName && errors.FirstName} >\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Last Name\"\n                                        required\n                                        {...getFieldProps('LastName')}\n                                        error={Boolean(touched.LastName && errors.LastName)}\n                                        helperText={touched.LastName && errors.LastName}\n                                    >\n                                    </TextField>\n                                    {<TextField\n                                        fullWidth\n                                        label=\"Email\"\n                                        required\n                                        disabled\n                                        {...getFieldProps('Email')}\n                                        error={Boolean(touched.Email && errors.Email)}\n                                        helperText={touched.Email && errors.Email}\n                                    >\n                                    </TextField>}\n                                </Stack>\n                                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                <TextField\n                                        fullWidth\n                                        label=\"Mobile\"\n                                        required\n                                        {...getFieldProps('Mobile_no')}\n                                    /> \n                                    <TextField\n                                        fullWidth\n                                        select\n                                        label=\"Business Unit *\"\n                                        {...getFieldProps(\"BusinessUnit\")}\n                                        error={Boolean(touched.BusinessUnit && errors.BusinessUnit)}\n                                        helperText={touched.BusinessUnit && errors.BusinessUnit}\n                                    >\n                                        {BusinessUnitData.map((unit) => (\n                                            <MenuItem key={unit.id} value={unit.id}>{unit.bu_name}</MenuItem>\n                                        ))}\n                                    </TextField>\n                                    <TextField\n                                        fullWidth\n                                        select\n                                        label=\"Interview Role *\"\n                                        {...getFieldProps(\"InterviewRole\")}\n                                        error={Boolean(touched.InterviewRole && errors.InterviewRole)}\n                                        helperText={touched.InterviewRole && errors.InterviewRole}\n                                    >\n                                        {InterviewData.map((unit) => (\n                                            <MenuItem key={unit.id} value={unit.id}>{unit.interview_role}</MenuItem>\n                                        ))}\n                                    </TextField>\n                                        <TextField\n                                        fullWidth\n                                        label=\"Joining Date\"\n                                        value={date}\n                                        disabled\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        error={Boolean(touched.JoiningDate && errors.JoiningDate)}\n                                        helperText={touched.JoiningDate && errors.JoiningDate}\n                                    />  \n                                    </Stack>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                        fullWidth\n                                        select\n                                        label=\"Role\"\n                                        {...getFieldProps('Role')}\n                                        value = {formik.values.Role}\n                                        error={Boolean(touched.Role && errors.Role)}\n                                        helperText={touched.Role && errors.Role}\n                                    >\n                                        {FsdRoleData.map((unit) => (\n                                            <MenuItem key={unit.id} value={unit.id}>{unit.role_name}</MenuItem>\n                                        ))}\n                                        </TextField>\n                                        <TextField\n                                            fullWidth\n                                            id='CreatedBy'\n                                            label=\"Created By\"\n                                            required\n                                            disabled\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                            {...getFieldProps('CreatedBy')}\n                                        />\n                                    <Stack spacing={2}  style={{width: \"30%\"}}>\n                                        {/* ---- Is Active ---- */}\n                                        <Typography>\n                                        <Checkbox checked={values.IsActive} onChange={(event, checked) => {\n                                                setFieldValue(\"IsActive\", checked);\n                                        }}/>\n                                        Active\n                                    </Typography>\n                                    </Stack> \n                                </Stack>\n                            </Stack>\n                        </CardContent>\n                    </Card>\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n                    <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} >Update FSD Member </LoadingButton>\n                </Form>\n            </FormikProvider>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/users/EditEmployeeUser.js",["1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport axios from 'axios';\nimport * as constants from 'src/utils/constants';\nimport {\n    Button, Card, CardContent, Container,Checkbox,\n    Link, Stack, TextField, Typography, MenuItem\n}\n    from '@mui/material';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport { sortBy } from 'lodash';\n\nexport default function EditEmployee(props) {\n    \n    const { id } = useParams();\n    const { enqueueSnackbar } = useSnackbar();\n    const hrToken = localStorage.getItem(\"authToken\");\n    const navigate = useNavigate();\n    const [UserData, setUserData] = useState([])\n    const [selectRoleData , setSelectRoleData] = useState([]);\n    var showIntTech = 0;\n    const mobileRegex = /^(?:(?:\\+|0{0,2})91(\\s*[\\ -]\\s*)?|[0]?)?[789]\\d{9}|(\\d[ -]?){10}\\d$/\n\n    // get Roles\n    const [RolesData, setRolesData] = useState([])\n    const getRoles = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/roles/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRolesData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }; \n    // get Technologies\n    const [IntTechData, setIntTechData] = useState([])\n    const getIntTech = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/tech-stack/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            let techStackList = response.data.data\n            let sortedList = sortBy(techStackList, \"stack_priority\")\n            setIntTechData(sortedList)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };   \n    const getUserData = async () => {\n        await axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/employee/\" + id + \"/\", { headers: { \"Authorization\": `Token ${localStorage.getItem('authToken')}` } })\n        .then((response) => {\n            setUserData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n    useEffect(() => {\n        getUserData();\n        getRoles();\n        getIntTech();\n    }, [])\n    const getUserList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"employee/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const UserData = getUserArray(response.data.data)\n                setUserData(UserData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n        }\n    const callUpdateEmployee = (formValues) => {\n        var employee_id = UserData?.id\n\n        var apiData = {\n            \"first_name\": formValues.FirstName,\n            \"last_name\": formValues.LastName,\n            \"email\": formValues.Email,\n            \"role_id\": formValues.Role,\n            \"interview_tech_id\" : formValues.IntTech,\n            \"mobile\": formValues.Mobile_no,\n            \"is_active\": formValues.IsActive,\n        }\n        apiInstance({\n            method: \"put\",\n            url: \"employee/\"+ employee_id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiData,\n        })\n            .then(function (response) {                \n                enqueueSnackbar(response.data?.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/empusers\", { replace: true });\n            })\n            .catch(function (error) {\n                let error_msg_key = Object.keys(error.response.data)[0]\n                let err_msg = error.response.data?.[error_msg_key]\n\n                enqueueSnackbar(err_msg, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    const getUserArray = (UserData) =>\n        UserData.map((UserObj) => ({\n            pk: UserObj.id,\n            UserName: UserObj.User\n        }));\n    const EmployeeSchema = Yup.object().shape({\n        Mobile_no: Yup.string()\n            .min(13, 'Please check the country code')\n            .max(13, 'Please check the mobile number')\n            .matches(mobileRegex, 'Mobile number is not valid')\n            .required('Mobile Number is required'),\n        FirstName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for first name \")\n            .required(\"First name required\"),\n        LastName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for last name \")\n            .required(\"Last name required\"),\n        Email: Yup.string()\n            .email(\"Email must be a valid email address\")\n            .required(\"Email is required\"),\n        IsActive: Yup.bool(),\n        Role: Yup.string()\n            .required(\"Role is required.\"),\n        IntTech: Yup.string()\n            .required(\"Interview Technology is required.\"),\n    });\n    const formik = useFormik({\n        initialValues: {\n            FirstName: UserData?.user?.first_name ?? '',\n            LastName:  UserData?.user?.last_name ?? '', \n            Email:  UserData?.user?.email ?? '', \n            Mobile_no:  UserData?.user?.mobile ?? '',\n            IsActive: UserData?.user?.is_active ?? '',\n            Role: UserData?.user?.role?.id ?? '',\n            IntTech: UserData?.interview_tech?.id ?? '',  \n        },\n        enableReinitialize: true,\n        validationSchema: EmployeeSchema,\n        onSubmit: (values) => {\n            // call Update User API\n            callUpdateEmployee(values)\n        }\n    });\n\n    const thisEMPRoleData = RolesData.map((items) => { if(items.role_name == \"BU_HEAD\" || items.role_name == \"OnBoarding_HR\" || items.role_name == \"NON_TECH_INTERVIEWER\"  || items.role_name == \"TECH_INTERVIEWER\"  || items.role_name == \"RMG\" ){ return items } })\n    const EMPRoleData = thisEMPRoleData.filter(function (el) { return el != null; });\n\n    //------------------------Functions-------------------------------\n\n    // function handleAssignRole(){\n    //     const thisSelectRole = EMPRoleData.map((item) => { if(item.id == selectRoleData){return item}})\n    //     const thisRole = thisSelectRole.filter(function (el) { return el != null; });\n    //     if(thisRole?.[0]?.role_name == \"BU_HEAD\" || thisRole?.[0]?.role_name == \"RMG\" || thisRole?.[0]?.role_name == \"NON_TECH_INTERVIEWER\"){\n    //         showIntTech = 1;\n    //     }\n    // }\n    \n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue } = formik;\n\n    return (\n        <Page title=\"Employee\">\n            <Container maxWidth=\"xl\">\n            <Link to=\"/resumeX/empusers\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n            </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                    Edit Employee\n                </Typography>\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2 }} variant=\"outlined\">\n                            <CardContent>\n                                <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Employee Details\n                                </Typography>\n                            </CardContent>\n                            <CardContent>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"First Name\"\n                                            required\n                                            {...getFieldProps('FirstName')}\n                                            error={Boolean(touched.FirstName && errors.FirstName)}\n                                            helperText={touched.FirstName && errors.FirstName}\n                                        >\n                                        </TextField>\n                                       \n                                        <TextField\n                                        fullWidth\n                                        label='Last Name'\n                                        required\n                                        {...getFieldProps('LastName')}\n                                        error={ Boolean(touched.LastName && errors.LastName)}\n                                        helperText = {touched.LastName && errors.LastName}\n                                        >\n\n                                        </TextField>\n\n                                        {<TextField\n                                            fullWidth\n                                            label=\"Email\"\n                                            required\n                                            disabled\n                                            {...getFieldProps('Email')}\n                                            error={Boolean(touched.Email && errors.Email)}\n                                            helperText={touched.Email && errors.Email}\n                                        >\n                                        </TextField>}\n                                    </Stack>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Mobile\"\n                                        required\n\n                                        {...getFieldProps('Mobile_no')}\n\n                                        error={Boolean(touched.Mobile_no && errors.Mobile_no)}\n                                        helperText={touched.Mobile_no && errors.Mobile_no}\n                                    /> \n                                    \n                                    <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Role\"\n                                    required\n                                    disabled={showIntTech}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    {...getFieldProps('Role')}\n                                    // onClick={handleAssignRole}\n                                >\n                                    {EMPRoleData.map((unit) => (\n                                        <MenuItem key={unit.id} value={unit.id} onClick={(e) => {setSelectRoleData(unit.id)}}>{unit.role_name}\n                                        </MenuItem>\n                                    ))}\n                                    </TextField>\n                                    <TextField\n                                        fullWidth\n                                        select\n                                        label=\"Interview Tech-Stack\"\n                                        required\n                                        {...getFieldProps(\"IntTech\")}\n                                        error={Boolean(touched.IntTech && errors.IntTech)}\n                                        helperText={touched.IntTech && errors.IntTech}\n                                    >\n                                        {IntTechData.map((unit) => (\n                                            <MenuItem key={unit.id} value={unit.id}>{unit.tech_stack_name}</MenuItem>\n                                        ))}\n                                    </TextField>\n                                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>             </Stack>                 \n                                    <Stack spacing={2} >\n                                        {/* ------ Is Active ----- */}\n                                        <Typography>\n                                            <Checkbox checked={values.IsActive} onChange={(event, checked) => {\n                                                    setFieldValue(\"IsActive\", checked);\n                                            }}/>\n                                            Active\n                                        </Typography>\n                                    </Stack>  \n                                </Stack>\n                                </Stack>\n                            </CardContent>\n                        </Card>\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n                        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} > Update Employee </LoadingButton>\n                    </Form>\n                </FormikProvider>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/RRF_Pool/RRFPoolHome.js",["1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport axios from 'axios';\nimport * as constants from 'src/utils/constants';\nimport { Modal } from 'react-bootstrap';\nimport {\n    Button, Card, CardContent, Container,Checkbox,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem\n}\n    from '@mui/material';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { alpha, styled } from '@mui/material/styles';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { useSnackbar } from 'notistack'\nimport { apiInstance } from 'src/utils/apiAuth';\n\n//There is a Necessity for a ROLE named DRM for this to work.\nexport default function RRFPool() {\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    //Get DRM Data\n    const [ DRMUserData, setDRMUserData] = useState([]);\n\n    const getDRMUserData = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/fsd-members/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setDRMUserData(response.data.data)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    //Get Requisition Data\n    const [requisitionData, setRequisitionData] = useState([])\n\n\n    const getRequisitionData = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"requisitions/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setRequisitionData(response.data.data)\n                setIsLoading(false)    \n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n    \n\n//---------------------------------------------------------------------------------------\n    useEffect(() => {\n        getRequisitionData();\n        getDRMUserData();\n    }, [])\n//---------------------------------------------------------------------------------------\n\n    let DRMuserNames = [];\n\n    const [checked, setChecked] = useState(true);\n    var RRFValue;\n    var drmName;\n    var thisRRFData;\n    var RRFData;\n    var thisDRMAssReq;\n    var thisDRMAssReqName;\n    var thisDRMID;\n\n    var [ DRMValue, setDRMValue] = useState([]);\n\n    const DRMUser = DRMUserData.filter(items => {\n        if(items.member.role.role_name === \"DRM\"){\n                DRMuserNames.push(items.id + \" \" + items.member.first_name + \" \" + items.member.last_name);\n            }\n        }\n    )\n    // const [intstatus, setIntStatus] = useState(false);\n\n    const filterRequisitionData = requisitionData.map((item) => { if(item?.assigned_fsd_user?.length === 0){ return(item) } })\n    const unAssignedReqData = filterRequisitionData.filter(function (el) { return el != null; });\n\n    //Modal\n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n\n    //---------------FUNCTIONS-----------------------------------------------\n\n\n    function handleClose(){\n        setShow(false);\n        thisDRMAssReq = 0 ;\n    };\n\n    function handleAssignModal(){\n        // RRFvalue DRMvalue\n        //thisDRMID\n        const thisDRMIDList = Array.from(String(thisDRMID), Number);\n        const thisJobLocList = thisRRFData?.[0]?.job_loc?.map(item => item.id)\n        const thisPrimaryTechList = thisRRFData?.[0]?.primary_technology?.map(item => item.id)\n        const thisOtherTechList = thisRRFData?.[0]?.other_technology?.map(item => item.id); \n        assignFSDApiCall(thisDRMIDList,thisJobLocList,thisPrimaryTechList,thisOtherTechList);\n    }\n\n    function assignFSDApiCall(thisDRMIDList,thisJobLocList,thisPrimaryTechList,thisOtherTechList){\n\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`\n        }\n        const data = {\n            rrf_template: thisRRFData?.[0]?.rrfTemplate,\n\n            designation: thisRRFData?.[0]?.designation,\n            positions: thisRRFData?.[0]?.positions,\n            tech_stack_id: thisRRFData?.[0]?.tech_stack.tech_stack_id,\n            default_fsd_users_id: thisRRFData?.[0]?.default_fsd_users.id,\n            assigned_fsd_user_id: thisDRMIDList,\n            bu_group_id: thisRRFData?.[0]?.bu_group.id,\n            department_id: thisRRFData?.[0]?.department.id,\n            requisite_type_id: thisRRFData?.[0]?.requisite_type.id,\n            requisite_status_id: thisRRFData?.[0]?.requisite_status?.id,\n            expected_join_date: thisRRFData?.[0]?.expected_join_date,\n            job_name: thisRRFData?.[0]?.job_name,\n            required_exp: thisRRFData?.[0]?.required_exp,\n            project_name: thisRRFData?.[0]?.project_name,\n            project_loc: thisRRFData?.[0]?.project_loc,\n            project_duration: thisRRFData?.[0]?.project_duration,\n            opportunity_id: thisRRFData?.[0]?.opportunity_id,\n            project_start_date: thisRRFData?.[0]?.project_start_date,\n            job_loc_id: thisJobLocList,\n            max_budget: thisRRFData?.[0]?.max_budget,\n            client_interview: thisRRFData?.[0]?.client_interview,\n            project_sum: thisRRFData?.[0]?.project_sum,\n            job_description: thisRRFData?.[0]?.job_description,\n            responsibilities: thisRRFData?.[0]?.responsibilities,\n            hr_summary: thisRRFData?.[0]?.hr_summary,\n            comment: thisRRFData?.[0]?.comment,\n            target_company: thisRRFData?.[0]?.target_company,\n            reference_profile: thisRRFData?.[0]?.reference_profile,\n            project_personality_traits: thisRRFData?.[0]?.project_personality_traits,\n            is_active: checked,\n            primary_technology_id: thisPrimaryTechList,\n            other_technology_id: thisOtherTechList,\n        }\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/requisitions/\" + thisRRFData?.[0]?.id + \"/\", data, {headers})\n        .then(function (response) {\n            if (response.status === 200) {\n                enqueueSnackbar(\"Requisition updated successfully !!\", {\n                    anchorOrigin: {\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                  },\n                    variant: 'success',\n                    autoHideDuration: 1500,\n                  });\n                  navigate('/resumeX/rrfpool', {replace: true});\n                  window.location.reload(false);                    \n            }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });    \n    }\n\n    function  handleAssignDRM(){\n        RRFValue = rowClickData;\n        RRFData = requisitionData.map((items) => { if(items?.requisite_number === RRFValue){return(items)}else{return null} })\n        thisRRFData = RRFData.filter(function (el) { return el != null; });\n        \n        let thisDRMIDstr = String(DRMValue).substring(0,1);\n        thisDRMID = parseInt(thisDRMIDstr);\n        const thisDRMReq = requisitionData.map((items) => {if(items?.assigned_fsd_user?.[0]?.id === thisDRMID){ return(items)}})\n        const thisDRM = thisDRMReq.filter(function (el) { return el != null; });\n        thisDRMAssReq = thisDRM.length;\n        thisDRMAssReqName = String(DRMValue).substring(1,30);\n    }\n\n\n    //***************************************Styling********************************\n\n\n  const InfoStyle = styled('div')(({ theme }) => ({\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'flex-end',\n    marginTop: theme.spacing(3),\n    color: theme.palette.text.disabled\n  }));\n\n\n    const [rowClickData, setRowClickData] = useState([]) \n \n    const options = {\n        selectableRows: false, // <===== will turn off checkboxes in rows\n        filter: true,\n        print: false,\n        download: false,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n    };\n\n    const theme = createTheme({\n        components: {\n            MUIDataTable: {\n            styleOverrides: {\n                root: {\n                backgroundColor: '#red',\n                },\n                paper: {\n                boxShadow: 'none',\n                },\n            },\n            },\n            MuiToolbar: {\n            styleOverrides: {\n                root: {\n                // backgroundColor: 'yellow',\n                },\n            },\n            },\n            MuiTableCell: {\n            styleOverrides: {\n                head: {\n                backgroundColor: 'purple',\n                },\n            },\n            },\n            MUIDataTableHeadCell: {\n                styleOverrides: {\n                    root: {\n                        fontWeight: '700',\n                    },\n                    data: {\n                    fontWeight: '700',\n                    }\n                }\n            },\n            MUIDataTableBodyCell: {\n                styleOverrides: {\n                    root: {\n                        maxWidth: \"232px\",\n                    },\n                    data: {\n                    fontWeight: '700',\n                    }\n                }\n            },\n            MUIDataTableSelectCell: {\n            styleOverrides: {\n                headerCell: {\n                // backgroundColor: 'blue',\n                fontWeight: '500px'\n                },\n            },\n            },\n            MuiTableFooter: {\n            styleOverrides: {\n                root: {\n                '& .MuiToolbar-root': {\n                //   backgroundColor: 'purple',\n                },\n                },\n            },\n            },\n        },\n      });\n      \n      const components = {\n        ExpandButton: function (props) {\n            return <ExpandButton {...props} />;\n        }\n      };\n\n\n  const columns = [\n    {\n        name: \"Requisition ID\",\n        options: {\n            filter: false,\n        },\n    },\n    {\n        name: \"Business-Unit\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"Requisitioner\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"Tech-Stack\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"Type\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"Designation\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"Requisition Date\",\n        options: {\n            filter: true,\n            customBodyRender: (value, tableMeta, updateValue) => {\n                return (\n                    <b style={{color: \"#f05e0a\"}}>{value}</b>\n                )\n            }\n        }\n    },\n    {\n        name: \"Assign\",\n        options: {\n            filter: false,\n        }\n    },\n];\n\n    return (\n        <Page title=\"Requisition Pool\">\n            <Container maxWidth=\"xl\">\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Requisition Pool</h2>\n            {/* <Typography variant=\"h4\" gutterBottom sx={{ mb: 5 }} align=\"center\"> Requisitions Pool </Typography> */}\n\n            {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (  \n                        <>\n            <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                    style={{justifyContent: \"center\"}}\n                     data={unAssignedReqData.slice(0).reverse().map((data) => {\n                        return [\n                            data?.requisite_number,\n\n                            data?.bu_group?.bu_name,\n\n                            data?.requisite_creator?.first_name + \" \" + data?.requisite_creator?.last_name ,\n\n                            data?.tech_stack?.tech_stack_name,\n\n                            data?.requisite_type?.req_type_name,\n\n                            data?.designation,\n\n                            data?.created.substring(0, 10).split('-').reverse().join('-'),\n\n                            <Button size=\"medium\" variant=\"outlined\" onClick={handleShow}> Assign </Button>,\n                            \n                        ]\n                    })}\n                    columns={columns}\n                    options={options}\n                    components={components}\n                />\n            </ThemeProvider>   \n\n            <Modal\n              size=\"lg\"\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              scrollable={true}\n              backdrop='static'\n              centered\n              show={show}\n              onHide={handleClose}\n              style={{\n                left: \"780px\",\n                top: \"80px\",\n                height: \"90%\",\n                width: \"30%\",\n              }}\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Assign Requisition </Modal.Title>\n              </Modal.Header> \n              <Modal.Body>\n              <p><font style={{fontWeight: \"500\"}}>Unassigned Requisition ID: </font>&nbsp;<font style={{fontWeight:\"medium\", color: \"green\"}}>{rowClickData?.props?.children}</font></p>\n              <p><font style={{fontWeight: \"500\"}}>Assign To: </font> &emsp; <TextField style={{width: \"250px\"}} select  label=\"Recruiters\" onClick={handleAssignDRM()} onChange={(e) => {setDRMValue(e.target.value)}}>\n                            {DRMuserNames.map((unit) => {if(unit){ drmName = {unit}; return(<MenuItem key={unit} value={unit}>{unit?.substring(1,30)}</MenuItem>)}} )}\n                            </TextField></p> \n             <p><font style={{fontWeight: \"500\"}}>No. of Requisitions in-process under {thisDRMAssReqName} : </font>&nbsp;<font style={{fontWeight:\"medium\", color: \"green\"}}>{thisDRMAssReq}</font></p>\n\n                </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\" onClick={handleAssignModal}>\n                  <font style={{fontWeight: \"bolder\", fontSize: \"larger\", color: \"green\", borderRadius: \"5px\"}}>Assign</font>\n                </Button>\n              </Modal.Footer>\n            </Modal>\n\n            </>\n            )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/roles-&-rights/CreateGroup.js",["1532","1533","1534","1535","1536","1537"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    MenuItem, Autocomplete\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function CreateGroup() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const [permData, setPermData] = useState([]);\n\n    const [masterRole, setMasterRole] = useState([]);\n\n    const getPermissionsList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"rights/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const permArray = getPermArray(response.data.data)\n                setPermData(permArray)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n    const getMasterRolesList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"master-roles/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setMasterRole(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n    const getPermArray = (permissionObj) =>\n    permissionObj.map((obj) => ({\n        pk: obj.id,\n        permName: obj.permission_name,\n        isActive: obj.is_active\n    }));\n\n    const callCreateRoleAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"roles/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/roles\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n        getPermissionsList();\n        getMasterRolesList();\n    }, [])\n\n    \n    const RoleSchema = Yup.object().shape({\n        RoleName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for role name\")\n            .required(\"Role name required\"),\n        ParentRole: Yup.string()\n            .required(\"Parent role is required.\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n        Permissions: Yup.array()\n            .min(1, \"Permissions are required\")\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            RoleName: '',\n            ParentRole: '', \n            Permissions: [],\n            is_active: '',\n            \n        },\n        validationSchema: RoleSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"role_name\": values.RoleName,\n                \"master_role_id\": values.ParentRole,\n                \"permissions_id\": values.Permissions,\n                \"is_active\": values.is_active\n            }\n\n            // call create role API\n            callCreateRoleAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Create Roles\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/roles\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Role\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Role Name\"\n\n                                            {...getFieldProps('RoleName')}\n\n                                            error={Boolean(touched.RoleName && errors.RoleName)}\n                                            helperText={touched.RoleName && errors.RoleName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Parent Role\"\n                                            select\n\n                                            {...getFieldProps('ParentRole')}\n\n                                            error={Boolean(touched.ParentRole && errors.ParentRole)}\n                                            helperText={touched.ParentRole && errors.ParentRole}\n                                        >\n                                            {masterRole.map((option) => (\n                                            <MenuItem key={option.id} value={option.id}>\n                                            {option.master_role}\n                                            </MenuItem>\n                                            ))}\n                                        </TextField>\n\n                                    </Stack>\n                                    <Stack>\n                                        {/* <TextField\n                                        fullWidth\n                                        id=\"Permissions\"\n                                        label=\"Permissions\"\n                                        select\n\n                                        SelectProps={{\n                                            multiple: true,\n                                            value: formik.values.Permissions,\n                                            onChange: (selectedOption) => handleChange(\"Permissions\")(selectedOption),\n                                            MenuProps: {\n                                                style: {\n                                                    maxHeight: 200,\n                                                },\n                                            },\n\n                                        }}\n\n                                        {...getFieldProps(\"Permissions\")}\n\n                                        error={Boolean(touched.Permissions && errors.Permissions)}\n                                        helperText={touched.Permissions && errors.Permissions}\n                                        >\n                                        {permData.map((option) => (\n                                            <MenuItem key={option.id} value={option.pk}>\n                                            {option.permName}\n                                            </MenuItem>\n                                        ))}\n                                        </TextField> */}\n\n\n                                        <Autocomplete\n                                            multiple\n                                            id=\"permission-list\"\n                                            options={permData}\n                                            getOptionLabel={(option) => option.permName}\n                                            //defaultValue={null}\n                                            filterSelectedOptions\n                                            onChange={(event, value) => {\n                                                var list = value.map((v) => v.pk)\n                                                setFieldValue(\"Permissions\", list);\n                                              }}\n                                            renderInput={(params) => (\n                                            <TextField\n                                                {...params}\n                                                label=\"Permissions\"\n                                                placeholder=\"Select\"\n\n                                                {...getFieldProps(\"Permissions\")}\n\n                                            error={Boolean(touched.Permissions && errors.Permissions)}\n                                            helperText={touched.Permissions && errors.Permissions}\n                                            />\n                                            )}\n                                        />\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Role Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Add Role\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStack/EditTechStack.js",["1538","1539"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditTechStack() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores TechStack information\n    const [TechStackInfo, setTechStackInfo] = useState({});\n\n\n    const getTechStackInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"tech-stack/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setTechStackInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getTechStackInfo();\n    }, [])\n\n    const callEditTechStackAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"tech-stack/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/tech-stack\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const TechStackSchema = Yup.object().shape({\n        TechStackName: Yup.string()\n            .required(\"TechStack name required\"),\n        Priority: Yup.number()\n            .required(\"TechStack Priority is required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            TechStackName: TechStackInfo?.tech_stack_name ?? '',\n            Priority: TechStackInfo?.stack_priority ?? '',    \n            is_active: TechStackInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: TechStackSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"tech_stack_name\": values.TechStackName,\n                \"stack_priority\": values.Priority,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit TechStack API\n            callEditTechStackAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit TechStack\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/tech-stack\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit TechStack\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"TechStack\"\n\n                                            {...getFieldProps('TechStackName')}\n\n                                            error={Boolean(touched.TechStackName && errors.TechStackName)}\n                                            helperText={touched.TechStackName && errors.TechStackName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                            fullWidth\n                                            label=\"TechStack Priority\"\n                                            type=\"number\"\n\n                                            {...getFieldProps(\"Priority\")}\n\n                                            error={Boolean(touched.Priority && errors.Priority)}\n                                            helperText={touched.Priority && errors.Priority}\n                                        >\n                                        </TextField>\n\n                                        </Stack>\n                                        \n\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is TechStack Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update TechStack\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/pages/JobOpenings.js",["1540","1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564","1565","1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577","1578"],"import axios from \"axios\";\nimport Page from \"../components/Page\";\nimport { Form } from 'react-bootstrap';\nimport { useSnackbar } from \"notistack\";\nimport React,  { useEffect, useState } from \"react\";\nimport { JobCards } from \"../components/_dashboard/jobs\";\nimport { Box, Grid, Button, Container, Stack, Typography } from \"@mui/material\";\nimport { apiInstance } from \"src/utils/apiAuth\";\nimport * as constants from \"src/utils/constants\";\nimport LinearProgress from '@mui/material/LinearProgress';\n\n\nexport default function JobOpenings() {\n\n  const [jobsData, setjobsData] = useState([]);\n  const [filterData, setFilterData] = useState([]);\n\n  //Current User Information\n  let jobName = localStorage.getItem(\"candidateJobApplicationReq\");\n  let intstatus = localStorage.getItem(\"candIsInterviewed\");\n\n  let thisJobAppJobName = localStorage.getItem(\"thisJobAppJobName\");\n  let thisJobAppSkills = localStorage.getItem(\"thisJobAppSkills\");\n  let thisJobAppExp = localStorage.getItem(\"thisJobAppExp\");\n  let thisJobAppLoc = localStorage.getItem(\"thisJobAppLoc\");\n\n  const filteredTechStacks = filterData.map((item) => (item.jobTechStackName))\n  const techStacks = [...new Set(filteredTechStacks)]\n\n  // Linear progress bar state\n  const [isLoading, setIsLoading] = useState(true)\n\n  const { enqueueSnackbar } = useSnackbar(); \n\n  // get tech stack data\n  const [technologyData, setTechnologyData] = useState([])\n  const getTechnologyData = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\": `Token ${localStorage.getItem('candidateToken')}`}})\n      .then((response) => {\n          setTechnologyData(response.data.data)\n      })\n      .catch((e) => console.log('something went wrong (:', e));\n  };\n\n  // get office locations\n  const [officeLocationData, setOfficeLocationData] = useState([])\n  const getOfficeLocations = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/office-locations/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n      .then((response) => {\n          setOfficeLocationData(response.data.data)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  // get job category / department\n  const [jobCategoryData, setJobCategoryData] = useState([])\n  const getJobCategoryData = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-category/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n      .then((response) => {\n        setJobCategoryData(response.data.data)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n  }; \n\n  //get First name\n\n\n  const [firstNameData, setFirstNameData]  = useState([]);\n  const getFirstName = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setFirstNameData(response.data.data.user.first_name)\n      console.log(\"working!\")\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  useEffect(() => {\n    getJobsList()\n    getTechnologyData()\n    getOfficeLocations()\n    getJobCategoryData()\n    getFirstName()\n  }, [])\n\n    const getDataArray = (jData) =>\n  jData.map((jobObj) => ({\n    pk: jobObj.requisite_number,\n    jobName: jobObj.job_name,\n    jobCategory: jobObj.department,\n    jobLocation: jobObj.job_loc,\n    jobExperience: jobObj.required_exp,\n    jobSkills: jobObj.required_skills,\n    jobRequirements: jobObj.additional_skills,\n    jobResponsibility: jobObj.responsibilities,\n    jobDescription: jobObj.job_description,\n    jobTechnology: jobObj.other_technology,\n    jobPrimaryTechnology: jobObj.primary_technology,\n    jobPositions: jobObj.positions,\n    jobTechStackID: jobObj.tech_stack,\n    jobTechStackName: jobObj.tech_stack.tech_stack_name\n  }));\n\n  const getJobsList = () => {\n\n    apiInstance({\n      method: \"get\",\n      url: \"requisitions/\",\n      headers: {\n        Authorization: \"token \" + localStorage.getItem('candidateToken'),\n      }\n    })\n      .then(function (response) {\n          \n          // filter requisitions on basis of its status\n          let requisitionData = response.data.data.filter(item => {\n            return (item.requisite_status.requisition_status === 'In Process' ) && item.assigned_fsd_user.length != 0 && item.is_active == true\n          })\n         console.log(requisitionData)\n          const jData = getDataArray(requisitionData);\n\n          setjobsData(jData)\n          setFilterData(jData) \n          setIsLoading(false)\n\n      })\n      .catch(function (error) {\n        enqueueSnackbar('Something went wrong. Please try after sometime.', {\n          anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n            variant: 'error',\n            autoHideDuration: 2000,  \n          });\n  \n      });\n  }\n\n\n\n    const [values, setValues] = useState({});\n\n    const onFormChange = (e, updatedAt) => {\n      const name = e.target.name;\n      const value = e.target.value;\n      setValues({ ...values, [name]: value });\n      setFilterData(jobsData);\n    };\n\n    if(thisJobAppJobName === null){\n\n    const currentJobData = jobsData.map((item) => { if(item.pk === jobName){return (item)}else{return null}})\n    var candidateJobData = currentJobData.filter(elements => { return elements !== null});\n\n    }\n\n\n   function handleFilterSubmit(){\n        setFilterData(filterData.filter(item => {\n        if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && item?.jobCategory?.job_category_name == values.category && item?.jobLocation?.[0]?.id == values.location){\n          return item\n          } \n        else if(item?.jobPrimaryTechnology?.[0]?.id == values.skills){\n            if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && item?.jobCategory?.job_category_name == values.category && item?.jobLocation?.[0]?.id == values.location){\n              return item\n            } \n            else if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && item?.jobLocation?.[0]?.id == values.location){\n              return item\n              }\n            else if( item?.jobPrimaryTechnology?.[0]?.id == values.skills && item?.jobCategory?.job_category_name == values.category){\n              return item\n            }\n            else if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && values.location === 'all' && values.category === 'all'){\n              return item\n            }\n            else if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && !values.location && !values.category){\n              return item\n            } \n        }\n        else if(item?.jobLocation?.[0]?.id == values.location){\n            if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && item?.jobCategory?.job_category_name == values.category && item?.jobLocation?.[0]?.id == values.location){\n              return item\n            } \n            else if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && item?.jobLocation?.[0]?.id == values.location){\n              return item\n              }\n            else if( item?.jobLocation?.[0]?.id == values.location && item?.jobCategory?.job_category_name == values.category){\n              return item\n            }\n            else if(item?.jobLocation?.[0]?.id == values.location && values.skills === 'all' && values.category === 'all'){\n              return item\n            }\n            else if(item?.jobLocation?.[0]?.id == values.location && !values.skills && !values.category){\n              return item\n            }  \n        }\n        else if(item?.jobCategory?.job_category_name == values.category){\n            if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && item?.jobCategory?.job_category_name == values.category && item?.jobLocation?.[0]?.id == values.location){\n              return item\n            } \n            else if(item?.jobPrimaryTechnology?.[0]?.id == values.skills && item?.jobCategory?.job_category_name == values.category){\n              return item\n              }\n            else if( item?.jobLocation?.[0]?.id == values.location && item?.jobCategory?.job_category_name == values.category){\n              return item\n            }\n            else if(item?.jobCategory?.job_category_name == values.category && values.skills === 'all' && values.location === 'all'){\n              return item\n            }\n            else if(item?.jobCategory?.job_category_name == values.category && !values.skills && !values.location){\n              return item\n            } \n        }\n        if(!values.skills && !values.location && !values.category){\n          return item\n        }\n\n        if(values.category === 'all' && values.skills === 'all' && values.location === 'all'){\n          return item\n        }\n\n        }))\n      };\n\n\n      \n      if(intstatus === \"true\"){\n        return(\n        <Page title=\"Dashboard: Jobs \">\n        <Container maxWidth=\"xl\">\n          <Stack\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            mb={2}\n          >\n          </Stack>\n        \n        {isLoading ? (\n            <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n              <LinearProgress />\n            </Typography>\n\n          ) : (\n            <div>\n        <h5> Hey {firstNameData}! <br></br> It seems you have already applied for the position of  <font color=\"#f05e0a\">{candidateJobData?.[0]?.jobName} {thisJobAppJobName}</font> </h5>\n          <p></p>\n          <h5>Here are the details for the position you applied for:</h5>\n          <div style={{width: \"80%\", paddingTop: \"10px\"}}>\n  \n            <table>\n              <tr>\n                <td  style={{padding: \"0px 70px 0px 0px\"}}>\n                  <p><h6>Position: <br></br><font style={{color: \"#6c757d\"}}>{candidateJobData?.[0]?.jobName} {thisJobAppJobName}</font></h6> </p>\n                </td> \n                <td  style={{padding: \"0px 70px 0px 0px\"}}>\n                  <p><h6>Must Have Skills: <br></br><font style={{color: \"#6c757d\", justifyContent: \"center\"}}>{candidateJobData?.[0]?.jobTechStackID?.fsd_mem_tech_stk_name} {thisJobAppSkills}</font></h6> </p>\n                </td>\n                <td  style={{padding: \"0px 70px 0px 0px\"}}>\n                  <p><h6>Required Experience: <br></br><font style={{color: \"#6c757d\"}}>{candidateJobData?.[0]?.jobExperience}{thisJobAppExp} </font></h6> </p>\n                </td>\n                <td  style={{padding: \"0px 70px 0px 0px\"}}>\n                  <p><h6> Office Location: <br></br><font style={{color: \"#6c757d\", justifyContent: \"center\"}}>{candidateJobData?.[0]?.jobLocation?.[0]?.office_location}{thisJobAppLoc}</font></h6> </p>\n                </td>\n              </tr>\n            </table>\n          </div>\n          <div style={{display: \"flex\", width: \"50%\", marginLeft: \"40%\", marginTop: \"5%\", textAlign: \"center\"}}>\n            <h2 style={{fontSize: '30px', fontWeight: '1000'}}>Current Openings</h2>\n          </div>\n  \n          <Stack\n            direction=\"row\"\n            flexWrap=\"wrap-reverse\"\n            alignItems=\"center\"\n            justifyContent=\"flex-end\"\n            sx={{ mb: 5 }}\n          >\n          </Stack>\n          \n          <Grid container spacing={5} justifyContent=\"center\" >\n          {filterData && techStacks.map((job, index) => (\n            <JobCards key={job.id} post={job} index={index} jobsData={filterData} />\n            ))}\n          </Grid>\n\n          </div>\n        )}\n  \n        </Container>\n      </Page>\n        \n        );}\n    \n    else{\n      return (\n        <Page title=\"Dashboard: Jobs \">\n          <Container maxWidth=\"xl\">\n            <Stack\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"space-between\"\n              mb={5}\n            >\n            </Stack>\n      \n      \n            \n            <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n              <h1 style={{fontSize: '60px', fontWeight: '1000'}}>\n                Become a part of <span style={{color: '#f05e0a'}}>Gateway</span> Family\n              </h1>\n            </div>\n      \n            <div style={{display: \"flex\", width: \"80%\", marginLeft: \"10%\", marginTop: \"3%\", textAlign: \"center\"}}>\n              <h6 style={{fontSize: \"20px\", fontWeight: 'normal'}}>\n                Your career is about what you want to be and who you want to be. \n                It’s about bringing your skills, your curiosity and your best true self to your work. \n                Here at Gateway, you’ll match your ingenuity with the latest technology to make incredible things.\n                It is a home away from home, where we work as a team for a common goal - \n                to evolve constantly with the latest technologies while taking utmost care of our most valuable assets, \n                our employees.\n              </h6>\n            </div>\n      \n            <div style={{display: \"flex\", width: \"50%\", marginLeft: \"38%\", marginTop: \"5%\", textAlign: \"center\"}}>\n              <h4 style={{color: ''}}>We hire character. Train skill.</h4>\n            </div>\n      \n            <Box sx={{\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: '#e98e01',\n              marginTop: \"5%\",\n              // '&:hover': {\n              // backgroundColor: '#e98e01',\n              // opacity: [0.9, 0.8, 0.7],\n              // },\n            }}>\n              <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n                  <div style={{textAlign: \"left\", maxWidth: \"45%\", background: \"url('/static/look-job.jpg')\", backgroundSize: \"cover\", backgroundColor: 'red', flexGrow: \"0\", flexShrink: \"0\", flexBasis: \"50%\", alignItems: \"center\", justifyContent: \"center\"}}>\n                    <h1 style={{fontSize: \"3.25em\",color: \"#fff\", textShadow: \"2px 2px #000\", alignItems: \"center\", justifyContent: \"center\",\n                    fontWeight: \"bold\", position: \"relative\", zIndex: \"10\", marginTop: \"20%\"}}>\n                      <span style={{color: \"#fe9000\", marginLeft: \"20%\", justifyContent: \"left\"}}>CAN NOT</span> \n                      <br></br>\n                      <span style={{marginLeft: \"20%\", justifyContent: \"left\"}}>FIND</span> \n                      <br></br>\n                      <span style={{alignItems: \"left\", marginLeft: \"20%\", justifyContent: \"left\"}}>YOUR DREAM</span>\n                      <br></br>\n                      <span style={{alignItems: \"left\", marginLeft: \"20%\", justifyContent: \"left\"}}>JOB YET ?</span>\n                    </h1>\n                  </div>\n                  \n                  <div style={{ maxWidth: \"20%\", padding: \"1%\", flexGrow: \"0\", flexShrink: \"0\", flexBasis: \"50%\", fontWeight: \"bold\"}}>\n                      <Form style={{marginTop: \"30%\", paddingLeft: \"5px\"}}>\n                          <Form.Group controlId=\"formGridEmail\" style={{paddingBottom: \"15px\"}}>\n                            <Form.Label>CATEGORY</Form.Label>\n        \n                            <Form.Select aria-label=\"Default select example\" name=\"category\" onChange={onFormChange}>\n      \n                            <option value=\"all\">Select Category</option>\n                                {jobCategoryData.map((item) => (\n                                  <option value={item.job_category_name}>{item.job_category_name}</option>\n                                ))}\n      \n                            </Form.Select>\n                          </Form.Group>\n      \n                          <Form.Group controlId=\"formGridPassword\" style={{paddingBottom: \"15px\"}}>\n                              <Form.Label>LOCATION</Form.Label>\n      \n                              <Form.Select aria-label=\"Default select example\" name=\"location\" onChange={onFormChange}>\n                                <option value=\"all\">Select City</option>\n                                {officeLocationData.map((item) => (\n                                  <option value={item.id}>{item.office_location}</option>\n                                ))}\n                              </Form.Select>\n                          </Form.Group>\n      \n                          <Form.Group controlId=\"formGridQuery\" style={{paddingBottom: \"20px\"}}>\n                              <Form.Label>SKILLS</Form.Label>\n                              \n                              <Form.Select aria-label=\"Default select example\" name=\"skills\" onChange={onFormChange}>\n                                <option value=\"all\">Select Skills</option>\n                                {technologyData.map((item) => (\n                                <option value={item.id}>{item.technology_name}</option>\n                                ))}\n                              </Form.Select>\n                          </Form.Group>\n      \n                          <Form.Group controlId=\"formGridQuery\" style={{paddingBottom: \"15px\"}}>\n                              <Form.Check name=\"relocation\" label={\"Open to Relocation\"} onChange={onFormChange}/>\n                              <Form.Check name=\"office\" label={\"Office\"} onChange={onFormChange}/>\n                              <Form.Check name=\"remote\" label={\"Remote\"} onChange={onFormChange}/>\n                          </Form.Group>\n                          \n                          <Button variant=\"contained\" size=\"medium\" onClick={handleFilterSubmit} style={{backgroundColor: 'black', width: '100px'}}>\n                              FIND\n                          </Button>\n                      </Form>\n                  </div>\n      \n                  <div style={{textAlign: \"center\", maxWidth: \"5%\", flexGrow: \"0\", flexShrink: \"0\", flexBasis: \"50%\"}}>\n                  </div>\n      \n                  <div style={{textAlign: \"center\", maxWidth: \"25%\", flexGrow: \"0\", flexShrink: \"0\", flexBasis: \"50%\"}}>\n                      <img src=\"/static/gateway-girl.png\" width=\"100%\" height=\"100%\"></img>\n                  </div>\n              </div>\n            </Box>\n      \n            <div style={{display: \"flex\", width: \"50%\", marginLeft: \"40%\", marginTop: \"5%\", textAlign: \"center\"}}>\n              <h2 style={{fontSize: '30px', fontWeight: '1000'}}>Current Openings</h2>\n            </div>\n      \n            <Stack\n              direction=\"row\"\n              flexWrap=\"wrap-reverse\"\n              alignItems=\"center\"\n              justifyContent=\"flex-end\"\n              sx={{ mb: 5 }}\n            >\n            </Stack>\n\n            {isLoading ? (\n              <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                <LinearProgress />\n              </Typography>\n\n            ) : (\n              \n            <Grid container spacing={5} justifyContent=\"center\" >\n            {filterData && techStacks.map((job, index) => (\n              <JobCards key={job.id} post={job} index={index} jobsData={filterData} />\n              ))}\n            </Grid>\n            )}\n      \n          </Container>\n        </Page>\n      );\n    }\n}\n\n\n\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/EmployeeUser.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobDetails.js",["1579","1580","1581"],"import Page from'../../Page';\nimport {JobsPostCard} from \"../jobs\";\nimport React from 'react';\nimport { Grid, Container, Typography, Link } from \"@mui/material\";\nimport {Link as RouterLink,  useLocation} from 'react-router-dom';\n\nimport ShareIcon from '@mui/icons-material/Share';\nimport InstagramIcon from '@mui/icons-material/Instagram';\nimport LinkedInIcon from '@mui/icons-material/LinkedIn';\nimport FacebookIcon from '@mui/icons-material/Facebook';\nimport WhatsAppIcon from '@mui/icons-material/WhatsApp';\nimport TwitterIcon from '@mui/icons-material/Twitter';\n\nexport default function JobDetails() {\n    const location = useLocation()\n\n    return(\n        <Page>\n            <Container maxWidth=\"xl\">\n                {/* <Link to=\"/dashboard/jobs/openings\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n\n                <Typography variant=\"h4\" sx={{ mb: 6 }} align=\"center\">\n                    Job Details\n                </Typography> */}\n\n                <div style={{background: 'url(\"/static/office_interior_dark.jpg\")', backgroundSize: \"cover\", minHeight: \"650px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                    <h1 style={{fontSize: \"2.75em\",color: \"#fff\", textShadow: \"2px 2px #000\", alignItems: \"center\", justifyContent: \"center\",\n                    fontWeight: \"bold\", position: \"relative\", zIndex: \"50\"}}>\n                        <span style={{color: \"#f05e0a\", alignItems: \"center\", justifyContent: \"center\"}}>Door is Open for</span> Big Thinkers\n                        \n                        <p style={{fontSize: \"25px\", marginTop: \"130px\", textAlign: \"center\"}}>\n                            {location.state.jobTechnology} Technology | Gateway Group\n                        </p>\n\n                        <p style={{fontSize: \"25px\", marginTop: \"50px\", textAlign: \"center\"}}>\n                            <ShareIcon /> &ensp;\n                            <LinkedInIcon /> &ensp;\n                            <InstagramIcon /> &ensp;\n                            <FacebookIcon /> &ensp;\n                            <WhatsAppIcon /> &ensp;\n                            <TwitterIcon /> &ensp;\n                        </p>\n                    </h1>\n                </div>\n\n                <div style={{display: \"flex\", width: \"50%\", marginLeft: \"34%\", marginTop: \"5%\", textAlign: \"center\"}}>\n                    <h2 style={{fontSize: '40px', fontWeight: '1000'}}>We offer careers, not jobs</h2>\n                </div>\n\n                <Grid container spacing={3} alignContent=\"center\" justifyContent=\"center\" sx={{mt: 5}} >\n                {location.state.jobsData && location.state.jobsData.map((job, index) => (\n                    <JobsPostCard key={job.id} post={job} index={index} />\n                    ))}\n                </Grid>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/OtherRequisition.js",["1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport {useState, useEffect} from \"react\";\nimport TableRow from '@mui/material/TableRow';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { Button, Container, Typography } from '@mui/material';\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n\nimport Table from '@mui/material/Table';\nimport Paper from '@mui/material/Paper';\nimport { styled } from '@mui/material/styles';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport * as constants from 'src/utils/constants';\nimport { Padding } from '@mui/icons-material';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n            styleOverrides: {\n                root: {\n                    backgroundColor: 'white',\n                },\n                paper: {\n                    boxShadow: 'none',\n                },\n            },\n        },\n        MuiToolbar: {\n            styleOverrides: {\n                root: {\n                    // backgroundColor: 'yellow',\n                },\n            },\n        },\n        MuiTableCell: {\n            styleOverrides: {\n                head: {\n                    backgroundColor: 'rgb(0 171 85)',\n                },\n            },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                    fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n            styleOverrides: {\n                headerCell: {\n                    // backgroundColor: 'blue',\n                    fontWeight: '500px'\n                },\n            },\n        },\n        MuiTableFooter: {\n            styleOverrides: {\n                root: {\n                    '& .MuiToolbar-root': {\n                        //   backgroundColor: 'purple',\n                    },\n                },\n            },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: \"#00AB55\",\n        color: theme.palette.common.white,\n        fontWeight: \"bold\",\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n    }));\n    \n    const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 1,\n    },\n    }));\n\nfunction createData(name, calories, fat, carbs, protein) {\n    return { name, calories, fat, carbs, protein };\n    }\n\nconst rows = [\n    createData('Technical', 0, 0, 0, 0, 0, 0, 0, 0),\n    createData('Non-Technical', 0, 0, 0, 0, 0, 0, 0, 0),\n    createData('HR-Campus', 0, 0, 0, 0, 0, 0, 0, 0),\n    ];\n\nexport default function OtherRequisition() {\n    const navigate = useNavigate();\n    // state to save requisition ID\n    const [rowClickData, setRowClickData] = useState([])\n    const [empData, setEmpData] = useState([])\n    const userInfo = UserInfo()\n\n    const handleOnRowClick = (rowData) => {\n        setRowClickData(rowData[0])\n    \n        let requisitionTemplate = requisitionData.filter(item => {\n            return item.id === rowData[0]\n        })\n    \n        navigate(\"/resumeX/requisition/edit\", {state:{\n            from: requisitionTemplate, \n            office:officeLocationData,\n            fsdMembers: fsdMembersData,\n            technologyData: technologyData,\n            fromPage: \"OtherRequisition\"\n        }})\n    }\n\n    const options = {\n        selectableRows: \"none\", // <===== will turn off checkboxes in rows\n        filter: true,\n        filterType: \"multiselect\",\n        responsive: \"standard\",\n        onRowClick: (rowData) => {handleOnRowClick(rowData)},\n        download: false,\n        print: false,\n        draggableColumns: {enabled: true},\n        expandableRows: true,\n        expandableRowsHeader: false,\n        expandableRowsOnClick: false,\n        isRowExpandable: (dataIndex, expandedRows) => {\n        //   if (dataIndex === 3 || dataIndex === 4) return false;\n    \n            // Prevent expand/collapse of any row if there are 4 rows expanded already (but allow those already expanded to be collapsed)\n            if (\n                expandedRows.data.length > 4 &&\n                expandedRows.data.filter((d) => d.dataIndex === dataIndex).length === 0\n            )\n            return false;\n            return true;\n        },\n\n        customToolbarSelect: () => {},\n    \n    renderExpandableRow: (rowData, rowMeta) => {\n        const colSpan = rowData.length + 1;\n        let candidateData = requisitionData.filter(item => {\n            return item.id === rowData[0]\n        })\n        return (\n        <tr>\n          <td colSpan={15}>\n            <TableContainer style={{ width: \"100%\" }}>\n              <Table>\n                <TableHead>\n                    <TableCell></TableCell>\n                    <StyledTableCell>Name</StyledTableCell>\n                    <StyledTableCell>Experience</StyledTableCell>\n                    <StyledTableCell>Status</StyledTableCell>\n                    <StyledTableCell>Technology</StyledTableCell>\n                    <StyledTableCell>Notice Period</StyledTableCell>\n                    <StyledTableCell>Expected CTC</StyledTableCell>\n                    <StyledTableCell>Source</StyledTableCell>\n                    <StyledTableCell>Current Location</StyledTableCell>\n                    <StyledTableCell>Preferred Location</StyledTableCell>\n                </TableHead>\n                <TableBody>\n                    {candidateData[0].candidate.length > 0 ? (\n                        candidateData[0].candidate.map((candidate) => (\n                        <StyledTableRow>\n                            <TableCell></TableCell>\n                            <StyledTableCell>\n                                {/* \n                                <a href={`/resumeX/candidates/edit/${candidate.id}`} \n                                style={{textDecoration: 'none', \n                                        color: '#00AB55', \n                                        fontWeight: 'bold'}}\n                                >\n                                    {candidate.user.first_name + \" \" + candidate.user.last_name}\n                                </a> */}\n                                <RouterLink \n                                to={`/resumeX/candidates/edit/${candidate.id}`} state={{fromPage: \"OtherRequisition\"}}  \n                                style={{textDecoration: 'none', \n                                color: '#00AB55', fontWeight: 'bold'}}> \n                                {candidate.user.first_name + \" \" + candidate.user.last_name} \n                                </RouterLink>\n                            </StyledTableCell>\n                            <StyledTableCell>{candidate.total_experience} Years</StyledTableCell>\n                            <StyledTableCell>{candidate.status.status}</StyledTableCell>\n                            <StyledTableCell>{candidate.technology.map(\n                                (tech, index) => (index ? ', ': '') + (tech.technology_name)\n                            )}\n                            </StyledTableCell>\n                            <StyledTableCell>{candidate?.notice_period?.notice_period}</StyledTableCell>\n                            <StyledTableCell>{candidate?.expected_ctc}</StyledTableCell>\n                            <StyledTableCell>{candidate?.source?.source}</StyledTableCell>\n                            <StyledTableCell>{candidate.current_location}</StyledTableCell>\n                            <StyledTableCell>{candidate.preferred_location.map(\n                                (tech, index) => (index ? ', ': '') + (tech.office_location)\n                            )}\n                            </StyledTableCell>\n                        </StyledTableRow>\n                        ))) : (\n                        <StyledTableRow>\n                            <StyledTableCell>No Data Available</StyledTableCell>\n                        </StyledTableRow>\n                        )\n                    }\n                </TableBody>\n            </Table>\n            </TableContainer>\n        </td>\n        </tr>\n        );\n    },\n    \n    onRowExpansionChange: (curExpanded, allExpanded, rowsExpanded) =>\n        console.log(curExpanded, allExpanded, rowsExpanded)\n    };\n\n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"RRF Number\",\n            options: {                \n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        // <span style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</span>\n                        <a href=\"\" style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                    )\n                }\n            },            \n        },\n        {\n            name: \"Requisitioner\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Business Unit\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Requisition Date\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Expected DOJ\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Category\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Recruiters\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Project\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Technology Stack\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Type\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Status\",\n            options: {\n                filter: true\n            }\n        },\n    ];\n\n    //Local Username\n    const local_user = JSON.parse(localStorage.getItem(\"user\"))\n    const local_username = (local_user.username);\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    // Get requisition template data\n    const [requisitionData, setRequisitionData] = useState([])\n    \n    const getRequisitionData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisitions/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n\n            var filtered_OtherReqData = response.data.data.filter(data => data.requisite_creator.username != local_username).map(filtereddata => filtereddata)\n            setRequisitionData(filtered_OtherReqData)\n            setIsLoading(false)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    // get office locations\n    const [officeLocationData, setOfficeLocationData] = useState([])\n    const getOfficeLocations = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/office-locations/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setOfficeLocationData(response.data.data)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get fsd members\n    const [fsdMembersData, setFsdMembers] = useState([])\n    const getFsdMembers = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/fsd-members/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setFsdMembers(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // technology data state\n    const [technologyData, setTechnologyData] = useState([])\n\n    const getTechnologyData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechnologyData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    };\n\n    const getEmployeeData = () => \n    {      \n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n\n        if(user_role === 'BU_HEAD')\n        {\n            apiInstance({\n                method: \"get\",\n                url: \"employee-data/\",\n                headers: {\n                    Authorization: \"token \" + localStorage.getItem('authToken'),\n                }\n            })\n            .then(function (response) {\n                var emp_info = response.data.data\n                setEmpData(emp_info)\n                localStorage.setItem(\"Employee_Details\", JSON.stringify(emp_info))                \n            })\n            .catch((e) => console.log('something went wrong :(', e));\n        }         \n\n    };\n\n    const getReqFilterData = () => {\n        if (userInfo.role === 'BU_HEAD')\n        {\n            let user_bu = empData?.bu_group?.bu_name\n            let filteredreq = requisitionData.filter((item) => item.bu_group.bu_name === user_bu);\n            return filteredreq            \n        }\n        else{\n            return requisitionData\n        }\n    };\n\n    useEffect(() => {\n        getRequisitionData()\n        getOfficeLocations()\n        getFsdMembers()\n        getTechnologyData()\n        getEmployeeData()\n    }, [])\n\n    return (\n        <Page title='Requisition Templates | ResumeX'>\n            <Container maxWidth=\"xl\">\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Other Requisitions</h2>\n\n                {/* <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                    Other Requisitions\n                </Typography> */}\n{/* \n                <div>\n                    <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 700, mb: 5 }} aria-label=\"customized table\">\n                        <TableHead>\n                        <TableRow>\n                            <StyledTableCell>Department</StyledTableCell>\n                            <StyledTableCell align=\"right\">RRF Count</StyledTableCell>\n                            <StyledTableCell align=\"right\">Requisitioned&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">Processed&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">In Process&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">Pending&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">Offer Accepted&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">Joined&nbsp;</StyledTableCell>\n                        </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {rows.map((row) => (\n                            <StyledTableRow key={row.name}>\n                            <StyledTableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                            </StyledTableRow>\n                        ))}\n                        </TableBody>\n                    </Table>\n                    </TableContainer>\n                </div>  */}\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0, paddingTop: \"-10px\" }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                    <ThemeProvider theme={theme}>\n                        <MUIDataTable\n                            // data={requisitionData.map(data => {\n                            //     return [\n                            //         data.id,\n                            //         data.requisite_number, \n                            //         data.tech_stack.tech_stack_name,\n                            //         data.requisite_type.req_type_name,\n                            //         data.requisite_status.requisition_status,\n                            //         data.default_fsd_users.recruiters.map(\n                            //             (user, index) => (index ? ', ': '') + user.member.first_name + \" \" + user.member.last_name),\n                            //         data.department.job_category_name,\n                            //         data.expected_join_date.substring(0, 10).split('-').reverse().join('-'),\n                            //         data.bu_group.bu_name,\n                            //         data.requisite_creator.first_name + \" \" +  data.requisite_creator.last_name,\n                            //         data.created.substring(0, 10).split('-').reverse().join('-'),\n                            //     ]\n                            // })}\n                            data={getReqFilterData().slice(0).reverse().map(data => {\n                                return [\n                                data.id,\n                                data.requisite_number,\n                                data.requisite_creator.first_name + \" \" +  data.requisite_creator.last_name,\n                                data.bu_group.bu_name,\n                                data.created.substring(0, 10).split('-').reverse().join('-'),\n                                data.expected_join_date.substring(0, 10).split('-').reverse().join('-'),\n                                data.department.job_category_name,\n                                data.default_fsd_users.recruiters.map(\n                                    (user, index) => (index ? ', ': '') + user.member.first_name + \" \" + user.member.last_name),\n                                data.project_name,\n                                data.tech_stack.tech_stack_name,\n                                data.requisite_type.req_type_name,\n                                data.requisite_status.requisition_status,\n                                ]\n                            })}\n                            columns={columns}\n                            options={options}\n                            components={components}\n                        />\n                    </ThemeProvider>\n                    )}\n            </Container>\n        </Page>\n    );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/pages/MyRequisition.js",["1594","1595","1596","1597","1598","1599","1600"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport {useState, useEffect} from \"react\";\nimport TableRow from '@mui/material/TableRow';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { Button, Container, Typography } from '@mui/material';\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n\nimport Table from '@mui/material/Table';\nimport Paper from '@mui/material/Paper';\nimport { styled } from '@mui/material/styles';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport * as constants from 'src/utils/constants';\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n            styleOverrides: {\n                root: {\n                    backgroundColor: 'white',\n                },\n                paper: {\n                    boxShadow: 'none',\n                },\n            },\n        },\n        MuiToolbar: {\n            styleOverrides: {\n                root: {\n                    // backgroundColor: 'yellow',\n                },\n            },\n        },\n        MuiTableCell: {\n            styleOverrides: {\n                head: {\n                    backgroundColor: 'rgb(0 171 85)',\n                },\n            },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                    fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n            styleOverrides: {\n                headerCell: {\n                    // backgroundColor: 'blue',\n                    fontWeight: '500px'\n                },\n            },\n        },\n        MuiTableFooter: {\n            styleOverrides: {\n                root: {\n                    '& .MuiToolbar-root': {\n                        //   backgroundColor: 'purple',\n                    },\n                },\n            },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: \"#00AB55\",\n        color: theme.palette.common.white,\n        fontWeight: \"bold\",\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n    }));\n    \n    const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 1,\n    },\n    }));\n\nfunction createData(name, calories, fat, carbs, protein) {\n    return { name, calories, fat, carbs, protein };\n    }\n\nconst rows = [\n    createData('Technical', 0, 0, 0, 0, 0, 0, 0, 0),\n    createData('Non-Technical', 0, 0, 0, 0, 0, 0, 0, 0),\n    createData('HR-Campus', 0, 0, 0, 0, 0, 0, 0, 0),\n    ];\n\nexport default function MyRequisition() {\n    const navigate = useNavigate();\n    // state to save requisition ID\n    const [rowClickData, setRowClickData] = useState([])\n\n    const handleOnRowClick = (rowData) => {\n        setRowClickData(rowData[0])\n\n        let requisitionTemplate = requisitionData.filter(item => {\n            return item.id === rowData[0]\n        })\n\n        navigate(\"/resumeX/requisition/edit\", {state:{\n            from: requisitionTemplate, \n            office:officeLocationData,\n            fsdMembers: fsdMembersData,\n            technologyData: technologyData\n        }})\n    }\n\n    const options = {\n        selectableRows: false, // <===== will turn off checkboxes in rows\n        filter: true,\n        filterType: \"multiselect\",\n        responsive: \"standard\",\n        download: false,\n        print: false,\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {handleOnRowClick(rowData)},\n        expandableRows: true,\n        expandableRowsHeader: false,\n        expandableRowsOnClick: false,\n        isRowExpandable: (dataIndex, expandedRows) => {\n        //   if (dataIndex === 3 || dataIndex === 4) return false;\n    \n            // Prevent expand/collapse of any row if there are 4 rows expanded already (but allow those already expanded to be collapsed)\n            if (\n                expandedRows.data.length > 4 &&\n                expandedRows.data.filter((d) => d.dataIndex === dataIndex).length === 0\n            )\n            return false;\n            return true;\n        },\n\n        customToolbarSelect: () => {},\n    \n    renderExpandableRow: (rowData, rowMeta) => {\n        const colSpan = rowData.length + 1;\n        let candidateData = requisitionData.filter(item => {\n            return item.id === rowData[0]\n        })\n        return (\n        <tr>\n          <td colSpan={15}>\n            <TableContainer style={{ width: \"100%\" }}>\n              <Table>\n                <TableHead>\n                    <TableCell></TableCell>\n                    <StyledTableCell>Name</StyledTableCell>\n                    <StyledTableCell>Experience</StyledTableCell>\n                    <StyledTableCell>Status</StyledTableCell>\n                    <StyledTableCell>Technology</StyledTableCell>\n                    <StyledTableCell>Notice Period</StyledTableCell>\n                    <StyledTableCell>Expected CTC</StyledTableCell>\n                    <StyledTableCell>Source</StyledTableCell>\n                    <StyledTableCell>Current Location</StyledTableCell>\n                    <StyledTableCell>Preferred Location</StyledTableCell>\n                </TableHead>\n                <TableBody>\n                    {candidateData[0].candidate.length > 0 ? (\n                        candidateData[0].candidate.map((candidate) => (\n                        <StyledTableRow>\n                            <TableCell></TableCell>\n                            <StyledTableCell>\n                                {/* <a \n                                        href={`/resumeX/candidates/edit/${candidate.id}`} \n                                        style={{textDecoration: 'none', \n                                        color: '#00AB55', \n                                        fontWeight: 'bold'}}\n                                    >\n                                        {candidate.user.first_name + \" \" + candidate.user.last_name}\n                                    </a> */}\n                                <RouterLink \n                                    to={`/resumeX/candidates/edit/${candidate.id}`} \n                                    state={{fromPage: \"MyRequisition\"}}  \n                                    style={{textDecoration: 'none', \n                                            color: '#00AB55', \n                                            fontWeight: 'bold'}}\n                                > \n                                  {candidate.user.first_name + \" \" + candidate.user.last_name} \n                                </RouterLink>\n                            </StyledTableCell>\n                            <StyledTableCell>{candidate.total_experience} Years</StyledTableCell>\n                            <StyledTableCell>{candidate.status.status}</StyledTableCell>\n                            <StyledTableCell>{candidate.technology.map(\n                                (tech, index) => (index ? ', ': '') + (tech.technology_name)\n                            )}\n                            </StyledTableCell>\n                            <StyledTableCell>{candidate?.notice_period?.notice_period}</StyledTableCell>\n                            <StyledTableCell>{candidate?.expected_ctc}</StyledTableCell>\n                            <StyledTableCell>{candidate?.source?.source}</StyledTableCell>\n                            <StyledTableCell>{candidate.current_location}</StyledTableCell>\n                            <StyledTableCell>{candidate.preferred_location.map(\n                                (tech, index) => (index ? ', ': '') + (tech.office_location)\n                            )}\n                            </StyledTableCell>\n                        </StyledTableRow>\n                        ))) : (\n                        <StyledTableRow>\n                            <StyledTableCell>No Data Available</StyledTableCell>\n                        </StyledTableRow>\n                        )\n                    }\n                </TableBody>\n            </Table>\n            </TableContainer>\n        </td>\n        </tr>\n        );\n    },\n    \n    onRowExpansionChange: (curExpanded, allExpanded, rowsExpanded) =>\n        console.log(curExpanded, allExpanded, rowsExpanded)\n    };\n\n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"RRF Number\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        // <span style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</span>\n                        <a href=\"\" style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Requisitioner\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Business Unit\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Requisition Date\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Expected DOJ\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Category\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Recruiters\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Project\",\n            options: {\n                filter: false\n            }\n        },\n        {\n            name: \"Technology Stack\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Business Unit\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Type\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Status\",\n            options: {\n                filter: true\n            }\n        },\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    //Local Username\n    const local_user = JSON.parse(localStorage.getItem(\"user\"))\n    const local_username = (local_user.username);\n\n    // Get requisition template data\n    const [requisitionData, setRequisitionData] = useState([])\n    \n    const getRequisitionData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisitions/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n\n            var filtered_UserReqData = response.data.data.filter(data => data.requisite_creator.username == local_username).map(filteredData => filteredData)\n            setRequisitionData(filtered_UserReqData)\n\n            setIsLoading(false)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    // get office locations\n    const [officeLocationData, setOfficeLocationData] = useState([])\n    const getOfficeLocations = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/office-locations/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setOfficeLocationData(response.data.data)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get fsd members\n    const [fsdMembersData, setFsdMembers] = useState([])\n    const getFsdMembers = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/fsd-members/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setFsdMembers(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // technology data state\n    const [technologyData, setTechnologyData] = useState([])\n\n    const getTechnologyData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechnologyData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    };   \n\n    useEffect(() => {\n        getRequisitionData()\n        getOfficeLocations()\n        getFsdMembers()\n        getTechnologyData()\n    }, [])\n\n    return (\n        <Page title='Requisition Templates | ResumeX'>\n            <Container maxWidth=\"xl\">\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>My Requisitions</h2>\n\n                {/* <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n                    My Requisitions\n                </Typography> */}\n{/* \n                <div>\n                    <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 700, mb: 5 }} aria-label=\"customized table\">\n                        <TableHead>\n                        <TableRow>\n                            <StyledTableCell>Department</StyledTableCell>\n                            <StyledTableCell align=\"right\">RRF Count</StyledTableCell>\n                            <StyledTableCell align=\"right\">Requisitioned&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">Processed&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">In Process&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">Pending&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">Offer Accepted&nbsp;</StyledTableCell>\n                            <StyledTableCell align=\"right\">Joined&nbsp;</StyledTableCell>\n                        </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {rows.map((row) => (\n                            <StyledTableRow key={row.name}>\n                            <StyledTableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n                            <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                            </StyledTableRow>\n                        ))}\n                        </TableBody>\n                    </Table>\n                    </TableContainer>\n                </div>  */}\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : ( \n                    <ThemeProvider theme={theme}>\n                        <MUIDataTable\n                            title={\n                            <Button \n                                variant=\"contained\" \n                                startIcon={<Icon icon={plusFill} />} \n                                style={StyledButton}\n                                component={RouterLink}\n                                to=\"/resumeX/requisition/create\"\n                                >\n                                    Create Requisition\n                            </Button>\n                            }      \n                            \n                            data={ requisitionData.slice(0).reverse().map(data => {\n                                    return [\n                                    data.id,\n                                    data.requisite_number,\n                                    data.requisite_creator.first_name + \" \" +  data.requisite_creator.last_name,\n                                    data.bu_group.bu_name,\n                                    data.created.substring(0, 10).split('-').reverse().join('-'),\n                                    data.expected_join_date.substring(0, 10).split('-').reverse().join('-'),\n                                    data.department.job_category_name,\n                                    data.default_fsd_users.recruiters.map(\n                                        (user, index) => (index ? ', ': '') + user.member.first_name + \" \" + user.member.last_name),\n                                    data.project_name,\n                                    data.tech_stack.tech_stack_name,\n                                    data.bu_group.bu_name,\n                                    data.requisite_type.req_type_name,\n                                    data.requisite_status.requisition_status,\n                                    ]\n                            })}\n                            columns={columns}\n                            options={options}\n                            components={components}\n                        />\n                    </ThemeProvider>\n                    )}\n                        \n            </Container>\n        </Page>\n    );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisition-template/EditRRFTemplate.js",["1601","1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613","1614","1615"],"import axios from 'axios';\nimport * as Yup from \"yup\";\nimport Page from '../../Page';\nimport {useSnackbar} from 'notistack';\nimport { LoadingButton } from \"@mui/lab\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport InputAdornment from '@mui/material/InputAdornment';\nimport {Link as RouterLink, useNavigate, useLocation} from 'react-router-dom';\nimport { Checkbox, Container, FormControl, InputLabel, Link, MenuItem, Select, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\n\nexport default function EditRRFTemplate() {\n    const location = useLocation()\n\n    const { enqueueSnackbar} = useSnackbar();\n    const navigate = useNavigate();\n\n    const [techStackTechnologyAPIData, setTechStackTechnologyAPIData] = useState([])\n    const [techStacksArray, setTechStacksArray] = useState([])\n\n    const getTechStackTechnology = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-technologies/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechStackTechnologyAPIData(response.data.data)\n\n            var techStacks = response.data.data.map((obj) => (obj.technology_stack))\n            setTechStacksArray(techStacks)\n\n            // var initialSecondaryTechnologyData = location.state.technologyData.filter(obj => {\n            //     return !location.state.requisitionTemplate[0].primary_technology.map(obj => obj.id).includes(obj.id)\n            // })\n\n            // setSecondaryTechnologyArray(initialSecondaryTechnologyData)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    const [stackRecruiterData, setStackRecruiterData] = useState([])\n    \n    const getStackTechnologies = (props) => {\n        handleChange(\"techStack\")(props)\n\n        const data = {\n            tech_stack_id: props.target.value\n        }\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-recruiter/', data, {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setStackRecruiterData(response.data.data)\n            handleChange(\"assignedFsdMember\")(`${response.data.data.id}`)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n\n        var techstack = techStackTechnologyAPIData.filter(obj => {\n            return obj.technology_stack.id === data.tech_stack_id\n        })[0]\n\n        var tech_ids = techstack.technologies.map((obj) => obj.id)\n        \n        setFieldValue(\"primaryTechnology\", tech_ids)\n\n        // setFieldValue(\"secondaryTechnology\", [1, 2])\n\n        // Filter data for secondary technology options (Do not include selected values primary tech)\n\n        // var secondaryTechnologyData = location.state.technologyData.filter(obj => {\n        //     return !tech_ids.includes(obj.id)\n        // })\n\n        // setSecondaryTechnologyArray(secondaryTechnologyData)\n    }\n\n    // get job category / requisition department\n    const [requisitionDepartmentData, setRequisitionDepartmentData] = useState([])\n    const getRequisitionDepartment = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-category/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionDepartmentData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }; \n\n    const [checked, setChecked] = useState(true);\n    const handleIsActiveChange = event =>{\n      setChecked(event.target.checked);\n    };\n\n    // get required experience data for requisition\n    const [requisitionRequiredExperienceData, setRequisitionRequiredExperienceData] = useState([])\n    const getRequisitionRequiredExperience = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-experience/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionRequiredExperienceData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };     \n\n    // set initial values for secondary technology\n    const getSelectInitialSecondaryTechnology = () => {\n        const initialSelectedMock = location.state.requisitionTemplate[0].other_technology\n    \n        const initialSelected = location.state.technologyData.filter((technology) => {\n            if (\n            initialSelectedMock.find((initialSecondaryTechnology) => initialSecondaryTechnology.id === technology.id)\n            ) {\n            return true;\n            }\n            return false;\n        });\n        return initialSelected;\n    };\n    \n    const initialSelectState = getSelectInitialSecondaryTechnology();\n\n    const [secondaryTechnologyState, setSecondaryTechnologyState] = useState(\n        initialSelectState\n    );\n\n    useEffect(() => {\n        getTechStackTechnology()\n        getRequisitionDepartment()\n        getRequisitionRequiredExperience()\n        setStackRecruiterData(location.state.requisitionTemplate[0].fsd_members)\n    }, [])\n\n    const EditRequisitionTemplateSchema = Yup.object().shape({\n        techStack: Yup.string()\n        .required(\"Techstack is required\"),\n        assignedFsdMember: Yup.string()\n        .required(\"FSD Member is required\"),\n        jobName: Yup.string()\n        .min(2, \"Too Short!\")\n        .max(50, \"Too Long!\")\n        .required(\"Job name is required\"),\n        jobDescription: Yup.string()\n        .min(2, \"Too Short!\")\n        .required(\"Job description is required\"),\n        responsibilities: Yup.string()\n        .min(2, \"Too Short!\")\n        .required(\"Responsibilities are required\"),\n        primaryTechnology: Yup.array()\n        .min(1, \"Primary technology is required\")\n        .required(\"Must have technologies are required\"),\n        secondaryTechnology: Yup.array()\n        .min(1, \"Secondary technology is required\")\n        .required(\"Good to have technologies are required\"),\n        department: Yup.string()\n        .required(\"Department is required\"),\n        requiredExperience: Yup.string()\n        .required(\"Required experience is required\"),\n    })\n    const formik = useFormik({\n        initialValues: {\n            techStack: location.state.requisitionTemplate[0].tech_stack.id ?? \"\",\n            assignedFsdMember: location.state.requisitionTemplate[0].fsd_members.id ?? \"\",\n            jobName: location.state.requisitionTemplate[0].job_name ?? \"\",\n            jobDescription: location.state.requisitionTemplate[0].job_description ?? \"\",\n            responsibilities: location.state.requisitionTemplate[0].responsibilities ?? \"\",\n            primaryTechnology: location.state.requisitionTemplate[0].primary_technology.map(obj => obj.id),\n            secondaryTechnology: location.state.requisitionTemplate[0].other_technology.map(obj => obj.id),\n            department: location.state.requisitionTemplate[0].department.id ?? \"\",\n            requiredExperience: location.state.requisitionTemplate[0].job_exp ?? \"\",\n        },\n        validationSchema: EditRequisitionTemplateSchema,\n        onSubmit: (formValues) => {\n            const id = location.state.requisitionTemplate[0].id\n\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            const data = {\n                tech_stack_id: formValues.techStack,\n                fsd_members_id: formValues.assignedFsdMember,\n                job_name: formValues.jobName,\n                job_description: formValues.jobDescription,\n                responsibilities: formValues.responsibilities,\n                primary_technology_id: formValues.primaryTechnology,\n                other_technology_id: formValues.secondaryTechnology,\n                department_id: formValues.department,\n                job_exp: formValues.requiredExperience\n            }\n\n            axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-template/' + id + \"/\", data, {headers})\n            .then(function (response) {\n                if (response.status == 200) {\n                  enqueueSnackbar(\"Requisition template created successfully !!\", {\n                    anchorOrigin: {\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                  },\n                    variant: 'success',\n                    autoHideDuration: 1500,\n                  });\n                  navigate('/resumeX/rrf-templates', {replace: true});\n                  window.location.reload(false);\n                }\n              })\n          .catch(error => {\n              console.error('There was an error!', error);\n          });\n        }\n    })\n\n    const { errors, handleChange, setFieldValue, touched, handleSubmit, isSubmitting, getFieldProps, values, setValues } = formik;\n\n    return (\n        <Page title='Edit RRF Template | ResumeX'>\n            <Container maxWidth=\"xl\">\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={72}>\n                    <Link to=\"/resumeX/rrf-templates\"\n                        color=\"green\" \n                        underline=\"hover\" \n                        component={RouterLink} \n                        fontSize=\"20px\">\n                            <ArrowCircleLeftIcon fontSize=\"large\" />\n                    </Link>\n\n                    <h2 style={{fontSize: '25px', fontWeight: '800'}}>Edit Requisition Template</h2>\n\n                    {/* <Typography variant=\"h4\" sx={{ mb:5 }} align=\"center\">\n                        Edit Requisition Template\n                    </Typography> */}\n                </Stack>\n                \n                <Stack\n                    direction=\"row\"\n                    flexWrap=\"wrap-reverse\"\n                    alignItems=\"center\"\n                    justifyContent=\"flex-end\"\n                    sx={{ mb: 10 }}\n                >\n                </Stack>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <Stack spacing={3}>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                {/* --------------------- Department --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Department *\"\n                                    {...getFieldProps(\"department\")}\n                                    error={Boolean(touched.department && errors.department)}\n                                    helperText={touched.department && errors.department}\n                                >\n                                    {requisitionDepartmentData.map((department) => (\n                                        <MenuItem key={department.id} value={department.id}>{department.job_category_name}</MenuItem>\n                                    ))}\n                                </TextField>\n\n                                {/* --------------------- Required Experience --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Required Experience\"\n                                    {...getFieldProps(\"requiredExperience\")}\n                                    error={Boolean(touched.requiredExperience && errors.requiredExperience)}\n                                    helperText={touched.requiredExperience && errors.requiredExperience}\n                                    >\n                                {requisitionRequiredExperienceData.map((experience) => (\n                                    <MenuItem \n                                    key={experience.id} \n                                    value={experience.requisition_experience}>\n                                        {experience.requisition_experience}\n                                    </MenuItem>\n                                ))}\n                                </TextField>   \n\n                                {/* --------------------- Job Name --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    label=\"Job Name\"\n                                    {...getFieldProps(\"jobName\")}\n                                    error={Boolean(touched.jobName && errors.jobName)}\n                                    helperText={touched.jobName && errors.jobName}\n                                    >\n                                </TextField>\n                            </Stack>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                {/* --------------------- Tech Stack --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Tech Stack\"\n                                    {...getFieldProps(\"techStack\")}\n                                    onChange={(selectedOption) => getStackTechnologies(selectedOption)}\n                                    value = {formik.values.techStack}\n                                    error={Boolean(touched.techStack && errors.techStack)}\n                                    helperText={touched.techStack && errors.techStack}\n                                    >\n                                    {techStacksArray.map((techstack) => (\n                                        <MenuItem key={techstack.id} value={techstack.id}>{techstack.tech_stack_name}</MenuItem>\n                                    ))}\n                                </TextField>\n\n                                {/* --------------------- Primary Technology --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Must Have Technologies *\"\n                                    // disabled= {\"true\" ? formik.values.primaryTechnology.length === 5 : \"false\"}\n                                    disabled\n                                    multiple\n                                    {...getFieldProps(\"primaryTechnology\")}\n                                    error={Boolean(touched.primaryTechnology && errors.primaryTechnology)}\n                                    helperText={touched.primaryTechnology && errors.primaryTechnology}\n                                    SelectProps={{\n                                        multiple: true,\n                                        value: formik.values.primaryTechnology,\n                                        onChange: (selectedOption) => handleChange(\"primaryTechnology\")(selectedOption)\n                                    }}\n                                    >\n                                    {location.state.technologyData.map((technology) => (\n                                        <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                                    ))}\n                                </TextField>\n\n                                {/* --------------------- Secondary Technology --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Good To Have Technologies *\"\n                                    multiple\n                                    {...getFieldProps(\"secondaryTechnology\")}\n                                    error={Boolean(touched.secondaryTechnology && errors.secondaryTechnology)}\n                                    helperText={touched.secondaryTechnology && errors.secondaryTechnology}\n                                    SelectProps={{\n                                        multiple: true,\n                                        value: formik.values.secondaryTechnology,\n                                        onChange: (selectedOption) => handleChange(\"secondaryTechnology\")(selectedOption)\n                                    }}\n                                    >\n                                    {location.state.technologyData.map((technology) => (\n                                        <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                                    ))}\n                                </TextField>\n\n                                {/* --------------------- Assigned FSD Member --------------------- */}\n                                {/* <TextField\n                                    fullWidth\n                                    disabled\n                                    select\n                                    label=\"Assigned FSD Member\"\n                                    {...getFieldProps(\"assignedFsdMember\")}\n                                    value = {formik.values.assignedFsdMember}\n                                    error={Boolean(touched.assignedFsdMember && errors.assignedFsdMember)}\n                                    helperText={touched.assignedFsdMember && errors.assignedFsdMember}\n                                    >\n                                        <MenuItem\n                                        key={stackRecruiterData?.id} \n                                        value={stackRecruiterData?.id}>\n                                            {stackRecruiterData?.recruiters?.map(\n                                                (recruiter, index) => (index ? ', ': '') + recruiter?.member?.first_name + \" \" + recruiter?.member?.last_name)}\n                                        </MenuItem>\n                                </TextField> */}\n                            </Stack>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                {/* --------------------- Job Description --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    label=\"Job Description\"\n                                    multiline\n                                    rows={10}\n                                    {...getFieldProps(\"jobDescription\")}\n                                    error={Boolean(touched.jobDescription && errors.jobDescription)}\n                                    helperText={touched.jobDescription && errors.jobDescription}\n                                    >\n                                </TextField>\n\n                                {/* --------------------- Responsibilities --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    label=\"Responsibilities\"\n                                    multiline\n                                    rows={10}\n                                    {...getFieldProps(\"responsibilities\")}\n                                    error={Boolean(touched.responsibilities && errors.responsibilities)}\n                                    helperText={touched.responsibilities && errors.responsibilities}                                   \n                                />\n                            </Stack>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2} justifyContent=\"center\">\n                                {/* --------------------- Is Active --------------------- */}\n                                {/* <Typography>\n                                    <Checkbox checked={checked} onChange={handleIsActiveChange}/>\n                                    Active\n                                </Typography> */}\n                            </Stack>\n\n                            <LoadingButton\n                                fullWidth\n                                size=\"large\"\n                                type=\"submit\"\n                                variant=\"contained\"\n                                loading={isSubmitting}\n                            >\n                                Update Requisition Template\n                            </LoadingButton>\n                        </Stack>\n                    </Form>\n                </FormikProvider>\n\n            </Container>\n        </Page>\n    )\n}\n\n\n\n\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisition-template/CreateRRFTemplate.js",["1616","1617","1618","1619","1620","1621","1622","1623","1624","1625","1626","1627","1628"],"import React, { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport { Box, Checkbox,Container, MenuItem, Stack, TableCell, Table, TableContainer, TableRow, \n    TableHead, TextField, Typography, Link } from '@mui/material';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport axios from 'axios';\nimport { LoadingButton } from \"@mui/lab\";\nimport * as Yup from \"yup\";\nimport {useSnackbar} from 'notistack';\nimport * as constants from 'src/utils/constants';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\n\nexport default function CreateRRFTemplate() {\n    const { enqueueSnackbar} = useSnackbar();\n    const navigate = useNavigate();\n\n    const [techStackTechnologyAPIData, setTechStackTechnologyAPIData] = useState([])\n    const [techStacksArray, setTechStacksArray] = useState([])\n\n    const getTechStackTechnology = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-technologies/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechStackTechnologyAPIData(response.data.data)\n\n            var techStacks = response.data.data.map((obj) => (obj.technology_stack))\n            setTechStacksArray(techStacks)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    const [technologyData, setTechnologyData] = useState([])\n    const [secondaryTechnologyArray, setSecondaryTechnologyArray] = useState([])\n\n    const getTechnologyData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechnologyData(response.data.data)\n            const filterSTarr = response.data.data.map((item) => { if(item.is_active === true){return item}})\n            const thisSTarr = filterSTarr.filter(function (el) { return el != null; });\n            setSecondaryTechnologyArray(thisSTarr)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    };\n\n    const getStackTechnologies = (props) => {\n        handleChange(\"techStack\")(props)\n\n        const data = {\n            tech_stack_id: props.target.value\n        }\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-recruiter/', data, {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setStackRecruiterData(response.data.data)\n            handleChange(\"assignedFsdMember\")(`${response.data.data.id}`)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n\n        var techstack = techStackTechnologyAPIData.filter(obj => {\n            return obj.technology_stack.id === data.tech_stack_id\n        })[0]\n\n        var tech_ids = techstack.technologies.map((obj) => obj.id)\n        \n        setFieldValue(\"primaryTechnology\", tech_ids)\n\n        // setFieldValue(\"secondaryTechnology\", [1, 2])\n\n        // Filter data for secondary technology options (Do not include selected values primary tech)\n\n        var secondaryTechnologyData = technologyData.filter(obj => {\n            return !tech_ids.includes(obj.id)\n        })\n\n        setSecondaryTechnologyArray(secondaryTechnologyData)\n    }\n\n    // get job category / requisition department\n    const [requisitionDepartmentData, setRequisitionDepartmentData] = useState([])\n    const getRequisitionDepartment = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-category/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionDepartmentData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }; \n\n    const [stackRecruiterData, setStackRecruiterData] = useState([])\n\n    // for multiselect dropdown\n\n    // const getAssignedRecruiter = (props) => {\n    //     handleChange(\"techStack\")(props)\n    //     const data = {\n    //         tech_stack: props.target.value\n    //     }\n    //     axios.post('http://127.0.0.1:8000/api/v1/techstack-recruiter/', data, {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n    //     .then((response) => {\n    //         setStackRecruiterData(response.data.data)\n    //         setFieldValue(\"fsdMember\", [response.data.data[0].id])\n    //     })\n    //     .catch((e) => console.log('something went wrong (:', e));\n    // }\n\n    const [checked, setChecked] = useState(true);\n    const handleIsActiveChange = event =>{\n      setChecked(event.target.checked);\n    };\n\n    // get required experience data for requisition\n    const [requisitionRequiredExperienceData, setRequisitionRequiredExperienceData] = useState([])\n    const getRequisitionRequiredExperience = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-experience/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionRequiredExperienceData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }; \n\n    useEffect(() => {\n        getTechStackTechnology()\n        getTechnologyData()\n        getRequisitionDepartment()\n        getRequisitionRequiredExperience()\n    }, [])\n\n    const RequisitionTemplateSchema = Yup.object().shape({\n        techStack: Yup.string()\n        .required(\"Techstack is required\"),\n        assignedFsdMember: Yup.string()\n        .required(\"FSD Member is required\"),\n        jobName: Yup.string()\n        .trim(\"Job name cannot include spaces\")\n        // .min(2, \"Too Short!\")\n        // .max(50, \"Too Long!\")\n        .required(\"Job name is required\"),\n        jobDescription: Yup.string()\n        // .min(2, \"Too Short!\")\n        .trim(\"Job name cannot include spaces\")\n        .required(\"Job description is required\"),\n        responsibilities: Yup.string()\n        // .min(2, \"Too Short!\")\n        .trim(\"Job name cannot include spaces\")\n        .required(\"Responsibilities are required\"),\n        primaryTechnology: Yup.array()\n        .min(1, \"Must have technologies are required\")\n        .required(\"Must have technologies are required\"),\n        secondaryTechnology: Yup.array()\n        .min(1, \"Good to have technologies are required\")\n        .required(\"Good to have technologies are required\"),\n        department: Yup.string()\n        .required(\"Department is required\"),\n        requiredExperience: Yup.string()\n        .required(\"Required experience is required\"),\n    })\n    const formik = useFormik({\n        initialValues: {\n            techStack: \"\",\n            assignedFsdMember: \"\",\n            jobName: \"\",\n            jobDescription: \"\",\n            responsibilities: \"\",\n            primaryTechnology: [],\n            secondaryTechnology: [],\n            department: \"\",\n            requiredExperience: \"\",\n        },\n        validationSchema: RequisitionTemplateSchema,\n        onSubmit: (formValues) => {\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            const data = {\n                tech_stack_id: formValues.techStack,\n                fsd_members_id: formValues.assignedFsdMember,\n                job_name: formValues.jobName,\n                job_description: formValues.jobDescription,\n                responsibilities: formValues.responsibilities,\n                primary_technology_id: formValues.primaryTechnology,\n                other_technology_id: formValues.secondaryTechnology,\n                department_id: formValues.department,\n                job_exp: formValues.requiredExperience\n            }\n\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-template/', data, {headers})\n            .then(function (response) {\n                if (response.status == 200) {\n                  enqueueSnackbar(\"Requisition template created successfully !!\", {\n                    anchorOrigin: {\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                  },\n                    variant: 'success',\n                    autoHideDuration: 1500,\n                  });\n                  navigate('/resumeX/rrf-templates', {replace: true});\n                  window.location.reload(false);\n                }\n              })\n          .catch(error => {\n              console.error('There was an error!', error);\n          });\n        }\n    })\n\n    const { errors, handleChange, setFieldValue, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n    return (\n        <Page>\n            <Container maxWidth=\"xl\">          \n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={72}>\n                    <Link to=\"/resumeX/rrf-templates\"\n                        color=\"green\" \n                        underline=\"hover\" \n                        component={RouterLink} \n                        fontSize=\"20px\">\n                            <ArrowCircleLeftIcon fontSize=\"large\" />\n                    </Link>\n\n                    <h2 align=\"center\" justifyContent=\"center\" style={{fontSize: '25px', fontWeight: '800'}}>Create Requisition Template</h2>\n\n                    {/* <Typography variant=\"h4\" sx={{ mb:5 }} align=\"center\">\n                        Create Requisition Template\n                    </Typography> */}\n                </Stack>\n\n                <Stack\n                    direction=\"row\"\n                    flexWrap=\"wrap-reverse\"\n                    alignItems=\"center\"\n                    justifyContent=\"flex-end\"\n                    sx={{ mb: 10 }}\n                >\n                </Stack>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <Stack spacing={3}>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                {/* --------------------- Department --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Department\"\n                                    InputLabelProps={{\n                                        required: true,\n                                    }}\n                                    {...getFieldProps(\"department\")}\n                                    error={Boolean(touched.department && errors.department)}\n                                    helperText={touched.department && errors.department}\n                                >\n                                    {requisitionDepartmentData.map((department) => (\n                                        <MenuItem key={department.id} value={department.id}>{department.job_category_name}</MenuItem>\n                                    ))}\n                                </TextField>                                  \n\n                                {/* --------------------- Required Experience --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Required Experience\"\n                                    InputLabelProps={{\n                                        required: true,\n                                    }}\n                                    {...getFieldProps(\"requiredExperience\")}\n                                    error={Boolean(touched.requiredExperience && errors.requiredExperience)}\n                                    helperText={touched.requiredExperience && errors.requiredExperience}\n                                    >\n                                {requisitionRequiredExperienceData.map((experience) => (\n                                    <MenuItem \n                                    key={experience.id} \n                                    value={experience.requisition_experience}>\n                                        {experience.requisition_experience}\n                                    </MenuItem>\n                                ))}\n                                </TextField>\n\n                                {/* --------------------- Job Name --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    label=\"Job Name\"\n                                    InputLabelProps={{\n                                        required: true,\n                                    }}\n                                    {...getFieldProps(\"jobName\")}\n                                    error={Boolean(touched.jobName && errors.jobName)}\n                                    helperText={touched.jobName && errors.jobName}\n                                    >\n                                </TextField>\n                            </Stack>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                {/* --------------------- Tech Stack --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Tech Stack\"\n                                    InputLabelProps={{\n                                        required: true,\n                                    }}\n                                    {...getFieldProps(\"techStack\")}\n                                    onChange={(selectedOption) => getStackTechnologies(selectedOption)}\n                                    value = {formik.values.techStack}\n                                    error={Boolean(touched.techStack && errors.techStack)}\n                                    helperText={touched.techStack && errors.techStack}\n                                    >\n                                    {techStacksArray.map((techstack) => (\n                                        <MenuItem key={techstack.id} value={techstack.id}>{techstack.tech_stack_name}</MenuItem>\n                                    ))}\n                                </TextField>\n\n                                {/* --------------------- Primary Technology --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Must Have Technologies\"\n                                    InputLabelProps={{\n                                        required: true,\n                                    }}\n                                    // disabled= {\"true\" ? formik.values.primaryTechnology.length === 5 : \"false\"}\n                                    // disabled\n                                    multiple\n                                    {...getFieldProps(\"primaryTechnology\")}\n                                    error={Boolean(touched.primaryTechnology && errors.primaryTechnology)}\n                                    helperText={touched.primaryTechnology && errors.primaryTechnology}\n                                    SelectProps={{\n                                        multiple: true,\n                                        value: formik.values.primaryTechnology,\n                                        onChange: (selectedOption) => handleChange(\"primaryTechnology\")(selectedOption)\n                                    }}\n                                    >\n                                    {technologyData.map((technology) => (\n                                        <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                                    ))}\n                                </TextField>\n\n                                {/* --------------------- Secondary Technology --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Good To Have Technologies\"\n                                    InputLabelProps={{\n                                        required: true,\n                                    }}\n                                    multiple\n                                    {...getFieldProps(\"secondaryTechnology\")}\n                                    error={Boolean(touched.secondaryTechnology && errors.secondaryTechnology)}\n                                    helperText={touched.secondaryTechnology && errors.secondaryTechnology}\n                                    SelectProps={{\n                                        multiple: true,\n                                        value: formik.values.secondaryTechnology,\n                                        onChange: (selectedOption) => handleChange(\"secondaryTechnology\")(selectedOption)\n                                    }}\n                                    >\n                                    {secondaryTechnologyArray.map((technology) => (\n                                        <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                                    ))}\n                                </TextField>\n\n                                {/* --------------------- Assigned FSD Member (working) --------------------- */}\n                                {/* <TextField\n                                    fullWidth\n                                    disabled\n                                    select\n                                    label=\"Default FSD Member *\"\n                                    {...getFieldProps(\"assignedFsdMember\")}\n                                    value = {formik.values.assignedFsdMember}\n                                    error={Boolean(touched.assignedFsdMember && errors.assignedFsdMember)}\n                                    helperText={touched.assignedFsdMember && errors.assignedFsdMember}\n                                    >\n                                        <MenuItem\n                                        key={stackRecruiterData?.id} \n                                        value={stackRecruiterData?.id}>\n                                            {stackRecruiterData?.recruiters?.map(\n                                                (recruiter, index) => (index ? ', ': '') + recruiter?.member?.first_name + \" \" + recruiter?.member?.last_name)}\n                                        </MenuItem>\n                                </TextField> */}\n                            </Stack>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                {/* --------------------- Job Description --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    label=\"Job Description\"\n                                    InputLabelProps={{\n                                        required: true,\n                                    }}\n                                    multiline\n                                    rows={10}\n                                    {...getFieldProps(\"jobDescription\")}\n                                    error={Boolean(touched.jobDescription && errors.jobDescription)}\n                                    helperText={touched.jobDescription && errors.jobDescription}\n                                    >\n                                </TextField>\n\n                                {/* --------------------- Responsibilities --------------------- */}\n                                <TextField\n                                    fullWidth\n                                    label=\"Responsibilities\"\n                                    InputLabelProps={{\n                                        required: true,\n                                    }}\n                                    multiline\n                                    rows={10}\n                                    {...getFieldProps(\"responsibilities\")}\n                                    error={Boolean(touched.responsibilities && errors.responsibilities)}\n                                    helperText={touched.responsibilities && errors.responsibilities}                                   \n                                />\n                            </Stack>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2} justifyContent=\"center\">\n                                {/* --------------------- Is Active --------------------- */}\n                                {/* <Typography>\n                                    <Checkbox checked={checked} onChange={handleIsActiveChange}/>\n                                    Active\n                                </Typography> */}\n                            </Stack>\n\n                            <LoadingButton\n                                fullWidth\n                                size=\"large\"\n                                type=\"submit\"\n                                variant=\"contained\"\n                                loading={isSubmitting}\n                            >\n                                Create Requisition Template\n                            </LoadingButton>\n                        </Stack>\n                    </Form>\n                </FormikProvider>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/users/CreateEMPUserForm.js",["1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639","1640","1641"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,Checkbox,\n    Link, Stack, TextField, Typography,\n    InputAdornment, MenuItem\n}\n    from '@mui/material';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport * as constants from 'src/utils/constants';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport { sortBy } from 'lodash';\n\nexport default function CreateEMPUserForm() {\n\n    const [selectRoleData , setSelectRoleData] = useState([]);\n    const { enqueueSnackbar } = useSnackbar();\n    const hrToken = localStorage.getItem(\"authToken\");\n    var showIntTech = 0;\n    const navigate = useNavigate();\n    const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n    const [EmployeeData, setEmployeeData] = useState([]);\n\n    useEffect(() => {\n        getEmployeeList();\n        getIntTech();\n        getRoles();\n        getBU();\n    }, [])\n\n    // get Business Units\n    const [buData, setBUData] = useState([])\n    const getBU = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/business-units/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setBUData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };   \n\n    // get Roles\n    const [RolesData, setRolesData] = useState([])\n    const getRoles = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/roles/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRolesData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };    \n\n    // get Technologies\n    const [IntTechData, setIntTechData] = useState([])\n    const getIntTech = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/tech-stack/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            let techStackList = response.data.data\n            let sortedList = sortBy(techStackList, \"stack_priority\")\n            setIntTechData(sortedList)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };  \n\n    // is_active state\n    const [checked, setChecked] = useState(true);\n    const handleIsActiveChange = event =>{  \n        setChecked(event.target.checked);\n    };\n\n    const getEmployeeList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"employee/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const EmployeeData = getEmployeeArray(response.data.data)\n                setEmployeeData(EmployeeData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const callCreateEmployee = async (formValues) => {\n\n        var new_mobile_no = \"+91\" + formValues.Mobile_no;\n        var bodyFormData = new FormData();\n\n        bodyFormData.append(\"first_name\", formValues.FirstName);\n        bodyFormData.append(\"last_name\", formValues.LastName);\n        bodyFormData.append(\"email\", formValues.Email);\n        bodyFormData.append(\"mobile\", new_mobile_no);\n        bodyFormData.append(\"gender\", formValues.Gender);\n        bodyFormData.append(\"dob\", formValues.DateOfBirth);\n        bodyFormData.append(\"is_active\",checked);\n        bodyFormData.append(\"role_id\", formValues.Roles);\n        bodyFormData.append(\"bu_group_id\", formValues.BU);\n        bodyFormData.append(\"interview_tech_id\", formValues.IntTech);\n\n        await apiInstance({\n            method: \"post\",\n            url: \"employee/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: bodyFormData,\n        })\n            .then(async function (response) {                \n                enqueueSnackbar(response.data?.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/empusers\", { replace: true });\n            })\n            .catch(function (error) {\n                let error_msg_key = Object.keys(error.response.data)[0]\n                let err_msg = error.response.data?.[error_msg_key]\n\n                enqueueSnackbar(err_msg, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n\n    const getEmployeeArray = (EmployeeData) =>\n        EmployeeData.map((EmployeeObj) => ({\n            pk: EmployeeObj.id,\n            UserName: EmployeeObj.User\n        }));\n\n\n    const EmployeeSchema = Yup.object().shape({\n        Mobile_no: Yup.string()\n            .matches(phoneRegExp, 'Mobile Number is not valid')\n            .min(10, 'Mobile Number must be of 10 digit')\n            .max(10, 'Mobile Number must be of 10 digit')\n            .required('Mobile Number is required'),\n        FirstName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for first name \")\n            .required(\"First name required\"),\n        LastName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for last name \")\n            .required(\"Last name required\"),\n        Email: Yup.string()\n            .email(\"Email must be a valid email address\")\n            .required(\"Email is required\"),\n        IsActive: Yup.bool(),\n        IntTech: Yup.string(),\n        BU: Yup.string()\n            .required(\"Business Units is required.\"),\n        DateOfBirth: Yup.date()\n            .required('DOB is required'),\n        Gender: Yup.string(),\n        Roles: Yup.string()\n        .required('Role is required'),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            FirstName: '',\n            LastName: '',\n            Email: '',\n            Mobile_no: '',\n            Gender: '',\n            IsActive: '',\n            DateOfBirth: '',\n            IntTech: '',\n            Roles: '',\n            BU: '',\n            \n        },\n        validationSchema: EmployeeSchema,\n        onSubmit: (values) => {\n            callCreateEmployee(values)\n        }\n    });\n\n\n    const thisEMPRoleData = RolesData.map((items) => { if(items.role_name == \"BU_HEAD\" || items.role_name == \"OnBoarding_HR\" || items.role_name == \"NON_TECH_INTERVIEWER\"  || items.role_name == \"TECH_INTERVIEWER\"  || items.role_name == \"RMG\" || items.role_name == \"Requisitioner\"){ return items } })\n    const EMPRoleData = thisEMPRoleData.filter(function (el) { return el != null; });\n\n\n    //------------------------Functions-------------------------------\n\n    // function handleAssignRole(){\n    //     const thisSelectRole = EMPRoleData.map((item) => { if(item.id == selectRoleData){return item}})\n    //     const thisRole = thisSelectRole.filter(function (el) { return el != null; });\n    //     if(thisRole?.[0]?.role_name == \"BU_HEAD\" || thisRole?.[0]?.role_name == \"RMG\" || thisRole?.[0]?.role_name == \"NON_TECH_INTERVIEWER\"){\n    //         showIntTech = 1;\n    //     }\n    // }\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue } = formik;\n\n\n    return (\n        <Page title=\"Employee\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/empusers\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Create Employee\n                </Typography>\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2 }} variant=\"outlined\" style={{ border: \"none\", boxShadow: \"none\" }}>\n                            <CardContent sx={{ mb: 5 }}>    \n                                <Typography variant=\"h6\" color=\"#aaaa55\" fontStyle=\"italic\" gutterBottom>\n                                    <div style={{float: \"left\", width: \"50%\", marginTop: \"20px\"}}>\n                                        Employee Details\n                                    </div>\n                                    \n                                </Typography>\n                            </CardContent>\n                            <CardContent>\n                            <Stack spacing={3}>\n                                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"First Name\"\n                                        {...getFieldProps('FirstName')}\n                                        error={Boolean(touched.FirstName && errors.FirstName)}\n                                        helperText={touched.FirstName && errors.FirstName}\n\n                                    >\n                                    </TextField>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Last Name\"\n                                        {...getFieldProps('LastName')}\n                                        error={Boolean(touched.LastName && errors.LastName)}\n                                        helperText={touched.LastName && errors.LastName}\n                                    >\n                                    </TextField>\n                                    {<TextField\n                                        fullWidth\n                                        label=\"Email\"\n                                        {...getFieldProps('Email')}\n                                        error={Boolean(touched.Email && errors.Email)}\n                                        helperText={touched.Email && errors.Email}\n                                    >\n                                    </TextField>}\n                                </Stack>\n                                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Mobile\"\n                                        {...getFieldProps('Mobile_no')}\n                                        InputProps={{\n                                            startAdornment: <InputAdornment position=\"start\">\n                                                +91\n                                            </InputAdornment>,\n                                        }}\n                                        error={Boolean(touched.Mobile_no && errors.Mobile_no)}\n                                        helperText={touched.Mobile_no && errors.Mobile_no}\n                                    >\n                                    </TextField>\n                                    <TextField\n                                        fullWidth\n                                        type = \"date\"\n                                        label=\"Date of Birth\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        {...getFieldProps('DateOfBirth')}\n\n                                        error={Boolean(touched.DateOfBirth && errors.DateOfBirth)}\n                                        helperText={touched.DateOfBirth && errors.DateOfBirth}\n                                    >\n                                    </TextField>\n                                </Stack>\n                                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                 <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Role\"\n                                    {...getFieldProps('Roles')}\n                                    // onClick={handleAssignRole}\n                                >\n                                {EMPRoleData.map((unit) => (\n                                    <MenuItem key={unit.id} value={unit.id} onClick={(e) => {setSelectRoleData(unit.id)}}>{unit.role_name}</MenuItem>\n                                ))}\n                                </TextField>\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Interview Technology\"\n                                    {...getFieldProps(\"IntTech\")}\n                                    error={Boolean(touched.IntTech && errors.IntTech)}\n                                    helperText={touched.IntTech && errors.IntTech}\n                                >\n                                    {IntTechData.map((unit) => (\n                                        <MenuItem key={unit.id} value={unit.id}>{unit.tech_stack_name}</MenuItem>\n                                    ))}\n                                </TextField>\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Business Units\"\n                                    {...getFieldProps(\"BU\")}\n                                    error={Boolean(touched.BU && errors.BU)}\n                                    helperText={touched.BU && errors.BU}\n                                >\n                                    {buData.map((unit) => (\n                                        <MenuItem key={unit.id} value={unit.id}>{unit.bu_name}</MenuItem>\n                                    ))}\n                                </TextField>\n                            </Stack>\n                            <Stack spacing={2} alignContent=\"center\" justifyContent=\"center\">\n                                <div role=\"group\" >\n                                    <Stack\n                                        direction={{ xs: \"column\", sm: \"row\" }}\n                                        spacing={3}\n                                    >\n                                        <div id=\"gender-radio-group\" style={{ color: '#637381' }}> Gender </div>\n                                            <label>\n                                                <Field type=\"radio\" name=\"Gender\" value=\"MALE\" />\n                                            &nbsp; Male\n                                            </label>\n                                            <label>\n                                                <Field type=\"radio\" name=\"Gender\" value=\"FEMALE\" />\n                                            &nbsp; Female\n                                            </label>\n                                    </Stack>\n                                    <ErrorMessage name=\"Gender\">\n                                        {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"14px\" }}>{msg}</span>}\n                                    </ErrorMessage>\n                                </div>\n                             {/* ----- Is Active  -----*/}\n                                <Typography>\n                                    <Checkbox onChange={handleIsActiveChange}/>\n                                    Active\n                                </Typography>\n                            </Stack>  \n                        </Stack>\n                    </CardContent>\n                        </Card>\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n                        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} > Add Employee </LoadingButton>\n                    </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}\n\n\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/CreateJobForm.js",["1642","1643","1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654","1655","1656"],"import React, { useEffect } from \"react\";\nimport * as Yup from \"yup\";\nimport { Formik, Form, FormikProvider, Field, useFormik } from \"formik\";\nimport { useState, } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { ListItemText, Container, Stack, Typography, Link, TextField, FormControlLabel, Select,MenuItem, Checkbox, FormControl, InputLabel } from '@mui/material';\n// components\nimport Page from '../../Page';\n//\nimport { LoadingButton } from \"@mui/lab\";\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport * as constants from \"src/utils/constants\";\nimport { apiInstance } from \"src/utils/apiAuth\";\n\n// ----------------------------------------------------------------------\n\n\nexport default function CreateJobForm() {\nconst { enqueueSnackbar} = useSnackbar();\nconst navigate = useNavigate();\nconst [technologyData, setTechnologyData] = useState([])\nconst technologyLoad = () => {\n  const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n  .then((response) => {\n      setTechnologyData(response.data.data)\n  })\n  .catch((e) => console.log('something went wrong :(', e));\n};\n\nconst [officeLocationData, setOfficeLocationData] = useState([])\nconst getOfficeLocation = () => {\n  const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/office-locations/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n  .then((response) => {\n    setOfficeLocationData(response.data.data)\n  })\n  .catch((e) => console.log('something went wrong :(', e));\n};\n\nconst [categoryData, setCategoryData] = useState([])\nconst getCategory = () => {\n  const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-category/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n  .then((response) => {\n    setCategoryData(response.data.data)\n  })\n  .catch((e) => console.log('something went wrong :(', e));\n};\n\n  useEffect(() => {\n    technologyLoad()\n    getOfficeLocation()\n    getCategory()\n  }, [])\n\n  const [openFilter, setOpenFilter] = useState(false);\n\n  const callJobPostApi = (job_name, job_cat_id, location_id, primary_technology_id, technology_id, min_exp, max_exp, skills, requirements, responsibilities, description, total_openings, is_active) => {\n\n    apiInstance({\n      method: 'post',\n      url: '/jobs/',\n      headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`},\n      data: {\n        \"job_name\": job_name,\n        \"job_cat_id\": job_cat_id,\n        \"primary_technology\": primary_technology_id,\n        \"location_id\": location_id,\n        \"technology_id\": technology_id,\n        \"min_exp\": min_exp,\n        \"max_exp\": max_exp,\n        \"skills\": skills,\n        \"requirements\": requirements,\n        \"responsibility\": responsibilities,\n        \"description\": description,\n        \"total_openings\": total_openings,\n        \"is_active\": is_active\n      }\n    }).then(function (response) {\n\n      if (response.status == 200) {\n        enqueueSnackbar(\"Job created successfully !!\", {\n          anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                        },\n          variant: 'success',\n          autoHideDuration: 1500,\n        });\n        navigate('/resumeX/create-jobs', {replace: true});\n      }\n\n    })\n    .catch(function (error) {\n    })\n  }\n\n  const CreateJobFormSchema = Yup.object().shape({\n    // id: Yup.string()\n    // .min(1, \"Too Short!\")\n    // .max(50, \"Too Long!\")\n    // .required(\"ID required\"),\n    // name: Yup.string()\n    //   .min(2, \"Too Short!\")\n    //   .max(50, \"Too Long!\")\n    //   .required(\"Name is required\"),\n    // category: Yup.string()\n    // .min(2, \"Too Short!\")\n    // .max(50, \"Too Long!\")\n    // .required(\"Category is required\"),\n    // technology: Yup.string()\n    // .min(2, \"Too Short!\")\n    // .max(50, \"Too Long!\")\n    // .required(\"Technology is required\"),\n    // minimum_required_experience: Yup.string()\n    //   .min(2, \"Too Short!\")\n    //   .max(50, \"Too Long!\")\n    //   .required(\"Minimum Experience is required\"),\n    //   maximum_required_experience: Yup.string()\n    //   .min(2, \"Too Short!\")\n    //   .max(50, \"Too Long!\")\n    //   .required(\"Maximum Experience is required\"),\n    // job_location: Yup.string().required(\"Job Location is required\"),\n    // skills: Yup.string().required(\"Skills are required\"),\n    // requirements: Yup.string().required(\"Requirements are required\"),\n    // responsibilities: Yup.string().required(\"Responsibilities are required\"),\n    // description: Yup.string().required(\"Description is required\"),\n    // total_openings: Yup.string().required(\"Total Openings are required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      id: '',\n      name: '',\n      category: '',\n      technology: '',\n      primary_technology: '',\n      minimum_required_experience: '',\n      maximum_required_experience: '',\n      job_location: '',\n      skills: '',\n      requirements: '',\n      responsibilities: '',\n      description: '',\n      total_openings: '',\n      is_active: '',\n      location: ''\n    },\n    validationSchema: CreateJobFormSchema,\n    onSubmit: (formValues) => {\n      let job_name = formValues.name\n      let job_cat_id = formValues.category\n      let primary_technology_id = formValues.primary_technology\n      let location_id = String(officeLocationState.location).split(',')\n      let technology_id = String(technologyState.technology).split(',')\n      let min_exp = formValues.minimum_required_experience\n      let max_exp = formValues.maximum_required_experience\n      let skills = formValues.skills\n      let requirements = formValues.requirements\n      let responsibilities = formValues.responsibilities\n      let description = formValues.description\n      let total_openings = formValues.total_openings\n      let is_active = checked\n\n      callJobPostApi(job_name, job_cat_id, location_id, primary_technology_id, technology_id, min_exp, max_exp, skills, requirements, responsibilities, description, total_openings, is_active)\n      setOpenFilter(false);\n    }\n  });\n\n  const [officeLocationState, setOfficeLocationState] = React.useState({\n    location: []\n  });\n\n  const handleOfficeLocationChange = event => {\n    // event.persist();\n    setOfficeLocationState(officeLocationState => ({\n      ...officeLocationState,\n      [event.target.name]:\n        event.target.type === \"checkbox\"\n          ? event.target.checked\n          : event.target.value\n    }));\n  };\n\n  const [technologyState, setTechnologyState] = React.useState({\n    technology: []\n  });\n\n  const handleFieldChange = event => {\n    console.log(event);\n    // event.persist();\n    setTechnologyState(technologyState => ({\n      ...technologyState,\n      [event.target.name]:\n        event.target.type === \"checkbox\"\n          ? event.target.checked\n          : event.target.value\n    }));\n  };\n\n  const [checked, setChecked] = React.useState(true);\n  const handleIsActiveChange = event =>{\n    setChecked(event.target.checked);\n  };\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n \n  return (\n    <Page title=\"Dashboard: Hr\">\n      <Container>  \n        <Link to=\"/resumeX/create-jobs\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n        </Link>\n\n        <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n          Create Job\n        </Typography>\n\n        <Stack\n          direction=\"row\"\n          flexWrap=\"wrap-reverse\"\n          alignItems=\"center\"\n          justifyContent=\"flex-end\"\n          sx={{ mb: 5 }}\n        >\n        </Stack>\n\n        <FormikProvider value={formik}>\n            <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                <Stack spacing={3}>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    {/* --------------------- ID --------------------- */}\n                    <TextField\n                    fullWidth\n                    required\n                    label=\"ID\"\n                    {...getFieldProps(\"id\")}\n                    // error={Boolean(touched.id && errors.id)}\n                    // helperText={touched.id && errors.id}\n                    />\n                    \n                    {/* --------------------- Name --------------------- */}\n                    <TextField\n                    fullWidth\n                    required\n                    label=\"Name\"\n                    {...getFieldProps(\"name\")}\n                    // error={Boolean(touched.name && errors.name)}\n                    // helperText={touched.name && errors.name}\n                    />\n\n                    {/* --------------------- Category --------------------- */}\n                    <TextField\n                        fullWidth\n                        required\n                        select\n                        label=\"Category\"\n                        {...getFieldProps(\"category\")}\n                        // error={Boolean(touched.category && errors.category)}\n                        // helperText={touched.category && errors.category}\n                        >\n                      {categoryData.map((category) => (\n                        <MenuItem key={category.id} value={category.id}>{category.job_category_name}</MenuItem>\n                      ))}\n                    </TextField>\n\n                      {/* --------------------- Primary Technology --------------------- */}\n                      <TextField\n                        fullWidth\n                        required\n                        select\n                        label=\"Primary Technology\"\n                        {...getFieldProps(\"primary_technology\")}\n                        // error={Boolean(touched.primary_technology && errors.primary_technology)}\n                        // helperText={touched.primary_technology && errors.primary_technology}\n                        >\n                      {technologyData.map((technology) => (\n                        <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                      ))}\n                    </TextField>\n                </Stack>\n\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                <TextField\n                      fullWidth\n                      required\n                      select\n                      label=\"Secondary Technology\"\n                      multiple\n                      value= {technologyState.technology}\n                      {...getFieldProps(\"technology\")}\n                      // error={technologyState.technology.length===0 ? ((touched.technology && errors.technology)) : \"\"}\n                      // helperText={touched.technology && errors.technology}\n                      SelectProps={{\n                        multiple: true,\n                        value: technologyState.technology,\n                        onChange: handleFieldChange\n                      }}\n                    >\n                      {technologyData.map((technology) => (\n                        <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                      ))}\n                    </TextField>\n                    \n                    <TextField\n                      fullWidth\n                      required\n                      select\n                      label=\"Office Location\"\n                      multiple\n                      // required\n                      value= {officeLocationState.location}\n                      {...getFieldProps(\"location\")}\n                      // error={technologyState.userRoles.length===0 ? ((touched.userRoles && errors.userRoles)) : \"\"}\n                      // helperText={touched.userRoles && errors.userRoles}\n                      SelectProps={{\n                        multiple: true,\n                        value: officeLocationState.location,\n                        onChange: handleOfficeLocationChange\n                      }}\n                    >\n                      {officeLocationData.map((location) => (\n                        <MenuItem key={location.id} value={location.id}>{location.office_location}</MenuItem>\n                      ))}\n                    </TextField>\n\n                    <TextField\n                      fullWidth\n                      required\n                      label=\"Total Openings\"\n                      {...getFieldProps(\"total_openings\")}\n                      // error={Boolean(touched.total_openings && errors.total_openings)}\n                      // helperText={touched.total_openings && errors.total_openings}\n                    />\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                <TextField\n                      fullWidth\n                      required\n                      select\n                      label=\"Minimum Experience Required\"\n                      {...getFieldProps(\"minimum_required_experience\")}\n                      // error={Boolean(touched.minimum_required_experience && errors.minimum_required_experience)}\n                      // helperText={touched.minimum_required_experience && errors.minimum_required_experience}\n                      >\n                      <MenuItem key={1} value=\"0.00\">0.00</MenuItem>\n                      <MenuItem key={2} value=\"0.06\">0.06</MenuItem>\n                      <MenuItem key={3} value=\"1.00\">1.00</MenuItem>\n                      <MenuItem key={4} value=\"1.05\">1.05</MenuItem>\n                      <MenuItem key={5} value=\"2.00\">2.00</MenuItem>\n                      <MenuItem key={6} value=\"2.05\">2.05</MenuItem>\n                      <MenuItem key={7} value=\"3.00\">3.00</MenuItem>\n                      <MenuItem key={8} value=\"3.05\">3.05</MenuItem>\n                      <MenuItem key={9} value=\"4.00\">4.00</MenuItem>\n                      <MenuItem key={10} value=\"4.05\">4.05</MenuItem>\n                      <MenuItem key={11} value=\"5.00\">5.00</MenuItem>\n                    </TextField>\n\n                    <TextField\n                      fullWidth\n                      select\n                      label=\"Maximum Experience Required\"\n                      {...getFieldProps(\"maximum_required_experience\")}\n                      // error={Boolean(touched.maximum_required_experience && errors.maximum_required_experience)}\n                      // helperText={touched.maximum_required_experience && errors.maximum_required_experience}\n                      >\n                      <MenuItem key={1} value=\"0.00\">0.00</MenuItem>\n                      <MenuItem key={2} value=\"0.06\">0.06</MenuItem>\n                      <MenuItem key={3} value=\"1.00\">1.00</MenuItem>\n                      <MenuItem key={4} value=\"1.05\">1.05</MenuItem>\n                      <MenuItem key={5} value=\"2.00\">2.00</MenuItem>\n                      <MenuItem key={6} value=\"2.05\">2.05</MenuItem>\n                      <MenuItem key={7} value=\"3.00\">3.00</MenuItem>\n                      <MenuItem key={8} value=\"3.05\">3.05</MenuItem>\n                      <MenuItem key={9} value=\"4.00\">4.00</MenuItem>\n                      <MenuItem key={10} value=\"4.05\">4.05</MenuItem>\n                      <MenuItem key={11} value=\"5.00\">5.00</MenuItem>\n                    </TextField>\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    <TextField\n                      fullWidth\n                      required\n                      label=\"Skills\"\n                      multiline\n                      rows={2}\n                      maxRows={4}\n                      {...getFieldProps(\"skills\")}\n                      // error={Boolean(touched.skills && errors.skills)}\n                      // helperText={touched.skills && errors.skills}\n                    />\n\n                    <TextField\n                      fullWidth\n                      required\n                      label=\"Requirements\"\n                      multiline\n                      rows={2}\n                      maxRows={4}\n                      {...getFieldProps(\"requirements\")}\n                      // error={Boolean(touched.requirements && errors.requirements)}\n                      // helperText={touched.requirements && errors.requirements}\n                    />\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    <TextField\n                      fullWidth\n                      required\n                      label=\"Responsibilities\"\n                      multiline\n                      rows={2}\n                      maxRows={4}\n                      {...getFieldProps(\"responsibilities\")}\n                      // error={Boolean(touched.responsibilities && errors.responsibilities)}\n                      // helperText={touched.responsibilities && errors.responsibilities}\n                    />\n\n                    <TextField\n                      fullWidth\n                      required\n                      label=\"Description\"\n                      multiline\n                      rows={2}\n                      maxRows={4}\n                      {...getFieldProps(\"description\")}\n                      // error={Boolean(touched.description && errors.description)}\n                      // helperText={touched.description && errors.description}\n                    />\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2} justifyContent=\"center\">\n                    <Typography>\n                    <Checkbox checked={checked} onChange={handleIsActiveChange}/>\n                    Active\n                    </Typography>\n                </Stack>\n\n                <LoadingButton\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                    loading={isSubmitting}\n                >\n                    Create Job\n                </LoadingButton>\n                </Stack>\n            </Form>\n        </FormikProvider>\n      </Container>\n    </Page>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/EmployeeCalendar.js",["1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667","1668","1669","1670","1671","1672","1673"],"import React, { useEffect } from \"react\";\nimport { useState } from 'react';\nimport Page from '../../Page';\nimport * as Yup from \"yup\";\nimport { Button, Container, Dialog, DialogTitle, DialogContent, DialogActions, MenuItem, LinearProgress, TextField, Typography } from '@mui/material';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport FullCalendar from '@fullcalendar/react' \nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport interactionPlugin from \"@fullcalendar/interaction\"\nimport timeGridPlugin from '@fullcalendar/timegrid';\n\nimport axios from 'axios';\n\nimport { TimePicker } from '@mui/lab';\n\nimport \"../calendar/calendarCustom.css\"\nimport {useSnackbar} from 'notistack';\nimport * as constants from \"src/utils/constants\";\n\nexport default function EmployeeCalendar() {\n    const { enqueueSnackbar} = useSnackbar();\n    const events = [\n    { title: 'Gateway', date: '2022-03-01', allDay: 'false'},\n    { title: 'event 2', date: '2022-03-02' },\n    { title: 'ResumeX - DSM', start: '2022-03-21T07:00:00Z', end: '2022-03-21T08:00:00Z'},\n    { title: 'ICT - NL', start: '2022-03-06T10:00:00.000Z', end: '2022-03-07T06:00:00.000Z', color: \"lightblue\"},\n    { title: 'ICT - Norway', startTime: '10:00:00.000Z', endTime: '10:30:00.000Z', startRecur: '2022-03-08', endRecur: '2022-03-31', color: '#d9648a', borderColor: \"black\", display: 'false'},\n    { title: 'ICT - Finland', startTime: '07:00:00Z', endTime: '08:00:00Z', startRecur: '2022-03-08', endRecur: '2022-03-31', color: '#db4040', borderColor: \"black\", display: 'false'},\n    ]\n\n    // employee technology select dialog\n    const [empTechDialog, setEmpTechDialog] = useState(false)\n\n    // get and save employee data\n    const [employeeData, setEmployeeData] = useState([])\n    const employeeDataLoad = () => {\n        const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee-data/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setEmployeeData(response.data.data)\n            setEmpTechDialog(response.data.data.interview_tech ? false : true)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }\n\n    // employee technology state\n    const [empTechnology, setEmpTechnology] = useState([])\n\n    const EmpTechChange = event => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n        const data = {employee_tech: event.target.value}\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/employee/\" + employeeData.id + '/', data, {headers})\n        .then(function (response) {\n              if (response.status == 200) {\n                enqueueSnackbar(\"Technology updated successfully !!\", {\n                  anchorOrigin: {\n                                  vertical: 'top',\n                                  horizontal: 'right',\n                                },\n                  variant: 'success',\n                  autoHideDuration: 1000,\n                });\n                window.location.reload(false);\n              }\n            })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n        setEmpTechnology(event.target.value)\n    }\n\n    const [technologyData, setTechnologyData] = useState([])\n    const technologyLoad = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n    .then((response) => {\n        setTechnologyData(response.data.data)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n        \n    const [employeeEventData, setEmployeeEventData] = useState([])\n\n    const employeeEventsLoad = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee-events/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n    .then((response) => {\n        setEmployeeEventData(response.data.data)\n        setIsLoading(false)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    useEffect(() => {\n        technologyLoad()\n        employeeEventsLoad()\n        employeeDataLoad()\n      }, [])\n\n    const [eventData, setEventData] = useState(events)\n\n    // dialog edit state\n    const [isEdit, setIsEdit] = useState(false);\n    const [editDialogData, setEditDialogData] = useState([{id: '', title: '', start: '', end: ''}]);\n\n    // create event dialog\n    const [isCreate, setIsCreate] = useState(false);\n    const [createDialogData, setCreateDialogData] = useState([{start: '', end: ''}]);\n\n    const handleDateClick = (arg) => { // select one date\n    if (arg?.view.type==\"dayGridMonth\")\n        alert(\"Please go to week view or day view in order to book your time slots.\") \n    }\n\n    const handleEventClick = (props) => { // select or hover event\n        let data, startRecur, endRecur, startTime, endTime, endRecurDate = \"\"\n        let start, end = \"\"\n\n        // check for recurring event and fetch datetime accordingly\n        if (props.event._def.recurringDef) {\n            data = props.event._def.recurringDef\n\n            startRecur = data?.typeData?.startRecur?.toLocaleString(\"en-In\", { year: 'numeric', month: '2-digit', day: '2-digit',})?.replaceAll('/', '-')\n\n            // substract 1 day from endRecur (Because by default there is one date incremented)\n            endRecurDate = new Date(data?.typeData?.endRecur)\n            endRecurDate.setDate(endRecurDate.getDate() - 1)\n            endRecur = endRecurDate.toLocaleString(\"en-In\", { year: 'numeric', month: '2-digit', day: '2-digit',})?.replaceAll('/', '-')\n\n            startTime = new Date(data ? data.typeData.startTime.milliseconds : '0')?.toISOString()?.slice(11,19)\n            endTime = new Date(data ? data.typeData.endTime.milliseconds : '0')?.toISOString()?.slice(11,19)\n\n            start = startRecur?.split('-').reverse().join('-') + \"T\" + startTime + \"+05:30\"\n            end = endRecur?.split('-').reverse().join('-') + \"T\" + endTime + \"+05:30\"\n        }\n        else {\n            start = props.event.startStr\n            end = props.event.endStr\n        }\n\n    setIsEdit(true)\n    setEditDialogData([{id: props.event.id, title: props.event.title, start: start, end: end}])\n    }\n\n    const handleEditEvent = () => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n        const data = {\n            event_id: editDialogData[0].id, \n            title: editDialogData[0].title, \n            start: editDialogData[0].start.substring(0, 19) + 'Z', \n            end: editDialogData[0].end.substring(0, 19) + 'Z'\n        }\n        const apiInstance = axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee-edit-event/', data, {headers})\n        .then(function (response) {\n          if (response.status == 200) {\n            enqueueSnackbar(\"Event updated successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1000,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const handleDeleteEvent = () => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n        const data = {instanceStart: editDialogData[0].start.substring(0, 10).split('-').reverse().join('-'), event_id: editDialogData[0].id}\n        const apiInstance = axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee-events/', data, {headers})\n        .then(function (response) {\n          if (response.status == 200) {\n            enqueueSnackbar(\"Event deleted successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1000,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const handleSelect = (arg) => { // select multiple dates or time\n    setIsCreate(arg?.view.type==\"dayGridMonth\" ? false: true)\n    const startDate = arg.start.toLocaleDateString(\"en-In\", { year: 'numeric', month: '2-digit', day: '2-digit',})?.replaceAll('/', '-')\n    const startTime = arg.start.toLocaleTimeString(\"en-In\", { hour12: false, hour: '2-digit', minute:'2-digit' })\n    const start = startDate.split('-').reverse().join('-') + \"T\" + startTime\n\n    const endDate = arg.end.toLocaleDateString(\"en-In\", { year: 'numeric', month: '2-digit', day: '2-digit',})?.replaceAll('/', '-')\n    const endTime = arg.end.toLocaleTimeString(\"en-In\", { hour12: false, hour: '2-digit', minute:'2-digit' })\n    const end = endDate.split('-').reverse().join('-') + \"T\" + endTime\n    setCreateDialogData([{start: start, end: end}])\n\n\n    // setEventData([...eventData, {title: 'event 3', start: (arg.start).toISOString(), end: (arg.start).toISOString()}])\n    // setEventData([...eventData, {title: 'event 3', date: '2022-03-04'}])\n    }\n\n    const [openFilter, setOpenFilter] = useState(false);\n    \n    const CreateEventFormSchema = Yup.object().shape({\n        eventName: Yup.string()\n        .min(2, \"Too Short!\")\n        .max(50, \"Too Long!\")\n        .required(\"Event Name is required\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            eventName: '',\n          },\n          validationSchema: CreateEventFormSchema,\n          onSubmit: (formValues) => {\n            const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n            }\n            const data = {title: formValues.eventName, start: createDialogData[0].start, end: createDialogData[0].end}\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/employee-create-event/\", data, {headers})\n            .then(function (response) {\n                  if (response.status == 200) {\n                    enqueueSnackbar(\"Event created successfully !!\", {\n                      anchorOrigin: {\n                                      vertical: 'top',\n                                      horizontal: 'right',\n                                    },\n                      variant: 'success',\n                      autoHideDuration: 1000,\n                    });\n                    window.location.reload(false);\n                  }\n                })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n\n            setIsCreate(false)\n            setOpenFilter(false);\n          }\n        });\n\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n    \n    return (\n        <Page title=\"Employee Calendar | ResumeX\">\n            <Container>\n                <Typography align=\"center\" variant=\"h3\" sx={{ mb: 2 }}>\n                    Calendar\n                </Typography>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mb: 8, color: \"text.secondary\"}}>\n                    Give your availability slots to conduct the Interview !\n                </Typography>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                ) : (\n                \n                <div>\n                {/* ------------------------- select employee technology dialog -------------------------------- */}\n                <Dialog open={empTechDialog} onClose={() => {setIsEdit(false)}}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, ml: 2, mr: 2}}>\n                        Select your primary technology\n                    </Typography>\n                    <DialogContent  sx={{ mt: 2 }}>\n                        <TextField\n                            fullWidth\n                            select\n                            label=\"Technology\"\n                            value={empTechnology}\n                            SelectProps={{\n                                multiple: false,\n                                value: empTechnology,\n                                onChange: EmpTechChange\n                              }}\n                            >\n                            {technologyData.map((technology) => (\n                                <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                            ))}\n                            </TextField>\n                    </DialogContent>\n                </Dialog>\n\n                {/* ------------------------- edit event dialog -------------------------------- */}\n                <Dialog open={isEdit} onClose={() => {setIsEdit(false)}}>\n                    <DialogTitle style={{textAlign: \"center\"}}>Edit Event</DialogTitle>\n                    <DialogContent>\n                    <TextField\n                        id=\"standard-basic\"\n                        variant=\"standard\"\n                        value={editDialogData[0].title}\n                        onChange={(event) => setEditDialogData([{id: editDialogData[0].id, title: event.target.value,\n                            start: editDialogData[0].start, end: editDialogData[0].end}])}\n                        fullWidth\n                    />\n                    </DialogContent>\n                    <DialogContent>\n                    <TextField\n                        id=\"datetime-local\"\n                        label=\"Start\"\n                        type=\"datetime-local\"\n                        value={editDialogData[0]?.start?.substring(0, 16).toString()}\n                        onChange={(event) => setEditDialogData([{id: editDialogData[0].id, title: editDialogData[0].title,\n                        start: event.target.value, end: editDialogData[0].end}])}\n                        fullWidth\n                    />\n                    </DialogContent>\n                    <DialogContent>\n                        <TextField\n                        id=\"datetime-local\"\n                        label=\"End\"\n                        type=\"datetime-local\"\n                        value={editDialogData[0]?.end?.substring(0, 16).toString()}\n                        onChange={(event) => setEditDialogData([{id: editDialogData[0].id, title: editDialogData[0].title,\n                        start: editDialogData[0].start, end:  event.target.value}])}\n                        fullWidth\n                    />\n                    <DialogContent sx={{ fontSize: \"12px\", color: \"text.secondary\"}}>\n                     <p>Note:</p>\n                     Changes will be applied to all the events in case of recurring.\n                    </DialogContent>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleDeleteEvent}>Delete</Button> \n                        <Button variant=\"contained\" size=\"medium\" type=\"submit\" onClick={handleEditEvent}>Update</Button>\n                    </DialogActions>\n                </Dialog>\n\n                {/* ------------------------- create event dialog -------------------------------- */}\n                <Dialog open={isCreate} onClose={() => {setIsCreate(false)}}>\n                    <DialogTitle style={{textAlign: \"center\"}}>Add Event</DialogTitle>\n                    <FormikProvider value={formik}>\n                        <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <DialogContent>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"eventName\"\n                            label=\"Event Name\"\n                            fullWidth\n                            variant=\"standard\"\n                            {...getFieldProps(\"eventName\")}\n                            error={Boolean(touched.eventName && errors.eventName)}\n                            helperText={touched.eventName && errors.eventName}\n                        />\n                        </DialogContent>\n                        <DialogContent>\n                        <TextField\n                            id=\"datetime-local\"\n                            label=\"Start\"\n                            type=\"datetime-local\"\n                            value={createDialogData[0]?.start}\n                            onChange={(event) => setCreateDialogData([{start: event.target.value, end: createDialogData[0]?.end}])}\n                            fullWidth\n                        />\n                        </DialogContent>\n                        <DialogContent>\n                        <TextField\n                            id=\"datetime-local\"\n                            label=\"End\"\n                            type=\"datetime-local\"\n                            value={createDialogData[0]?.end}\n                            onChange = {(event) => setCreateDialogData([{start: createDialogData[0]?.start, end: event.target.value}])}\n                            fullWidth\n                            \n                        />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={() => setIsCreate(false)}>Cancel</Button>\n                            <Button variant=\"contained\" size=\"medium\" type=\"submit\">Add </Button>\n                        </DialogActions>\n                        </Form>\n                    </FormikProvider>\n                </Dialog>\n\n                <FullCalendar\n                plugins={[ dayGridPlugin, timeGridPlugin, interactionPlugin ]}\n                initialView=\"timeGridWeek\"\n                dateClick={handleDateClick}\n                events={employeeEventData}\n                eventClick={handleEventClick}\n                select={handleSelect}\n                selectable='true'\n                headerToolbar={{\n                center: \"title\", \n                left: \"dayGridMonth, timeGridWeek, timeGridDay\",\n                end: 'today prev,next'\n                }}\n                eventOverlap='false'\n                navLinks='true'\n                dragScroll='true'\n                editable='true'\n                eventResizableFromStart='true'\n                eventBackgroundColor='lightpurple'\n                eventBorderColor='black'\n            />\n\n            </div>\n            )}\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/profile/ProfileUpdateForm.js",["1674","1675","1676","1677","1678","1679","1680","1681","1682","1683","1684","1685","1686","1687","1688","1689","1690","1691","1692","1693"],"import React, { useEffect } from \"react\";\nimport * as Yup from \"yup\";\nimport { Formik, Form, FormikProvider, Field, useFormik } from \"formik\";\nimport { useState, } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { ListItemText, Container, Stack, Typography, Link, TextField, FormControlLabel, Select,MenuItem, Checkbox, FormControl, InputLabel } from '@mui/material';\n// components\nimport Page from '../../../Page';\n//\nimport { LoadingButton } from \"@mui/lab\";\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport * as constants from \"src/utils/constants\";\nimport { constantCase } from \"change-case\";\n\n// ----------------------------------------------------------------------\n\nexport default function ProfileUpdateForm() {\nconst { enqueueSnackbar} = useSnackbar();\nconst navigate = useNavigate();\n// const [candidateData, setCandidateData] = useState([])\n// const getCandidateDetails = () => {\n//   const apiInstance = axios.get('http://127.0.0.1:8000/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n//   .then((response) => {\n//     setCandidateData(response.data.data.user)\n//   })\n//   .catch((e) => console.log('something went wrong :(', e));\n// };\n\n  const [firstNameData, setFirstNameData]  = useState([]);\n  const getFirstName = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setFirstNameData(response.data.data.user.first_name)\n      localStorage.setItem(\"candidateFirstName\", response.data.data.user.first_name); \n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const [lastNameData, setLastNameData]  = useState([]);\n  const getLastName = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setLastNameData(response.data.data.user.last_name)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const [emailData, setEmailData]  = useState([]);\n  const getEmail = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setEmailData(response.data.data.user.email)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const [mobileData, setMobileData]  = useState([]);\n  const getMobile = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setMobileData(response.data.data.user.mobile)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const [dobData, setDOBData]  = useState([]);\n  const getDOB = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setDOBData(response.data.data.dob)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  useEffect(() => {\n    // getCandidateDetails()\n    getFirstName()\n    getLastName()\n    getEmail()\n    getMobile()\n    getDOB()\n  }, [])\n\n  const [openFilter, setOpenFilter] = useState(false);\n\n  const CreateJobFormSchema = Yup.object().shape({\n    // firstName: Yup.string()\n    // .min(1, \"Too Short!\")\n    // .max(50, \"Too Long!\")\n    // .required(\"First Name is required\"),\n    // lastName: Yup.string()\n    //   .min(2, \"Too Short!\")\n    //   .max(50, \"Too Long!\")\n    //   .required(\"Last Name is required\"),\n    // email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    // dob: Yup.string().required(\"Birth date is required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      mobile: '',\n      dob: '',\n    },\n    validationSchema: CreateJobFormSchema,\n    onSubmit: (formValues) => {\n\n    const data = {first_name: firstNameData, last_name: lastNameData, email: emailData, dob: dobData};\n    const headers = {\n      'Authorization': `Token ${localStorage.getItem('candidateToken')}`,\n    }\n\n    axios.put(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+\"/api/v1/candidate/\", data, {headers})\n        .then(function (response) {\n              if (response.status == 200) {\n                enqueueSnackbar(\"Profile updated successfully !!\", {\n                  anchorOrigin: {\n                                  vertical: 'top',\n                                  horizontal: 'right',\n                                },\n                  variant: 'success',\n                  autoHideDuration: 1500,\n                });\n                navigate('/dashboard/app', {replace: true});\n              }\n            })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n      setOpenFilter(false);\n    }\n  });\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n \n  return (\n    <Page title=\"Profile Update | ResumeX\">\n      <Container>  \n        <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\">\n          Update Profile\n        </Typography>\n\n        <Stack\n          direction=\"row\"\n          flexWrap=\"wrap-reverse\"\n          alignItems=\"center\"\n          justifyContent=\"flex-end\"\n          sx={{ mb: 5 }}\n        >\n        </Stack>\n\n        <FormikProvider value={formik}>\n            <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                <Stack spacing={3}>\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    {/* --------------------- First Name --------------------- */}\n                    <TextField\n                    fullWidth\n                    required\n                    label=\"First Name\"\n                    // {...getFieldProps(\"firstName\")}\n                    defaultValue=\"Hello World\"\n                    value={firstNameData}\n                    // error={Boolean(touched.firstName && errors.firstName)}\n                    // helperText={touched.firstName && errors.firstName}\n                    onChange={(event) => setFirstNameData(event.target.value)}\n                    />\n                    \n                    {/* --------------------- Last Name --------------------- */}\n                    <TextField\n                    fullWidth\n                    required\n                    label=\"Last Name\"\n                    {...getFieldProps(\"lastName\")}\n                    defaultValue=\"Hello World\"\n                    value={lastNameData}\n                    error={lastNameData.length===0 ? ((touched.lastName && errors.lastName)) : \"\"}\n                    // helperText={touched.lastName && errors.lastName}\n                    onChange={(event) => setLastNameData(event.target.value)}\n                    /> \n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    {/* --------------------- Mobile --------------------- */}\n                    <TextField\n                    fullWidth\n                    disabled\n                    label=\"Mobile\"\n                    {...getFieldProps(\"mobile\")}\n                    defaultValue=\"Hello World\"\n                    value={mobileData}\n                    // error={Boolean(touched.lastName && errors.lastName)}\n                    // helperText={touched.lastName && errors.lastName}\n                    onChange={(event) => setMobileData(event.target.value)}\n                    />\n                    {/* --------------------- Email --------------------- */}\n                    <TextField\n                    fullWidth\n                    required\n                    label=\"Email\"\n                    {...getFieldProps(\"email\")}\n                    defaultValue=\"Hello World\"\n                    value={emailData}\n                    // error={Boolean(touched.email && errors.email)}\n                    // helperText={touched.email && errors.email}\n                    onChange={(event) => setEmailData(event.target.value)}\n                    /> \n\n                    {/* --------------------- DOB --------------------- */}\n                    <TextField\n                    fullWidth\n                    type='date'\n                    required\n                    label=\"DOB\"\n                    {...getFieldProps(\"dob\")}\n                    defaultValue=\"Hello World\"\n                    value={dobData}\n                    // error={Boolean(touched.email && errors.email)}\n                    // helperText={touched.email && errors.email}\n                    onChange={(event) => setDOBData(event.target.value)}\n                    />\n                </Stack>\n\n                <LoadingButton\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                    loading={isSubmitting}\n                >\n                    Update\n                </LoadingButton>\n                </Stack>\n            </Form>\n        </FormikProvider>\n      </Container>\n    </Page>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/CreateCandidateForm.js",["1694","1695","1696","1697"],"import { useState, useEffect } from 'react';\nimport { Backdrop, CircularProgress } from '@mui/material';\nimport React from 'react'\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem,\n    SpeedDial, SpeedDialIcon, SpeedDialAction\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field, setFieldValue } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\n\nimport FileCopyIcon from '@mui/icons-material/FileCopyOutlined';\nimport PrintIcon from '@mui/icons-material/Print';\nimport EmailIcon from '@mui/icons-material/Email';\nimport CallIcon from '@mui/icons-material/Call';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\n\nconst actions = [\n    { icon: <FileCopyIcon />, name: 'Copy' },\n    { icon: <PrintIcon />, name: 'Print' },\n    { icon: <EmailIcon />, name: 'Email' },\n    { icon: <CallIcon />, name: 'Call' },\n];\n\nexport default function CreateCandidateForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n\n    const [statusData, setstatusData] = useState([]);\n\n    const [sourceData, setsourceData] = useState([]);\n\n    const [requisitionData, setRequisitionData] = useState([])\n\n    const [noticePeriodData, setNoticePeriodData] = useState([]);\n\n    const [recordfile, setrecordFile] = useState(null);\n\n    const [resumefile, setResumeFile] = useState(null);\n\n    const [parsedResumeData, setParsedResumeData] = useState(null);\n\n    const parseButton = React.useRef()\n\n    const [parseClicked, setParseClicked] = useState(1);\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n      };\n\n    let user = JSON.parse(localStorage.getItem(\"user\"))\n    let user_role = user.role.role_name\n\n    useEffect(() => {\n        getStatusList();\n        getSourceList();\n        getRequisitionData();\n        getNoticePeriodList();\n    }, [])\n\n    const handleRecordingUpload = (event) => {\n        const recordingFile = event.target.files[0]\n        formik.setFieldValue(\"Recording\", recordingFile);\n        setrecordFile(recordingFile)\n    };\n\n    const handleResumeUpload = (event) => {\n        const resumeFile = event.target.files[0]\n        formik.setFieldValue(\"Resume\", resumeFile);\n        setResumeFile(resumeFile)\n        setParseClicked(1)\n    };\n\n    const getStatusList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"candidate-status/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const statusData = getStatusArray(response.data.data)\n                setstatusData(statusData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const getSourceList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"candidate-source/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const sourceData = getSourceArray(response.data.data)\n                setsourceData(sourceData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n    }\n\n    const getRequisitionData = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"requisitions/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const requisiteData = getRequisiteArray(response.data.data)\n                setRequisitionData(requisiteData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n    }\n\n    const getNoticePeriodList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"notice-period/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const noticeData = getNoticePeriodArray(response.data.data)\n                setNoticePeriodData(noticeData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n    const callCreateCandidate = async (formValues) => {\n        var new_mobile_no = \"+91\" + formValues.Mobile_no;\n\n        var bodyFormData = new FormData();\n\n        bodyFormData.append(\"first_name\", formValues.FirstName);\n        bodyFormData.append(\"last_name\", formValues.LastName);\n        bodyFormData.append(\"email\", formValues.Email);\n        bodyFormData.append(\"mobile\", new_mobile_no);\n        bodyFormData.append(\"total_experience\", formValues.TotalExp);\n        bodyFormData.append(\"notice_period_id\", formValues.NoticePeriod);\n        bodyFormData.append(\"gender\", formValues.Gender);\n        bodyFormData.append(\"current_location\", formValues.CurrentLocation.toUpperCase());\n        bodyFormData.append(\"last_company\", formValues.LastCompany);\n        bodyFormData.append(\"current_ctc\", formValues.CurrentCtc);\n        bodyFormData.append(\"expected_ctc\", formValues.ExpectedCtc);\n        bodyFormData.append(\"requisition_id\", formValues.Requisition);\n        bodyFormData.append(\"status_id\", formValues.Status);\n        bodyFormData.append(\"source_id\", formValues.Source);\n        // bodyFormData.append(\"recording_file\", recordfile);\n        bodyFormData.append(\"exp_hike\", formValues.Exp_Hike);\n        bodyFormData.append(\"referred_by\", formValues.Referred_By);\n\n        if (recordfile != null){\n            bodyFormData.append(\"recording_file\", recordfile); }\n        else{\n            bodyFormData.append(\"recording_file\", \"\"); \n        }\n\n        if (resumefile != null){\n            bodyFormData.append(\"resume_file\", resumefile); }\n        else{\n            bodyFormData.append(\"resume_file\", \"\"); \n        }\n\n\n        await apiInstance({\n            method: \"post\",\n            url: \"candidate-viewset/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n                'Content-Type': \"multipart/form-data\",\n            },\n            data: bodyFormData,\n        })\n            .then(async function (response) { \n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidates\", { replace: true });\n                            //NESTED API FOR JOB APPLICATION CREATION\n                            // let candId = response?.data?.data?.id\n                            // if (resumefile != null){\n                            //     bodyFormData.append(\"resume_file\", resumefile); }\n                            // else{\n                            //     bodyFormData.append(\"resume_file\", \"\"); \n                            // }\n                            // await apiInstance({\n                            //     method: \"put\",\n                            //     url: \"candidate-viewset/\" + candId + \"/\",\n                            //     headers: {\n                            //         Authorization: \"token \" + hrToken,\n                            //         'Content-Type': \"multipart/form-data\",\n                            //     },\n                            //     data: bodyFormData,\n                            // })\n                            //     .then(async function (response) {\n                                    // enqueueSnackbar(response.data.message, {\n                                    //     anchorOrigin: {\n                                    //         vertical: 'top',\n                                    //         horizontal: 'right',\n                                    //     },\n                                    //     variant: 'success',\n                                    //     autoHideDuration: 2000,\n                                    // });\n                                    // navigate(\"/resumeX/candidates\", { replace: true });\n                            //     })\n                            //     .catch(function (error) {\n                            //         enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                            //             anchorOrigin: {\n                            //                 vertical: 'top',\n                            //                 horizontal: 'right',\n                            //             },\n                            //             variant: 'error',\n                            //             autoHideDuration: 2000,\n                            //         });\n                            // })\n            })\n            .catch(function (error) {\n                let error_msg_key = Object.keys(error.response.data)[0]\n                let err_msg = error.response.data?.[error_msg_key]\n\n                enqueueSnackbar(err_msg, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n\n    const getStatusArray = (statusData) =>\n        statusData.map((statusObj) => ({\n            pk: statusObj.id,\n            statusName: statusObj.status\n        }));\n\n    const getSourceArray = (sourceData) =>\n        sourceData.map((sourceObj) => ({\n            pk: sourceObj.id,\n            sourceName: sourceObj.source\n        }));\n\n    const getRequisiteArray = (reqData) => {\n        if(user_role === 'DRM')\n        {\n            let uid = user.pk\n            const result = reqData\n                .map(item => ({\n                    ...item,\n                    children: item.assigned_fsd_user?.filter(child => child?.member?.pk === uid)\n                }))\n                .filter(item => item.children.length > 0)\n            \n            const filteredReq = result.map((reqObj) => ({\n                pk: reqObj.id,\n                requisiteNumber: reqObj.requisite_number,\n                type: reqObj.requisite_type.req_type_name,\n                department: reqObj.department.job_category_name,\n                bu_group: reqObj.bu_group.bu_name,\n                job_name: reqObj.job_name,\n            })) \n            return filteredReq\n        }\n        else\n        {\n            let req_data = reqData.map((reqObj) => ({\n                        pk: reqObj.id,\n                        requisiteNumber: reqObj.requisite_number,\n                        type: reqObj.requisite_type.req_type_name,\n                        department: reqObj.department.job_category_name,\n                        bu_group: reqObj.bu_group.bu_name,\n                        job_name: reqObj.job_name,\n                    })) \n        \n            return req_data\n        }\n    }\n\n    const getNoticePeriodArray = (NPData) =>\n        NPData.map((NPObj) => ({\n            pk: NPObj.id,\n            notice_period: NPObj.notice_period\n        }));\n\n    const calculateExpHike = e => {   \n        let present_ctc = values.CurrentCtc\n        let demand_ctc = e.target.value\n\n        let hike = ((demand_ctc*100)/present_ctc)- 100\n        \n        setFieldValue(\"Exp_Hike\", Math.round(hike))\n    }\n\n    const CandidateSchema = Yup.object().shape({\n        Mobile_no: Yup.string()\n            .matches(phoneRegExp, 'Mobile Number is not valid')\n            .min(10, 'Mobile Number must be of 10 digit')\n            .max(10, 'Mobile Number must be of 10 digit')\n            .required('Mobile Number is required'),\n        FirstName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for first name \")\n            .required(\"First name required\"),\n        LastName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for last name \")\n            .required(\"Last name required\"),\n        CurrentLocation: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            // .matches(/^[A-Z\\s]+$/, \"Only uppercase letters are allowed for current location\")\n            .required(\"Current Location required\"),\n        Email: Yup.string()\n            .email(\"Email must be a valid email address\")\n            .required(\"Email is required\"),\n        TotalExp: Yup.string()\n            .matches(/^[0-9]{1,2}[.][0-9]{1}$/, \"Invalid Input\")\n            .required(\"Total Experience required\"),\n        NoticePeriod: Yup.string()\n            .matches(/^[0-9]+$/, \"Only numbers are allowed.\")\n            .required(\"Notice Period required\"),\n        // CurrentCtc: Yup.string()\n        //     .matches(/^[0-9]{1,2}[.][0-9]{1,2}$/, \"Invalid Input\")\n        //     .required(\"Current CTC Is required\"),\n        // ExpectedCtc: Yup.string()\n        //     .matches(/^[0-9]{1,2}[.][0-9]{1,2}$/, \"Invalid Input\")\n        //     .required(\"Expected CTC Is required\"),\n        CurrentCtc: Yup.number()\n        .required(\"Current CTC Is required\"),\n        ExpectedCtc: Yup.number()\n        .required(\"Expected CTC Is required\"),\n        Status: Yup.string()\n            .required(\"Status is required.\"),\n        LastCompany: Yup.string(),\n        Requisition: Yup.string()\n            .required(\"Requisition is required.\"),\n        Source: Yup.string()\n            .required(\"Source is required.\"),\n        Gender: Yup.string()\n            .required(\"Gender is required.\"),\n        Referred_By: Yup.string(),\n        Exp_Hike: Yup.string(),\n        Recording: Yup.mixed(),\n        Resume: Yup.mixed(),\n\n    });\n\n\n    const formik = useFormik({\n        initialValues: {\n            FirstName: '',\n            LastName: '',\n            CurrentLocation: '',\n            Email: '',\n            TotalExp: '',\n            NoticePeriod: '',\n            Mobile_no: '',\n            CurrentCtc: '',\n            ExpectedCtc: '',\n            Status: '',\n            LastCompany: '',\n            Source: '',\n            Gender: '',\n            Recording: '',\n            Resume: '',\n            Requisition: '',\n            Referred_By: '',\n            Exp_Hike: '',\n            \n        },\n        validationSchema: CandidateSchema,\n        onSubmit: (values) => {\n            // call create candidate API\n            callCreateCandidate(values)\n        }\n    });\n\n    function parseThisResume(){\n        if (parseClicked<3) {\n          setParseClicked(parseClicked+1)\n        var parseData = new FormData();\n        parseData.append(\"resume_file\", resumefile); \n        apiInstance({\n            method: \"post\",\n            url: \"parse-resume/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n                'Content-Type': \"multipart/form-data\",\n            },\n            data: parseData,\n        })  \n            .then(function (response) {\n                setParsedResumeData(response.data.data);\n                setFieldValue(\"FirstName\", parsedResumeData?.First_Name);\n                setFieldValue(\"LastName\", parsedResumeData?.Last_Name);\n                setFieldValue(\"Email\", parsedResumeData?.Email);\n                setFieldValue(\"Mobile_no\", parsedResumeData?.PhoneNo);\n                setFieldValue(\"CurrentLocation\", parsedResumeData?.City);\n                setFieldValue(\"TotalExp\", parsedResumeData?.Experience_Years + \".0\");\n                parseButton.current.click()\n            })\n            .catch(function (error) {\n                console.log(\"Error\")\n            });\n        }\n    }\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue } = formik;\n\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={72} sx={{ mb: 2 }}>\n                    <Link to=\"/resumeX/candidates\" \n                        color=\"green\" \n                        underline=\"hover\" \n                        component={RouterLink} \n                        fontSize=\"20px\"> \n                            <ArrowCircleLeftIcon fontSize=\"large\" />\n                    </Link>\n\n                    {/* <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                        Create Candidate\n                    </Typography> */}\n\n                    <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Create Candidate</h2>\n                </Stack>\n\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2 }} variant=\"outlined\" style={{ border: \"none\", boxShadow: \"none\" }}>\n                            <CardContent>\n                                <Stack  direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                <InputLabel id=\"resume-upload-label\" style={{ width: \"8%\", padding: \"8px 0px 0px 0px\" }} > Resume: </InputLabel>\n                                <input id=\"Resume\" name=\"Resume\" type=\"file\" className=\"form-control\" sx={{height: \"80%\"}} accept=\".pdf\" onChange={handleResumeUpload} />\n                                <ErrorMessage name=\"Resume\"> {(msg) => <span style={{ width: \"30%\", color: \"#FF4842\", fontSize: \"14px\", textAlign: \"center\" }}> {msg} </span>} </ErrorMessage>\n                                <LoadingButton size=\"small\" variant=\"outlined\" ref={parseButton} onClick={parseThisResume} > Parse </LoadingButton>\n                                </Stack> \n                            </CardContent>\n                        </Card>\n                        <Card sx={{ mt: 2 }} variant=\"outlined\" style={{ border: \"none\", boxShadow: \"none\" , marginTop: \"-1.4%\"}}>\n                            <CardContent sx={{ mb: 3 }}>\n                                <Typography variant=\"h6\" color=\"text.secondary\" fontStyle=\"italic\" gutterBottom>\n                                    <div style={{float: \"left\", width: \"50%\", marginTop: \"20px\"}}>\n                                        Candidate Details\n                                    </div>\n                                    <div style={{float: \"left\", textAlign: \"right\", width: \"50%\"}}>\n                                        <SpeedDial\n                                            ariaLabel=\"SpeedDial basic example\"\n                                            icon={<SpeedDialIcon />}\n                                            direction=\"left\"\n                                        >\n                                            {actions.map((action) => (\n                                            <SpeedDialAction\n                                                key={action.name}\n                                                icon={action.icon}\n                                                tooltipTitle={action.name}\n                                            />\n                                            ))}\n                                        </SpeedDial>\n                                    </div>\n                                </Typography>\n                            </CardContent>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            id=\"Requisition\"\n                                            type=\"string\"\n                                            label=\"Requisition\"\n                                            select\n                                            SelectProps={{\n                                                MenuProps: {\n                                                    style: {\n                                                        maxHeight: 300,\n                                                    },\n                                                }\n        \n                                            }}\n                                            {...getFieldProps(\"Requisition\")}\n                                            error={Boolean(touched.Requisition && errors.Requisition)}\n                                            helperText={touched.Requisition && errors.Requisition}\n                                        >\n\n                                            {requisitionData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.requisiteNumber + ' | ' +\n                                                        option.type + ' | ' +\n                                                        option.department + ' | ' +\n                                                        option.bu_group + ' | ' + option.job_name.toUpperCase()\n                                                    }\n                                                </MenuItem>\n                                            ))}\n\n\n                                        </TextField>\n                                    </Stack>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"First Name\"\n\n                                            {...getFieldProps('FirstName')}\n\n                                            error={Boolean(touched.FirstName && errors.FirstName)}\n                                            helperText={touched.FirstName && errors.FirstName}\n\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Last Name\"\n\n                                            {...getFieldProps('LastName')}\n\n                                            error={Boolean(touched.LastName && errors.LastName)}\n                                            helperText={touched.LastName && errors.LastName}\n                                        >\n                                        </TextField>\n\n                                        {<TextField\n                                            fullWidth\n                                            label=\"Email\"\n\n                                            {...getFieldProps('Email')}\n\n                                            error={Boolean(touched.Email && errors.Email)}\n                                            helperText={touched.Email && errors.Email}\n\n                                        >\n                                        </TextField>}\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Mobile\"\n\n                                            {...getFieldProps('Mobile_no')}\n\n                                            InputProps={{\n                                                startAdornment: <InputAdornment position=\"start\">\n                                                    +91\n                                                </InputAdornment>,\n                                            }}\n\n                                            error={Boolean(touched.Mobile_no && errors.Mobile_no)}\n                                            helperText={touched.Mobile_no && errors.Mobile_no}\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Current Location \"\n\n                                            {...getFieldProps('CurrentLocation')}\n\n                                            error={Boolean(touched.CurrentLocation && errors.CurrentLocation)}\n                                            helperText={touched.CurrentLocation && errors.CurrentLocation}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Total Experience\"\n                                            placeholder=\"Ex: 1.6 - 1 year 6 months, 0.0 - Fresher\"\n\n                                            {...getFieldProps('TotalExp')}\n\n                                            error={Boolean(touched.TotalExp && errors.TotalExp)}\n                                            helperText={touched.TotalExp && errors.TotalExp}\n                                        >\n                                        </TextField>\n\n                                        <div role=\"group\" style={{width: \"50%\"}}>\n                                            <Stack\n                                                direction={{ xs: \"column\", sm: \"row\" }}\n                                                spacing={3}\n                                                style={{ padding: \"14px 0\" }}\n                                            >\n                                                <div id=\"gender-radio-group\" style={{ color: '#637381' }}> Gender </div>\n                                                <label>\n                                                    <Field type=\"radio\" name=\"Gender\" value=\"MALE\" />\n                                                &nbsp; Male\n                                                </label>\n\n                                                <label>\n                                                    <Field type=\"radio\" name=\"Gender\" value=\"FEMALE\" />\n                                                &nbsp; Female\n                                                </label>\n                                            </Stack>\n                                            <ErrorMessage name=\"Gender\">\n                                                {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"14px\" }}>{msg}</span>}\n                                            </ErrorMessage>\n                                        </div>\n                                    </Stack>\n\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n\n                                <Typography variant=\"h6\" color=\"text.secondary\" fontStyle=\"italic\" gutterBottom sx={{mb: -3}}>\n                                    Work Details\n                                </Typography>\n\n                            </CardContent>\n\n                            <CardContent>\n\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Notice Period\"\n                                            select\n\n                                            {...getFieldProps('NoticePeriod')}\n\n                                            error={Boolean(touched.NoticePeriod && errors.NoticePeriod)}\n                                            helperText={touched.NoticePeriod && errors.NoticePeriod}\n                                        >\n\n                                            {noticePeriodData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.notice_period}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Current CTC\"\n                                            placeholder=\"450000\"\n                                            type=\"number\"\n\n                                            {...getFieldProps('CurrentCtc')}\n\n                                            error={Boolean(touched.CurrentCtc && errors.CurrentCtc)}\n                                            helperText={touched.CurrentCtc && errors.CurrentCtc}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Expected CTC\"\n                                            placeholder=\"550000\"\n                                            type=\"number\"\n\n                                            onInput={calculateExpHike}\n\n                                            {...getFieldProps('ExpectedCtc')}\n\n                                            error={Boolean(touched.ExpectedCtc && errors.ExpectedCtc)}\n                                            helperText={touched.ExpectedCtc && errors.ExpectedCtc}\n                                        >\n                                        </TextField>\n\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Expected Hike (in %)\"\n                                            disabled\n\n                                            {...getFieldProps('Exp_Hike')}\n\n                                            error={Boolean(touched.Exp_Hike && errors.Exp_Hike)}\n                                            helperText={touched.Exp_Hike && errors.Exp_Hike}\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Last Company Name\"\n                                            placeholder=\"Ex:- Google\"\n\n                                            {...getFieldProps('LastCompany')}\n\n                                            error={Boolean(touched.LastCompany && errors.LastCompany)}\n                                            helperText={touched.LastCompany && errors.LastCompany}\n\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Status\"\n                                            type=\"string\"\n                                            label=\"Status\"\n                                            select\n                                            {...getFieldProps(\"Status\")}\n                                            error={Boolean(touched.Status && errors.Status)}\n                                            helperText={touched.Status && errors.Status}\n                                        >\n\n                                            {statusData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.statusName}\n                                                </MenuItem>\n                                            ))}\n\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Source\"\n                                            type=\"string\"\n                                            label=\"Source\"\n                                            select\n                                            {...getFieldProps(\"Source\")}\n                                            error={Boolean(touched.Source && errors.Source)}\n                                            helperText={touched.Source && errors.Source}\n                                        >\n\n                                            {sourceData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.sourceName}\n                                                </MenuItem>\n                                            ))}\n\n\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Referred By\"\n                                            type=\"string\"\n\n                                            {...getFieldProps('Referred_By')}\n\n                                            error={Boolean(touched.Referred_By && errors.Referred_By)}\n                                            helperText={touched.Referred_By && errors.Referred_By}\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <InputLabel\n                                            id=\"recording-upload-label\"\n                                            style={{ width: \"8%\", padding: \"8px 0\" }}\n                                        >\n                                            Recording:\n                                        </InputLabel>\n\n                                        <input\n                                            id=\"Recording\"\n                                            name=\"Recording\"\n                                            type=\"file\"\n                                            className=\"form-control\"\n                                            accept=\".mp3\"\n                                            onChange={handleRecordingUpload}\n\n                                        />\n                                    </Stack>\n\n                                    <ErrorMessage name=\"Recording\">\n                                        {(msg) => <span\n                                            style={{ width: \"30%\", color: \"#FF4842\", fontSize: \"14px\", textAlign: \"center\" }}>\n                                            {msg}\n                                        </span>}\n                                    </ErrorMessage>\n\n                                </Stack>\n\n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 1 }} />\n\n                        <LoadingButton\n                            fullWidth\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                        >\n                            Add Candidate\n                       </LoadingButton>\n\n                    </Form>\n                </FormikProvider>\n            \n                <Backdrop\n                sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n                open={open}\n                onClick={handleClose}\n                >\n                    Let the magic happen... &emsp; \n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/booked-interview/CandidateInterview.js",["1698","1699","1700","1701","1702","1703","1704","1705","1706","1707","1708","1709","1710","1711","1712"],"import axios from 'axios';\nimport Page from '../../Page';\nimport * as Yup from \"yup\";\nimport {useSnackbar} from 'notistack';\nimport { styled } from '@mui/material/styles';\nimport React, { useState, useEffect } from 'react';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport StarIcon from '@mui/icons-material/Star';\nimport { LoadingButton } from \"@mui/lab\";\nimport { Form, FormikProvider, useFormik, ErrorMessage } from \"formik\";\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline';\nimport ExpandCircleDownOutlinedIcon from '@mui/icons-material/ExpandCircleDownOutlined';\nimport { Link as RouterLink, useNavigate, useLocation } from 'react-router-dom';\nimport { Accordion, AccordionSummary, AccordionDetails, Alert, Button, ButtonGroup, Box, Card, \n    CardContent, Checkbox, Container, Grid, Link, MenuItem, Rating, Stack,\n    Table, TableContainer, TableRow, TableHead, TextField, TableBody, TableCell, Typography, Tooltip} from '@mui/material';  \nimport * as constants from 'src/utils/constants';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\nimport PreviousRoundsDetailCards from '../booked-interview/PreviousRoundsDetailCards';\n    \nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nconst labels = {\n    1: 'Useless',\n    2: 'Poor',\n    3: 'Ok',\n    4: 'Good',\n    5: 'Excellent',\n  };\n\nfunction getLabelText(value) {\n    return `${value} Star${value !== 1 ? 's' : ''}, ${labels[value]}`;\n}\n\nexport default function CandidateInterview() {\n    const { enqueueSnackbar} = useSnackbar();\n    const navigate = useNavigate();\n\n    const location = useLocation()\n\n    // state for ratings\n    const [overallRatingValue, setOverallRatingValue] = React.useState(2);\n    const [hover, setHover] = React.useState(-1);\n\n    // skills rating section\n\n    const [skillRatingFields, setSkillRatingFields] = useState([\n        {skill: '', rating: '2', hover: ''}\n    ])\n\n    const handleFormChange = (index, event) => {\n        let data = [...skillRatingFields];\n        data[index][event.target.name] = event.target.value;\n        setSkillRatingFields(data);\n        handleChange(\"candidateSkillRating\")(`${\"test\"}`)\n    }\n\n    const addFields = () => {\n        let newfield = { skill: '', rating: '', hover: '' }\n    \n        setSkillRatingFields([...skillRatingFields, newfield])\n    }\n\n    const removeFields = (index) => {\n        let data = [...skillRatingFields];\n        data.splice(index, 1)\n        setSkillRatingFields(data)\n    }\n\n    // training areas section\n\n    const [trainingAreasFields, setTrainingAreasFields] = useState([\n        {skill: '', duration: ''}\n    ])\n\n    const handleTrainingAreasFormChange = (index, event) => {\n        let data = [...trainingAreasFields];\n        data[index][event.target.name] = event.target.value;\n        setTrainingAreasFields(data);\n    }\n\n    const addTrainingAreasFields = () => {\n        let newfield = { skill: '', duration: '' }\n    \n        setTrainingAreasFields([...trainingAreasFields, newfield])\n    }\n\n    const removeTrainingAreasFields = (index) => {\n        let data = [...trainingAreasFields];\n        data.splice(index, 1)\n        setTrainingAreasFields(data)\n    }\n\n    delete skillRatingFields[0].hover;\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    // get confirmed interview data\n    const [confirmedInterviewData, setConfirmedInterviewData] = useState([])\n\n    // get all confirmed interview data for a particular job opening\n    const [allConfirmedInterviewData, setAllConfirmedInterviewData ] = useState([])\n\n    const confirmedInterviewDataLoad = () => {\n        const id = location?.state?.id\n\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            // setConfirmedInterviewData(response.data.data)\n            setAllConfirmedInterviewData(response.data.data?.filter(obj => {\n                return obj.job_application.id === location?.state?.jobApplicationId\n            }))\n\n            setConfirmedInterviewData(response?.data?.data?.filter(obj => {\n                return obj.id === id\n            })[0])\n            setIsLoading(false)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }\n\n    // Technical Interview Recording State\n    const [technicalInterviewRecording, setTechnicalInterviewRecording] = useState(\"\")\n\n    const handleTechnicalInterviewRecording = () => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\"id\": location?.state?.id}\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/interview-recording/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            setTechnicalInterviewRecording(response.data.data)\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n\n    // const [jobApplicationData, setJobApplicationData] = useState([])\n    // const [screeningRoundData, setScreeningRoundData] = useState(\"\")\n    \n    // const getJobApplicationData = () => {\n    //     const job_application_id = location?.state?.jobApplicationId\n\n    //     axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-application/' + job_application_id + '/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n    //     .then((response) => {\n    //         setJobApplicationData(response.data.data)\n    //         handleChange(\"fitBU\")(`${response.data.data.job.requisitions.business_unit}`)\n\n    //         setScreeningRoundData(\n    //             response.data.data.interview_details.filter(item => {\n    //                 return item.interview_round === 'SCREENING_ROUND'\n    //             })[0]\n    //         )\n    //     })\n    //     .catch((e) => console.log('something went wrong :(', e));       \n    // }\n\n    // get business units\n    const [businessUnitData, setBusinessUnitData] = useState([])\n    const getBusinessUnits = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT +  '/api/v1/business-units/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setBusinessUnitData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };  \n\n    const candidateTechnologies = []\n\n    confirmedInterviewData?.candidate?.technology.forEach((technology, index) => {\n        candidateTechnologies.push((index ? ', ': '') + technology.technology_name)\n      });\n\n    const candidateLocations = []\n\n    confirmedInterviewData?.candidate?.preferred_location.forEach((location, index) => {\n        candidateLocations.push((index ? ', ': '') + location.office_location);\n    });\n\n    useEffect(() => {\n        confirmedInterviewDataLoad()\n        // getJobApplicationData()\n        getBusinessUnits()\n        handleTechnicalInterviewRecording()\n    }, [])\n\n    const handleReviewRoundResult = () => {\n        const id = location.state.id\n\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n            }\n\n        const data = {\"is_interview_completed\": true, \"interview_feedback\": technicalRoundResult}\n\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + id + '/', data, {headers})\n        .then(function (response) {\n            if (response.status == 200) {\n            enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n                anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                            },\n                variant: 'success',\n                autoHideDuration: 1500,\n            });\n            navigate('/employee-dashboard/booked-interview', {replace: true});\n            window.location.reload(false);\n            }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // Mark Technical Interview as Completed flag state\n    const [technicalInterviewChecked, setTechnicalInterviewChecked] = useState(false);\n\n    // Mark Technical Interview as Completed flag state\n    const [technicalInterviewCompletedFlag, setTechnicalInterviewCompletedFlag] = useState(false);\n\n    const [technicalRoundResult, setTechnicalRoundResult] = useState(\"\")\n\n    // const handleTechnicalRoundResult = () => {\n    //     const id = location.state.id\n\n    //     const headers = {\n    //         'Authorization': `Token ${localStorage.getItem('authToken')}`,\n    //         }\n\n    //     const data = confirmedInterviewData?.interview_round?.round_name === 'TECHNICAL_ROUND_ONE' ? {\n    //         \"is_technical_interview_one_completed\": technicalInterviewChecked,                 \n    //         \"is_interview_completed\": technicalInterviewChecked, \n    //         \"interview_feedback\": technicalRoundResult\n    //     } : {\n    //         \"is_technical_interview_two_completed\": technicalInterviewChecked,                 \n    //         \"is_interview_completed\": technicalInterviewChecked, \n    //         \"interview_feedback\": technicalRoundResult\n    //     }\n\n    //     axios.put('http://127.0.0.1:8000/api/v1/confirmed-interviews/' + id + '/', data, {headers})\n    //     .then(function (response) {\n    //         if (response.status == 200) {\n    //         enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n    //             anchorOrigin: {\n    //                             vertical: 'top',\n    //                             horizontal: 'right',\n    //                         },\n    //             variant: 'success',\n    //             autoHideDuration: 1500,\n    //         });\n    //         navigate('/employee-dashboard/booked-interview', {replace: true});\n    //         window.location.reload(false);\n    //         }\n    //     })\n    //     .catch(error => {\n    //         console.error('There was an error!', error);\n    //     });\n    // }\n\n    const CandidateInterviewResultSchema = Yup.object().shape({\n        candidateStrength: Yup.string()\n        .required(\"Candidate's Strong Areas are required\"),\n        candidateWeakness: Yup.string()\n        .required(\"Candidate's Weak Areas are required\"),\n        fitBU: Yup.string()\n        .required(\"Fit BU is required\"),\n        fitProject: Yup.string()\n        .required(\"Fit project is required\"),\n        fitLevel: Yup.string()\n        .required(\"Fit level is required\"),\n        interviewerComment: Yup.string()\n        .required(\"Interviewer Comment is required\"),\n        // technicalInterviewCompleted: Yup.boolean()\n        // .oneOf([true], \"You must mark the interview as completed or pending\"),\n        // candidateEligibility:  Yup.boolean()\n        // .oneOf([true], \"You must mark the candidate as eligible or not\"),\n        candidateSkillRating: Yup.string()\n        .required(\"Candidate's skill ratings are required\"),\n    })\n    const formik = useFormik({\n        initialValues: {\n            candidateStrength: '',\n            candidateWeakness: '',\n            fitBU: '',\n            fitProject: '',\n            fitLevel: '',\n            interviewerComment: '',\n            technicalInterviewCompleted: false,\n            candidateEligibility: false,\n            candidateSkillRating: ''\n        },\n        validationSchema: CandidateInterviewResultSchema,\n        onSubmit: (formValues) => {\n\n            const id = location.state.id\n    \n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`,\n                }\n    \n            delete skillRatingFields[0].hover;\n\n            const data = {\n                // \"is_technical_interview_one_completed\": formValues.technicalInterviewCompleted,\n                \"intv_round\": confirmedInterviewData?.interview_round?.round_name,                 \n                \"is_interview_completed\": formValues.technicalInterviewCompleted, \n                \"interview_feedback\": formValues.interviewerComment,\n                \"candidate_eligibility\": formValues.candidateEligibility,\n                \"candidate_strength\": formValues.candidateStrength,\n                \"candidate_weakness\": formValues.candidateWeakness,\n                \"fit_bu\": formValues.fitBU,\n                \"fit_project\": formValues.fitProject,\n                \"fit_level\": formValues.fitLevel,\n                \"skills_rating\": skillRatingFields,\n                \"training_areas\": trainingAreasFields,\n                \"overall_rating\": overallRatingValue\n            }\n    \n            axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + id + '/', data, {headers})\n            .then(function (response) {\n                if (response.status == 200) {\n                enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n                    anchorOrigin: {\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                },\n                    variant: 'success',\n                    autoHideDuration: 1500,\n                });\n                navigate('/employee-dashboard/booked-interview', {replace: true});\n                window.location.reload(false);\n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n        }\n    })\n\n    const handleNoShowCandidateInterview = () => {\n        const id = location.state.id\n    \n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n            }\n\n        delete skillRatingFields[0].hover;\n\n        const data = {\n            \"intv_round\": confirmedInterviewData?.interview_round?.round_name,                 \n            \"is_interview_completed\": true, \n            \"interview_feedback\": \"Candidate didn't show up !\",\n            \"candidate_eligibility\": false,\n        }\n\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + id + '/', data, {headers})\n        .then(function (response) {\n            if (response.status == 200) {\n            enqueueSnackbar(\"Interview has been completed !!\", {\n                anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                            },\n                variant: 'success',\n                autoHideDuration: 1500,\n            });\n            navigate('/employee-dashboard/booked-interview', {replace: true});\n            window.location.reload(false);\n            }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const { errors, handleChange, setFieldValue, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n    return(\n        <Page title=\"Interview Details | ResumeX\">\n            <Container maxWidth='xl'>\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={72} sx={{ mb: 5}}>\n                    <Link to=\"/employee-dashboard/booked-interview/\"\n                        color=\"green\" \n                        underline=\"hover\" \n                        component={RouterLink} \n                        fontSize=\"20px\">\n                            <ArrowCircleLeftIcon fontSize=\"large\" />\n                    </Link>\n\n                    <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800'}}>Interview Details</h2>\n                </Stack>\n                \n                {isLoading ? (\n                    \n                <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                    <LinearProgress />\n                </Typography>\n\n                ) : (\n\n                <div>\n                <Stack spacing={3}>\n                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={0}>\n                        <Card sx={{mt: 2}} variant=\"outlined\" style={{width: \"50%\", border: \"none\", boxShadow: \"none\"}}>\n                            <CardContent sx={{mb: -5}}>\n                                <Typography variant=\"h6\" color=\"text.secondary\" >\n                                    Personal Details\n                                </Typography>\n                            </CardContent>\n                            <CardContent>\n                            <TableContainer>\n                                <Table>\n                                    <TableHead>\n                                        <TableCell></TableCell>\n                                        <TableCell></TableCell>\n                                        <TableCell></TableCell>\n                                        <TableCell></TableCell>\n                                    </TableHead>\n                                    <TableBody>\n                                        <StyledTableRow>\n                                            <TableCell><b>Name:</b></TableCell>\n                                            <TableCell>{confirmedInterviewData?.candidate?.user?.first_name + \" \" + confirmedInterviewData.candidate?.user?.last_name}</TableCell>\n                                            <TableCell><b>Gender:</b></TableCell>\n                                            <TableCell>{confirmedInterviewData?.candidate?.gender}</TableCell>\n                                        </StyledTableRow>\n                                        <StyledTableRow>\n                                            <TableCell><b>Mobile No:</b></TableCell>\n                                            <TableCell>{confirmedInterviewData?.candidate?.user?.mobile}</TableCell>\n                                            <TableCell><b>Email:</b></TableCell>\n                                            <TableCell>{confirmedInterviewData?.candidate?.user?.email}</TableCell>\n                                        </StyledTableRow>\n                                        <StyledTableRow>\n                                            <TableCell><b>Experience:</b></TableCell>\n                                            <TableCell>{confirmedInterviewData?.candidate?.total_experience} Years</TableCell>\n                                            <TableCell><b>Technology:</b></TableCell>\n                                            <TableCell>{candidateTechnologies}</TableCell>\n                                        </StyledTableRow>\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            </CardContent>\n                        </Card>\n\n                        <Card sx={{mt: 2}} variant=\"outlined\" style={{width: \"50%\", border: \"none\", boxShadow: \"none\"}}>\n                            <CardContent sx={{mb: -5}}>\n                                <Typography variant=\"h6\" color=\"text.secondary\" >\n                                    Interview Schedule\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent align=\"center\">\n                            <TableContainer style={{ width: \"100%\" }}>\n                                <Table>\n                                    <TableHead>\n                                        <TableCell></TableCell>\n                                        <TableCell></TableCell>\n                                        <TableCell></TableCell>\n                                        <TableCell></TableCell>\n                                    </TableHead>\n                                    <TableBody>\n                                        <StyledTableRow>\n                                            <TableCell><b>Status:</b></TableCell>\n                                            <TableCell>{confirmedInterviewData?.status==\"COMPLETED\" ? <b style={{color: 'green'}}>Completed</b>: <b style={{color: '#c7291e'}}>Pending</b>}</TableCell>\n                                            <TableCell><b>Round:</b></TableCell>\n                                            <TableCell>\n                                                <b style={{color: '#c7291e'}}>\n                                                    {confirmedInterviewData?.interview_round?.round_name === 'REVIEW_CANDIDATE' ? \"Review Candidate\" : \"Technical Round\"}\n                                                </b>\n                                            </TableCell>\n                                        </StyledTableRow>\n                                        <StyledTableRow>\n                                            <TableCell><b>Date:</b></TableCell>\n                                            <TableCell><b>{new Date(confirmedInterviewData?.start_date).toLocaleString(\"en-In\", { year: 'numeric', month: '2-digit', day: '2-digit',})}</b></TableCell>\n                                            <TableCell><b>Time:</b></TableCell>\n                                            <TableCell>\n                                                {confirmedInterviewData?.interview_round?.round_name === 'REVIEW_CANDIDATE' ? (\"--------\"\n                                                ) : (\n                                                <b>\n                                                {new Date(confirmedInterviewData?.start_date).toLocaleTimeString(\"en-In\", { hour12: false, hour: '2-digit', minute:'2-digit' })}\n                                                &nbsp; to &nbsp;\n                                                {new Date(confirmedInterviewData?.end_date).toLocaleTimeString(\"en-In\", { hour12: false, hour: '2-digit', minute:'2-digit' })}\n                                                </b>\n                                                )}\n                                            </TableCell>\n                                        </StyledTableRow>\n                                        <StyledTableRow>\n                                            <TableCell><b>Resume:</b></TableCell>\n                                            <TableCell><a href={confirmedInterviewData?.job_application?.resume?.resume} target=\"_blank\" style={{color: \"green\", fontWeight: \"bold\"}}>Click here to check</a></TableCell>\n                                            <TableCell><b>Interview Link:</b></TableCell>\n                                            <TableCell>\n                                                {confirmedInterviewData?.interview_round?.round_name === 'REVIEW_CANDIDATE' ? (\"--------\"\n                                                ) : (\n                                                    <a href={confirmedInterviewData?.interview_moderator_link} target=\"_blank\" style={{color: \"green\", fontWeight: \"bold\"}}>Click here to join</a>\n                                                )}\n                                            </TableCell>\n                                        </StyledTableRow>\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            </CardContent>\n                        </Card>\n                    </Stack>\n                </Stack>\n\n                <Alert variant=\"outlined\" severity=\"error\" action={\n                    <Button color=\"error\" size=\"small\" variant=\"outlined\" onClick={() => handleNoShowCandidateInterview()}>\n                        END INTERVIEW\n                    </Button>\n                }>\n                    Candidate didn't show up for the interview ? Mark this interview as completed:\n                </Alert>\n\n                <Accordion sx={{mt: 5}}>\n                    <AccordionSummary\n                        sx={{\n                            backgroundColor: \"#F5F5F5\"\n                        }}\n                        expandIcon={<ExpandCircleDownOutlinedIcon />}\n                        \n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                        >\n                        <Typography variant=\"h6\" color=\"text.secondary\" >\n                            View Recordings of Previous Rounds\n                        </Typography>\n                    </AccordionSummary>\n\n                    <AccordionDetails>\n                        <Grid container spacing={3} alignContent=\"center\" justifyContent=\"center\" sx={{mt: 5}} >\n                        {allConfirmedInterviewData.filter(obj => {\n                            return obj.interview_round.round_name !== confirmedInterviewData?.interview_round?.round_name\n                        }).map((interview, index) => (\n                            <PreviousRoundsDetailCards key={interview.id} post={interview} index={index} />\n                            ))}\n                        </Grid>\n                    </AccordionDetails>\n                </Accordion>\n\n                <Accordion sx={{mt: 5}}>\n                    <AccordionSummary\n                        sx={{\n                            backgroundColor: \"#F5F5F5\"\n                        }}\n                        expandIcon={<ExpandCircleDownOutlinedIcon />}\n                        \n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                        >\n                        <Typography variant=\"h6\" color=\"text.secondary\" >\n                            Current Interview Round Recording\n                        </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                    <div>\n                        <table style={{width: \"100%\"}}>\n                            <tr>\n                            <td style={{width: \"50%\"}}>\n                            {technicalInterviewRecording !== 'Not Available' ? (\n                            <iframe width=\"100%\" height=\"450\"\n                                src={technicalInterviewRecording}\n                            ></iframe>\n                            ):(\"Recording is not generated yet. Please reload the page.\")}\n                            </td>\n                            </tr>\n                        </table>\n                    </div>\n                    </AccordionDetails>\n                </Accordion>\n\n                <Accordion sx={{mt: 5}}>\n                    <AccordionSummary\n                        sx={{\n                            backgroundColor: \"#F5F5F5\"\n                        }}\n                        expandIcon={<ExpandCircleDownOutlinedIcon />}\n                        \n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                        >\n                        <Typography variant=\"h6\" color=\"text.secondary\" >\n                            Submit Result\n                        </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <FormikProvider value={formik}>\n                            <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField \n                                            fullWidth\n                                            label=\"Candidate's Strong Areas\"\n                                            placeholder=\"Ex: OOPS, Core-Java, Spring\"\n                                            {...getFieldProps(\"candidateStrength\")}\n                                            error={Boolean(touched.candidateStrength && errors.candidateStrength)}\n                                            helperText={touched.candidateStrength && errors.candidateStrength}\n                                        />\n                                        <TextField \n                                            fullWidth\n                                            label=\"Candidate's Weak Areas\"\n                                            placeholder=\"Ex: Java-8, Reflection\"\n                                            {...getFieldProps(\"candidateWeakness\")}\n                                            error={Boolean(touched.candidateWeakness && errors.candidateWeakness)}\n                                            helperText={touched.candidateWeakness && errors.candidateWeakness}\n                                        />\n                                    </Stack>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField \n                                            fullWidth\n                                            select\n                                            label=\"Fit for BU\"\n                                            {...getFieldProps(\"fitBU\")}\n                                            error={Boolean(touched.fitBU && errors.fitBU)}\n                                            helperText={touched.fitBU && errors.fitBU}\n                                        >\n                                            {businessUnitData.map((unit) => (\n                                                <MenuItem key={unit.id} value={unit.id}>{unit.bu_name}</MenuItem>\n                                            ))}\n                                        </TextField>\n\n                                        <TextField \n                                            fullWidth\n                                            label=\"Fit for project\"\n                                            {...getFieldProps(\"fitProject\")}\n                                            error={Boolean(touched.fitProject && errors.fitProject)}\n                                            helperText={touched.fitProject && errors.fitProject}\n                                        />\n\n                                        <TextField \n                                            fullWidth\n                                            select\n                                            label=\"Fit level\"\n                                            {...getFieldProps(\"fitLevel\")}\n                                            error={Boolean(touched.fitLevel && errors.fitLevel)}\n                                            helperText={touched.fitLevel && errors.fitLevel}\n                                        >\n                                            <MenuItem key='SE' value='Software Engineer'>Software Engineer</MenuItem>\n                                            <MenuItem key='SSE' value='Senior Software Engineer'>Senior Software Engineer</MenuItem>\n                                            <MenuItem key='AP' value='Analyst Programmer'>Analyst Programmer</MenuItem>\n                                            <MenuItem key='SAP' value='Senior Analyst Programmer'>Senior Analyst Programmer</MenuItem>\n                                            <MenuItem key='TL' value='Tech Lead'>Tech Lead</MenuItem>\n                                            <MenuItem key='Jr/Sr Architect' value='Jr/Sr Architect'>Jr/Sr Architect</MenuItem>\n                                            <MenuItem key='PM' value='Project Manager'>Project Manager</MenuItem>\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"center\" paddingTop=\"25px\" spacing={2}>\n                                        <b>Add skill wise rating</b>\n                                    </Stack>\n\n                                    {skillRatingFields.map((input, index) => {\n                                        return (\n                                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                                <TextField \n                                                style={{width: \"50%\"}}\n                                                label=\"Skill\"\n                                                name='skill'\n                                                value={input.skill}\n                                                onChange={event => handleFormChange(index, event)}\n                                                />\n                                                \n                                                <Stack direction={{ xs: \"column\", sm: \"column\" }} spacing={1}>\n                                                <Rating\n                                                    name=\"rating\"\n                                                    value={input.rating}\n                                                    precision={1}\n                                                    // getLabelText={getLabelText}\n                                                    style={{paddingLeft: \"20px\"}}\n                                                    onChange={event => handleFormChange(index, event)}\n                                                    emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />}\n                                                />\n                                                {input.rating !== null && (\n                                                    <Box style={{paddingLeft: \"22px\"}} sx={{ ml: 2 }}>{labels[input.hover !== -1 ? input.rating : input.hover]}</Box>\n                                                )}\n                                                </Stack>\n\n                                            <ButtonGroup variant=\"outlined\" aria-label=\"outlined primary button group\">\n                                                <Tooltip title=\"Add More\" arrow>\n                                                    <Button variant=\"text\" color=\"success\" onClick={addFields}>{<AddCircleOutlineIcon fontSize=\"large\"/>}</Button>\n                                                </Tooltip>\n                                                <Tooltip title=\"Remove\" arrow>\n                                                    <Button variant=\"text\" color=\"error\" onClick={removeFields}>{<RemoveCircleOutlineIcon fontSize=\"large\"/>}</Button>\n                                                </Tooltip>\n                                            </ButtonGroup>\n                                            </Stack>\n                                        )\n                                    })}\n\n                                    <ErrorMessage name=\"candidateSkillRating\">\n                                        {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"14px\" }}>{msg}</span>}\n                                    </ErrorMessage>\n\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"center\" paddingTop=\"25px\" spacing={2}>\n                                        <b>Mention training areas (If needed)</b>\n                                    </Stack>\n\n                                    {trainingAreasFields.map((input, index) => {\n                                        return (\n                                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                                <TextField \n                                                style={{width: \"40%\"}}\n                                                label=\"Skill\"\n                                                name='skill'\n                                                value={input.skill}\n                                                onChange={event => handleTrainingAreasFormChange(index, event)}\n                                                />\n                                                \n                                                <TextField\n                                                style={{width: \"40%\"}}\n                                                select\n                                                label=\"Duration\"\n                                                name='duration'\n                                                value={input.duration}\n                                                onChange={event => handleTrainingAreasFormChange(index, event)}\n                                                >\n                                                    <MenuItem key='1 week' value='1 week'>1 week</MenuItem>\n                                                    <MenuItem key='2 weeks' value='2 weeks'>2 weeks</MenuItem>\n                                                    <MenuItem key='3 weeks' value='3 weeks'>3 weeks</MenuItem>\n                                                    <MenuItem key='4 weeks' value='4 weeks'>4 weeks</MenuItem>\n                                                    <MenuItem key='5 weeks' value='5 weeks'>5 weeks</MenuItem>\n                                                    <MenuItem key='6 weeks' value='6 weeks'>6 weeks</MenuItem>\n                                                </TextField>\n\n                                            <ButtonGroup variant=\"outlined\" aria-label=\"outlined primary button group\">\n                                                <Tooltip title=\"Add More\" arrow>\n                                                    <Button variant=\"text\" color=\"success\" onClick={addTrainingAreasFields}>{<AddCircleOutlineIcon fontSize=\"large\"/>}</Button>\n                                                </Tooltip>\n                                                <Tooltip title=\"Remove\" arrow>\n                                                    <Button variant=\"text\" color=\"error\" onClick={removeTrainingAreasFields}>{<RemoveCircleOutlineIcon fontSize=\"large\"/>}</Button>\n                                                </Tooltip>\n                                            </ButtonGroup>\n                                            </Stack>\n                                        )\n                                    })}\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} paddingTop=\"25px\" spacing={2}>\n                                        <TextField \n                                            fullWidth\n                                            label=\"Interviewer Comment\"\n                                            multiline\n                                            rows={3}\n                                            maxRows={4}\n                                            {...getFieldProps(\"interviewerComment\")}\n                                            error={Boolean(touched.interviewerComment && errors.interviewerComment)}\n                                            helperText={touched.interviewerComment && errors.interviewerComment}\n                                        />\n                                    </Stack>\n\n                                    <Box\n                                    sx={{\n                                        width: \"100%\",\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center'\n                                    }}\n                                    paddingTop=\"25px\"\n                                    >\n\n                                    Overall Rating: &emsp;\n                                    <Rating\n                                        name=\"hover-feedback\"\n                                        value={overallRatingValue}\n                                        precision={1}\n                                        getLabelText={getLabelText}\n                                        onChange={(event, newValue) => {\n                                        setOverallRatingValue(newValue);\n                                        }}\n                                        onChangeActive={(event, newHover) => {\n                                        setHover(newHover);\n                                        }}\n                                        emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />}\n                                    />\n                                    {overallRatingValue !== null && (\n                                        <Box sx={{ ml: 2 }}>{labels[hover !== -1 ? hover : overallRatingValue]}</Box>\n                                    )}\n                                    </Box>\n\n                                    <Box\n                                    sx={{\n                                        width: \"100%\",\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center'\n                                    }}\n                                    paddingTop=\"25px\"\n                                    paddingBottom=\"25px\"\n                                    >\n\n                                    Is candidate eligible for the next round of interview?:\n                                    <Checkbox \n                                        {...getFieldProps(\"candidateEligibility\")}\n                                        error={Boolean(touched.candidateEligibility && errors.candidateEligibility)}\n                                        helperText={touched.candidateEligibility && errors.candidateEligibility}\n                                    />\n                                    \n                                    &emsp;&emsp;&emsp;&emsp;&emsp;\n                            \n                                    Mark interview as completed:\n                                    <Checkbox \n                                        {...getFieldProps(\"technicalInterviewCompleted\")}\n                                        error={Boolean(touched.technicalInterviewCompleted && errors.technicalInterviewCompleted)}\n                                        helperText={touched.technicalInterviewCompleted && errors.technicalInterviewCompleted}\n                                    />\n                                    </Box>\n\n                                    <LoadingButton\n                                        fullWidth\n                                        size=\"large\"\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        loading={isSubmitting}\n                                    >\n                                        Submit Result\n                                    </LoadingButton>\n                                </Stack>\n                            </Form>\n                        </FormikProvider>\n                    </AccordionDetails>\n                </Accordion>\n                </div>\n                )}\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisition/EditRequisition.js",["1713","1714","1715","1716","1717","1718"],"import axios from 'axios';\nimport * as Yup from \"yup\";\nimport Page from '../../Page';\nimport {useSnackbar} from 'notistack';\nimport { LoadingButton } from \"@mui/lab\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport {Link as RouterLink, useNavigate, useParams, useLocation} from 'react-router-dom';\nimport { Card, CardContent, Checkbox, Container, FormControl, InputLabel, Link, MenuItem, Select, Stack, TextField,Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\nimport { preventDefault } from '@fullcalendar/react';\n\nexport default function EditRequisition() {\n    const { id } = useParams();\n    const location = useLocation()\n    const { enqueueSnackbar} = useSnackbar();\n    const navigate = useNavigate();\n    const [disableValue, setDisableValue] = useState(true)\n    const [backPath, setBackPath ] = useState('')\n\n    const [techStackTechnologyAPIData, setTechStackTechnologyAPIData] = useState([])\n    const [techStacksArray, setTechStacksArray] = useState([])\n\n    const getTechStackTechnology = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-technologies/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechStackTechnologyAPIData(response.data.data)\n\n            var techStacks = response.data.data.map((obj) => (obj.technology_stack))\n            setTechStacksArray(techStacks)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    const [technologyData, setTechnologyData] = useState([])\n    const [secondaryTechnologyArray, setSecondaryTechnologyArray] = useState([])\n\n    const getTechnologyData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechnologyData(response.data.data)\n            setSecondaryTechnologyArray(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    };\n\n    const [stackRecruiterData, setStackRecruiterData] = useState([])\n\n    const getStackTechnologies = (props) => {\n        handleChange(\"techStack\")(props)\n\n        const data = {\n            tech_stack_id: props.target.value\n        }\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-recruiter/', data, {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setStackRecruiterData(response.data.data)\n            handleChange(\"assignedFsdMember\")(`${response.data.data.id}`)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n\n        var techstack = techStackTechnologyAPIData.filter(obj => {\n            return obj.technology_stack.id === data.tech_stack_id\n        })[0]\n\n        var tech_ids = techstack.technologies.map((obj) => obj.id)\n        \n        setFieldValue(\"primaryTechnology\", tech_ids)\n\n    }\n\n    // is_active state\n    const [checked, setChecked] = useState(true);\n    const handleIsActiveChange = event =>{\n        setChecked(event.target.checked);\n    };\n\n    // requisition template data state\n    const [requisitionTemplateData, setRequisitionTemplateData] = useState([])\n    const getRequisitionTemplates = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-template/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionTemplateData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    }\n\n    // tech stack state\n    const [techStackData, setTechStackData] = useState([])\n    const getTechStackData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/tech-stack/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechStackData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get business units\n    const [businessUnitData, setBusinessUnitData] = useState([])\n    const getBusinessUnits = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/business-units/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setBusinessUnitData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };  \n    \n    // get job category / requisition department\n    const [requisitionDepartmentData, setRequisitionDepartmentData] = useState([])\n    const getRequisitionDepartment = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-category/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionDepartmentData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }; \n    \n    // get requisition types\n    const [requisitionTypeData, setRequisitionTypeData] = useState([])\n    const getRequisitionTypes = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-types/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionTypeData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get requisition status\n    const [requisitionStatusData, setRequisitionStatusData] = useState([])\n    const getRequisitionStatusData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-status/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionStatusData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };    \n\n    // set initial values for office location\n    const getSelectInitialState = () => {\n        const initialSelectedMock = location.state.from[0].job_loc\n    \n        const initialSelected = location.state.office.filter((loc) => {\n            if (\n            initialSelectedMock.find((initialLocation) => initialLocation.id === loc.id)\n            ) {\n            return true;\n            }\n            return false;\n        });\n        return initialSelected;\n    };\n    \n    const initialSelectState = getSelectInitialState();    \n    const [jobLocationState, setJobLocationState] = useState(\n    initialSelectState\n    );\n\n    // set initial values for assigned fsd members\n    const getSelectInitialFsdMembersState = () => {\n        const initialSelectedFsdMembersMock = location.state.from[0].assigned_fsd_user\n    \n        const initialSelectedFsdMembers =  location.state.fsdMembers.filter((member) => {\n            if (\n                initialSelectedFsdMembersMock.find((initialMember) => initialMember.id === member.id)\n            ) {\n            return true;\n            }\n            return false;\n        });\n        return initialSelectedFsdMembers;\n    };\n\n    const setOtherValues = (from_page) => {\n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n\n        if(from_page === 'OtherRequisition'){\n            setBackPath('/resumeX/otherrequisition')\n            if (user_role === 'FSD_Admin')\n            { setDisableValue(false)  }\n            else{ setDisableValue(true)  }\n        }\n        else if (user_role === 'DRM'){\n            setBackPath('/resumeX/drm-requisition')\n            setDisableValue(true)\n        }\n        else{\n            setBackPath('/resumeX/myrequisition')\n            setDisableValue(false)\n        }\n    }\n    \n    const initialSelectFsdMembers = getSelectInitialFsdMembersState();\n\n    const [assignedFsdMemberState, setAssignedFsdMemberState] = useState(\n    initialSelectFsdMembers\n    );\n\n\n    const editRequisitionSchema = Yup.object().shape({\n        designation: Yup.string()\n        .required(\"Designation is required\"),\n        positions: Yup.number()\n        .required(\"Number of Positions is required\"),\n        techStack: Yup.string()\n        .required(\"Tech Stack is required\"),\n        defaultFsdMember: Yup.string()\n        .required(\"Default FSD Member is required\"),\n        assignedFsdMember: Yup.array(),\n        businessUnit: Yup.string()\n        .required(\"Business unit is required\"),\n        department: Yup.string()\n        .required(\"Department is required\"),\n        requisitionType: Yup.string()\n        .required(\"Requisition type is required\"),\n        expectedJoiningDate: Yup.string()\n        .required(\"Expected joining date is required\"),\n\n        jobName:  Yup.string(),\n        requiredExperience: Yup.string(),\n        requisitionStatus: Yup.string(),\n\n        projectName:  Yup.string(),\n        projectLocation: Yup.string()\n        .required(\"Project location is required\"),\n        projectDuration: Yup.string(),\n        opportunityID: Yup.string(),\n        projectSummary: Yup.string(),\n        // additionalSkills: Yup.string()\n        // .required(\"Additional skills are required\"),\n        // requiredSkills: Yup.string()\n        // .required(\"Must have skills are required\"),\n        jobDescription: Yup.string()\n        .required(\"Job description is required\"),\n        responsibilities: Yup.string(),\n        hrSummary: Yup.string(),\n        projectStartDate: Yup.string(),\n        // jobLocation: Yup.array()\n        // .min(1, \"Job location is required\")\n        // .required(\"Job location is required\"),\n        maxBudget: Yup.string()\n        .required(\"Maximum budget is required\"),\n        clientInterview: Yup.string()\n        .required(\"Client interview process is required\"),\n        targetCompany: Yup.string(),\n        referenceProfile: Yup.string(),\n        projectPersonalityTraits: Yup.string(),\n        primaryTechnology: Yup.array()\n        .min(1, \"Primary technology is required\")\n        .required(\"Must have technologies are required\"),\n        secondaryTechnology: Yup.array()\n        .min(1, \"Secondary technology is required\")\n        .required(\"Good to have technologies are required\"),\n    })\n    const formik = useFormik({\n        initialValues: {\n            rrfNumber: location.state.from[0].requisite_number ?? \"\",\n            designation: location.state.from[0].designation ?? \"\",\n            positions: location.state.from[0].positions ?? \"\",\n            techStack: location.state.from[0].tech_stack.tech_stack_id ?? \"\",\n            defaultFsdMember: location.state.from[0].default_fsd_users.id ?? \"\",\n            assignedFsdMember:  [],\n            businessUnit: location.state.from[0].bu_group.id ?? \"\",\n            department: location.state.from[0].department.id ?? \"\",\n            requisitionType: location.state.from[0].requisite_type.id ?? \"\",\n            expectedJoiningDate: location.state.from[0].expected_join_date ?? \"\",\n\n            jobName: location.state.from[0].job_name ?? \"\",\n            requiredExperience: location.state.from[0].required_exp ?? \"\",\n            requisitionStatus: location.state.from[0].requisite_status.id ?? \"\",\n            primaryTechnology: location.state.from[0].primary_technology.map(obj => obj.id),\n            secondaryTechnology: location.state.from[0].other_technology.map(obj => obj.id),\n            projectName: location.state.from[0].project_name ?? \"\",\n            projectLocation: location.state.from[0].project_loc ?? \"\",\n            projectDuration: location.state.from[0].project_duration ?? \"\",\n            opportunityID: location.state.from[0].opportunity_id ?? \"\",\n            projectStartDate: location.state.from[0].project_start_date ?? \"\",\n            // jobLocation: [],\n            maxBudget: location.state.from[0].max_budget ?? \"\",\n            clientInterview: location.state.from[0].client_interview ?? \"\",\n            projectSummary: location.state.from[0].project_sum ?? \"\",\n            // additionalSkills: location.state.from[0].additional_skills ?? \"\",\n            // requiredSkills: location.state.from[0].required_skills ?? \"\",\n            jobDescription: location.state.from[0].job_description ?? \"\",\n            responsibilities: location.state.from[0].responsibilities ?? \"\",\n            hrSummary: location.state.from[0].hr_summary ?? \"\",\n            comment: location.state.from[0].comment ?? \"\",\n\n            targetCompany: location.state.from[0].target_company ?? \"\",\n            referenceProfile: location.state.from[0].reference_profile ?? \"\",\n            projectPersonalityTraits: location.state.from[0].project_personality_traits ?? \"\",\n        },\n        validationSchema: editRequisitionSchema,\n        onSubmit: (formValues) => {\n            const id = location.state.from[0].id\n\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            const data = {\n                rrf_template: formValues.rrfTemplate,\n\n                designation: formValues.designation,\n                positions: formValues.positions,\n                tech_stack_id: formValues.techStack,\n                default_fsd_users_id: formValues.defaultFsdMember,\n                assigned_fsd_user_id: assignedFsdMemberState.map(item => item.id),\n                bu_group_id: formValues.businessUnit,\n                department_id: formValues.department,\n                requisite_type_id: formValues.requisitionType,\n                requisite_status_id: formValues.requisitionStatus,\n                expected_join_date: formValues.expectedJoiningDate,\n\n                job_name: formValues.jobName,\n                required_exp: formValues.requiredExperience,\n                project_name: formValues.projectName,\n                project_loc: formValues.projectLocation,\n                project_duration: formValues.projectDuration,\n                opportunity_id: formValues.opportunityID,\n                project_start_date: formValues.projectStartDate,\n                // job_loc_id: formValues.jobLocation,\n                // job_loc_id: officeLocationState.location,\n                job_loc_id: jobLocationState.map(item => item.id),\n                max_budget: formValues.maxBudget,\n                client_interview: formValues.clientInterview,\n                project_sum: formValues.projectSummary,\n                // additional_skills: formValues.additionalSkills,\n                // required_skills: formValues.requiredSkills,\n                job_description: formValues.jobDescription,\n                responsibilities: formValues.responsibilities,\n                hr_summary: formValues.hrSummary,\n                comment: formValues.comment,\n\n                target_company: formValues.targetCompany,\n                reference_profile: formValues.referenceProfile,\n                project_personality_traits: formValues.projectPersonalityTraits,\n\n                is_active: checked,\n\n                primary_technology_id: formValues.primaryTechnology,\n                other_technology_id: formValues.secondaryTechnology\n            }\n\n            axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/requisitions/\" + id + \"/\", data, {headers})\n            .then(function (response) {\n                if (response.status === 200) {\n                    enqueueSnackbar(\"Requisition updated successfully !!\", {\n                        anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                      },\n                        variant: 'success',\n                        autoHideDuration: 1500,\n                      });\n                      navigate('/resumeX/myrequisition/', {replace: true});\n                    //   window.location.reload(false);                    \n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });            \n        }\n    })\n\n    const { errors, handleChange, setFieldValue, touched, handleSubmit, isSubmitting, getFieldProps, values } = formik;\n\n    const projectLocations = [\n        {\n            value: 'ONSITE',\n            label: 'Onsite'\n        },\n        {\n            value: 'OFFSHORE',\n            label: 'Offshore'\n        },\n        {\n            value: 'BOTH',\n            label: 'Both'\n        },\n    ];\n\n    const clientInterviewProcess = [\n        {\n            value: 'true',\n            label: 'Yes'\n        },\n        {\n            value: 'false',\n            label: 'No'\n        },\n    ]\n\n    const designationData = [\n        {\n            value: 'Project Trainee',\n            label: 'Project Trainee'\n        },\n        {\n            value: 'Software Engineer',\n            label: 'Software Engineer'\n        },\n        {\n            value: 'Senior Software Engineer',\n            label: 'Senior Software Engineer'\n        },\n        {\n            value: 'Analyst Programmer',\n            label: 'Analyst Programmer'\n        },\n        {\n            value: 'Senior Analyst Programmer',\n            label: 'Senior Analyst Programmer'\n        },\n        {\n            value: 'Technical Lead',\n            label: 'Technical Lead'\n        },\n        {\n            value: 'Senior Technical Lead',\n            label: 'Senior Technical Lead'\n        }\n    ]\n\n    const opportunityData = [\n        {\n            value: 'Opportunity 1',\n            label: 'Opportunity 1'\n        },\n        {\n            value: 'Opportunity 2',\n            label: 'Opportunity 2'\n        },\n    ]\n\n\n    const [positionNum, setpositionNum] = useState([])\n    const thisNewNum = {...getFieldProps(\"positions\")}\n\n    // const positionNum = thisNewNum.value;\n\n    useEffect(() => {\n        getTechStackTechnology()\n        getTechnologyData()\n        getRequisitionTemplates()\n        getTechStackData()\n        getBusinessUnits()\n        getRequisitionDepartment()\n        getRequisitionTypes()\n        getRequisitionStatusData()\n        setChecked(location.state.from[0].is_active)\n        setStackRecruiterData(location.state.from[0].default_fsd_users)\n        setOtherValues(location?.state?.fromPage)\n        setpositionNum(thisNewNum.value)\n    }, [])\n\n    return (\n        <Page>\n            <Container maxWidth=\"xl\" sx={{ mt:0 }}>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={72}>\n                    <Link to={backPath}\n                        // to=\"/resumeX/myrequisition\"\n                        color=\"green\" \n                        underline=\"hover\" \n                        component={RouterLink} \n                        fontSize=\"20px\">\n                            <ArrowCircleLeftIcon fontSize=\"large\" />\n                    </Link>\n\n                    {/* <Typography variant=\"h4\" sx={{ mb:5 }} align=\"center\">\n                        Edit Requisition\n                    </Typography> */}\n\n                    <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '25px'}}>Edit Requisition</h2>\n                </Stack>\n\n                <Stack\n                    direction=\"row\"\n                    flexWrap=\"wrap-reverse\"\n                    alignItems=\"center\"\n                    justifyContent=\"flex-end\"\n                    sx={{ mb: 5 }}\n                >\n                </Stack>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <Card variant=\"outlined\" style={{border: \"none\", boxShadow: \"none\"}}>\n                            <CardContent>\n                                <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom sx={{mb: -1}} >\n                                    Requisition Details\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        {/* --------------------- RRF Number --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            disabled\n                                            label=\"RRF Number\"\n                                            {...getFieldProps(\"rrfNumber\")}\n                                            error={Boolean(touched.rrfNumber && errors.rrfNumber)}\n                                            helperText={touched.rrfNumber && errors.rrfNumber}\n                                        >\n                                        </TextField>\n\n                                        {/* --------------------- Requisition Status --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Requisition Status\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"requisitionStatus\")}\n\n                                            error={Boolean(touched.requisitionStatus && errors.requisitionStatus)}\n                                            helperText={touched.requisitionStatus && errors.requisitionStatus}\n                                        >\n                                            {requisitionStatusData.map((status) => (\n                                                <MenuItem key={status.id} value={status.id}>{status.requisition_status}</MenuItem>\n                                            ))}\n                                        </TextField>\n\n\n                                        {/* --------------------- Requisition Type --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Requisition Type\"\n\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"requisitionType\")}\n\n                                            error={Boolean(touched.requisitionType && errors.requisitionType)}\n                                            helperText={touched.requisitionType && errors.requisitionType}\n                                        >\n                                            {requisitionTypeData.map((type) => (\n                                                <MenuItem key={type.id} value={type.id}>{type.req_type_name}</MenuItem>\n                                            ))}\n                                        </TextField>\n\n\n                                        {/* --------------------- Opportunity ID --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Opportunity ID\"\n                                            // disabled={disableValue}\n                                            disabled={values.requisitionType === 1 && disableValue === false ? false : true}\n\n                                            {...getFieldProps(\"opportunityID\")}\n\n                                            error={Boolean(touched.opportunityID && errors.opportunityID)}\n                                            helperText={touched.opportunityID && errors.opportunityID}\n                                        >\n                                            {opportunityData.map((opportunity) => (\n                                                <MenuItem key={opportunity.value} value={opportunity.value}>{opportunity.label}</MenuItem>\n                                            ))}\n                                        </TextField>\n\n\n                                        {/* --------------------- Department --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Department\"\n\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"department\")}\n\n                                            error={Boolean(touched.department && errors.department)}\n                                            helperText={touched.department && errors.department}\n                                        >\n                                            {requisitionDepartmentData.map((department) => (\n                                                <MenuItem key={department.id} value={department.id}>{department.job_category_name}</MenuItem>\n                                            ))}\n                                        </TextField>\n\n                                    </Stack>\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n                                <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom sx={{mb: -1}}>\n                                    Job Details\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent sx={{mb: 5}}>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        {/* --------------------- Business Unit --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Business Unit\"\n\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"businessUnit\")}\n\n                                            error={Boolean(touched.businessUnit && errors.businessUnit)}\n                                            helperText={touched.businessUnit && errors.businessUnit}\n                                        >\n                                            {businessUnitData.map((unit) => (\n                                                <MenuItem key={unit.id} value={unit.id}>{unit.bu_name}</MenuItem>\n                                            ))}\n                                        </TextField>                                        \n\n                                        {/* --------------------- Designation --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Designation\"\n                                            {...getFieldProps(\"designation\")}\n                                            error={Boolean(touched.designation && errors.designation)}\n                                            helperText={touched.designation && errors.designation}\n                                            disabled={disableValue}\n                                        >\n                                            {designationData.map((designation) => (\n                                                <MenuItem key={designation.value} value={designation.value}>{designation.label}</MenuItem>\n                                            ))}\n                                        </TextField>\n\n                                        {/* --------------------- Number of Positions --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Number of Positions\"\n                                            type=\"number\"\n                                            onKeyDown={preventDefault}\n                                            disabled={disableValue}\n                                            \n                                            inputProps={{ min: 1, max: positionNum ,pattern: \"[0-9]*\"}}\n\n                                            {...getFieldProps(\"positions\")}\n\n                                            error={Boolean(touched.positions && errors.positions)}\n                                            helperText={touched.positions && errors.positions}\n                                        >\n                                        </TextField>\n\n                                        {/* --------------------- TechStack --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Tech Stack\"\n                                            disabled={true}\n\n                                            {...getFieldProps(\"techStack\")}\n\n                                            onChange={(selectedOption) => getStackTechnologies(selectedOption)}\n\n                                            value = {formik.values.techStack}\n                                            error={Boolean(touched.techStack && errors.techStack)}\n                                            helperText={touched.techStack && errors.techStack}\n                                            >\n                                            {techStacksArray.map((techstack) => (\n                                                <MenuItem key={techstack.id} value={techstack.id}>{techstack.tech_stack_name}</MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </Stack>\n                                    \n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        {/* --------------------- Default FSD Member --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            disabled\n                                            select\n                                            label=\"Default FSD Member\"\n\n                                            {...getFieldProps(\"defaultFsdMember\")}\n\n                                            value = {formik.values.defaultFsdMember}\n                                            error={Boolean(touched.defaultFsdMember && errors.defaultFsdMember)}\n                                            helperText={touched.defaultFsdMember && errors.defaultFsdMember}\n                                            >\n                                                <MenuItem\n                                                key={stackRecruiterData?.id} \n                                                value={stackRecruiterData?.id}>\n                                                    {stackRecruiterData?.recruiters?.map(\n                                                        (recruiter, index) => (index ? ', ': '') + recruiter?.member?.first_name + \" \" + recruiter?.member?.last_name)}\n                                                </MenuItem>\n                                        </TextField>\n\n                                        {/* --------------------- Assigned FSD Member --------------------- */}\n                                        {/* <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Assigned FSD Member\"\n                                            multiple\n                                            {...getFieldProps(\"assignedFsdMember\")}\n                                            error={Boolean(touched.assignedFsdMember && errors.assignedFsdMember)}\n                                            helperText={touched.assignedFsdMember && errors.assignedFsdMember}\n                                            SelectProps={{\n                                                multiple: true,\n                                                value: formik.values.assignedFsdMember,\n                                                onChange: (selectedOption) => handleChange(\"assignedFsdMember\")(selectedOption)\n                                            }}\n                                            >\n                                            {fsdMembersData.map((member) => (\n                                                <MenuItem \n                                                key={member.id} \n                                                value={member.id}>\n                                                    {member.member.first_name + \" \" + member.member.last_name}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField> */}\n\n                                        {/* --------------------- Assigned FSD Member (Using MUI Select) --------------------- */}                                        \n                                        <FormControl\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            margin=\"normal\"\n                                            InputLabelProps={{\n                                                shrink: true\n                                            }}\n                                        >\n                                            <InputLabel>Assigned FSD Member</InputLabel>\n                                            <Select\n                                                label=\"Assigned FSD Member\"\n                                                fullWidth\n                                                multiple\n                                                value={assignedFsdMemberState}\n                                                disabled={disableValue}\n\n                                                renderValue={(selected) =>\n                                                    selected.map((item) => item.member.first_name + \" \" + item.member.last_name).join(\", \")\n                                                }\n                                                onChange={(event) => {\n                                                    setAssignedFsdMemberState(event.target.value);\n                                                }}\n                                                >\n                                                {location.state.fsdMembers.map((item, index) => (\n                                                    <MenuItem key={\"aa\" + item.id} value={item}>\n                                                    {item.member.first_name + \" \" + item.member.last_name}\n                                                    </MenuItem>\n                                                ))}\n                                            </Select>\n                                        </FormControl>                                      \n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        {/* --------------------- Project Name --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Project Name\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"projectName\")}\n\n                                            error={Boolean(touched.projectName && errors.projectName)}\n                                            helperText={touched.projectName && errors.projectName}\n                                        >\n                                        </TextField>\n\n                                        {/* --------------------- Project Location --------------------- */}\n                                        <TextField\n                                            select\n                                            fullWidth\n                                            label=\"Project Location\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"projectLocation\")}\n\n                                            error={Boolean(touched.projectLocation && errors.projectLocation)}\n                                            helperText={touched.projectLocation && errors.projectLocation}\n                                        >\n                                            {projectLocations.map((location) => (\n                                                <MenuItem key={location.value} value={location.value}>{location.label}</MenuItem>\n                                            ))}\n                                        </TextField>\n\n                                        {/* --------------------- Project Duration --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Project Duration\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"projectDuration\")}\n\n                                            error={Boolean(touched.projectDuration && errors.projectDuration)}\n                                            helperText={touched.projectDuration && errors.projectDuration}\n                                        >\n                                        </TextField>\n\n\n                                        {/* --------------------- Max Budget for the Position --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Max Budget for the Position *\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"maxBudget\")}\n\n                                            error={Boolean(touched.maxBudget && errors.maxBudget)}\n                                            helperText={touched.maxBudget && errors.maxBudget}\n                                        >\n                                        </TextField>   \n\n                                    </Stack>\n                                    \n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        {/* --------------------- Client Interview Process --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Client Interview Process (if any) *\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"clientInterview\")}\n\n                                            error={Boolean(touched.clientInterview && errors.clientInterview)}\n                                            helperText={touched.clientInterview && errors.clientInterview}\n                                        >\n                                            {clientInterviewProcess.map((process) => (\n                                                <MenuItem key={process.value} value={process.value}>{process.label}</MenuItem>\n                                            ))}\n                                        </TextField>   \n\n\n                                        {/* --------------------- Tentative Project Start Date --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Tentative Project Start Date\"\n                                            type=\"date\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"projectStartDate\")}\n                                            error={Boolean(touched.projectStartDate && errors.projectStartDate)}\n                                            helperText={touched.projectStartDate && errors.projectStartDate}\n                                        >\n                                        </TextField>\n\n                                        {/* --------------------- Expected Joining Date --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Expected Joining Date\"\n                                            type=\"date\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"expectedJoiningDate\")}\n\n                                            error={Boolean(touched.expectedJoiningDate && errors.expectedJoiningDate)}\n                                            helperText={touched.expectedJoiningDate && errors.expectedJoiningDate}\n                                        >\n                                        </ TextField>                                              \n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        {/* ------ Project Summary ------ */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Project Summary\"\n                                            multiline\n                                            rows={4}\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"projectSummary\")}\n\n                                            error={Boolean(touched.projectSummary && errors.projectSummary)}\n                                            helperText={touched.projectSummary && errors.projectSummary}\n                                        >\n                                        </TextField>\n\n                                        {/* --------------------- HR Summary --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Confidential information for HR (If any)\"\n                                            multiline\n                                            disabled={disableValue}\n                                            rows={4}\n                                            {...getFieldProps(\"hrSummary\")}\n                                            error={Boolean(touched.hrSummary && errors.hrSummary)}\n                                            helperText={touched.hrSummary && errors.hrSummary}\n                                        >\n                                        </TextField>                                        \n\n                                        {/* ----- Comment ----- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Comment (If any)\"\n                                            multiline\n                                            rows={4}\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"comment\")}\n\n                                            error={Boolean(touched.comment && errors.comment)}\n                                            helperText={touched.comment && errors.comment}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2} sx={{mb: 5}}>\n                                        {/* --------------------- Target Companies --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Target Companies(if Any)\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"targetCompany\")}\n\n                                            error={Boolean(touched.targetCompany && errors.targetCompany)}\n                                            helperText={touched.targetCompany && errors.targetCompany}\n                                        >\n                                        </TextField>\n\n                                        {/* ----------------- Reference Profile/Link of Similar Candidate ------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Reference Profile/Link of Similar Candidate\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"referenceProfile\")}\n\n                                            error={Boolean(touched.referenceProfile && errors.referenceProfile)}\n                                            helperText={touched.referenceProfile && errors.referenceProfile}\n                                        >\n                                        </TextField>\n\n                                        {/* ----------------- Personality traits for Project/Assignment ---------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Personality traits for Project/Assignment\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"projectPersonalityTraits\")}\n\n                                            error={Boolean(touched.projectPersonalityTraits && errors.projectPersonalityTraits)}\n                                            helperText={touched.projectPersonalityTraits && errors.projectPersonalityTraits}\n                                        >\n                                        </TextField>\n                                    </Stack>\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n                                <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom sx={{mb: -1}}>\n                                    Requirements Details\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent sx={{mb: 5}}>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        {/* --------------------- Job Name --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Job Name\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"jobName\")}\n\n                                            error={Boolean(touched.jobName && errors.jobName)}\n                                            helperText={touched.jobName && errors.jobName}\n                                        >\n                                        </TextField>\n\n                                        {/* --------------------- Required Experience --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Required Experience\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"requiredExperience\")}\n\n                                            error={Boolean(touched.requiredExperience && errors.requiredExperience)}\n                                            helperText={touched.requiredExperience && errors.requiredExperience}\n                                        >\n                                        </TextField>                                            \n\n                                        {/* --------------------- Job Location (Using Formik) --------------------- */}\n                                        {/* <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Job Location *\"\n                                            multiple\n                                            {...getFieldProps(\"jobLocation\")}\n                                            error={Boolean(touched.jobLocation && errors.jobLocation)}\n                                            helperText={touched.jobLocation && errors.jobLocation}\n                                            SelectProps={{\n                                                multiple: true,\n                                                value: formik.values.jobLocation,\n                                                onChange: (selectedOption) => handleChange(\"jobLocation\")(selectedOption)\n                                            }}\n                                        >\n                                            {officeLocationData.map((location) => (\n                                                <MenuItem key={location.id} value={location.id}>{location.office_location}</MenuItem>\n                                            ))}\n                                        </TextField>   */}\n\n                                        {/* --------------------- Job Location (Using State) --------------------- */}\n                                        {/* <TextField\n                                            fullWidth\n                                            required\n                                            select\n                                            label=\"Office Location\"\n                                            multiple\n                                            // required\n                                            value= {officeLocationState.location}\n                                            getOptionSelected={[1, 2]}\n                                            {...getFieldProps(\"location\")}\n                                            SelectProps={{\n                                            multiple: true,\n                                            value: officeLocationState.location,\n                                            onChange: handleOfficeLocationChange\n                                            }}\n                                        >\n                                            {officeLocationData.map((location) => (\n                                            <MenuItem key={location.id} value={location.id}>{location.office_location}</MenuItem>\n                                            ))}\n                                        </TextField> */}\n                                        \n                                        {/* --------------------- Job Location (Using MUI Select) --------------------- */}                                        \n                                        <FormControl\n                                            fullWidth \n                                            required\n                                            variant=\"outlined\"\n                                            margin=\"normal\"\n                                            InputLabelProps={{\n                                                shrink: true\n                                            }}\n                                        >\n                                            <InputLabel>Office Location</InputLabel>\n\n                                        <Select\n                                            label=\"Office Location\"\n                                            required\n                                            fullWidth\n                                            disabled={disableValue}\n                                            multiple\n\n                                            value={jobLocationState}\n                                            renderValue={(selected) =>\n                                                selected.map((item) => item.office_location).join(\", \")\n                                            }\n                                            onChange={(event) => {\n                                                setJobLocationState(event.target.value);\n                                            }}\n                                            >\n                                            {location.state.office.map((item, index) => (\n                                                <MenuItem key={\"aa\" + item.id} value={item}>\n                                                {item.office_location}\n                                                </MenuItem>\n                                            ))}\n                                            </Select>\n                                        </FormControl>\n                                                                 \n                                    </Stack>     \n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        {/* --------------------- Primary Technology --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Must Have Technologies *\"\n                                            // disabled= {\"true\" ? formik.values.primaryTechnology.length === 5 : \"false\"}\n                                            disabled\n                                            multiple\n\n                                            {...getFieldProps(\"primaryTechnology\")}\n\n                                            error={Boolean(touched.primaryTechnology && errors.primaryTechnology)}\n                                            helperText={touched.primaryTechnology && errors.primaryTechnology}\n                                            SelectProps={{\n                                                multiple: true,\n                                                value: formik.values.primaryTechnology,\n                                                onChange: (selectedOption) => handleChange(\"primaryTechnology\")(selectedOption)\n                                            }}\n                                            >\n                                            {location.state.technologyData.map((technology) => (\n                                                <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                                            ))}\n                                        </TextField>\n\n                                        {/* --- Secondary Technology --- */}\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            label=\"Good To Have Technologies *\"\n                                            multiple\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"secondaryTechnology\")}\n\n                                            error={Boolean(touched.secondaryTechnology && errors.secondaryTechnology)}\n                                            helperText={touched.secondaryTechnology && errors.secondaryTechnology}\n                                            SelectProps={{\n                                                multiple: true,\n                                                value: formik.values.secondaryTechnology,\n                                                onChange: (selectedOption) => handleChange(\"secondaryTechnology\")(selectedOption)\n                                            }}\n                                            >\n                                            {location.state.technologyData.map((technology) => (\n                                                <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        {/* --------------------- Good To Have Skills --------------------- */}\n                                        {/* <TextField\n                                            fullWidth\n                                            label=\"Good To Have Skills *\"\n                                            multiline\n                                            rows={3}\n                                            {...getFieldProps(\"additionalSkills\")}\n                                            error={Boolean(touched.additionalSkills && errors.additionalSkills)}\n                                            helperText={touched.additionalSkills && errors.additionalSkills}\n                                        >\n                                        </TextField>                                         */}\n\n                                        {/* --------------------- Must Have Skills --------------------- */}\n                                        {/* <TextField\n                                            fullWidth\n                                            label=\"Must Have Skills *\"\n                                            multiline\n                                            rows={3}\n                                            {...getFieldProps(\"requiredSkills\")}\n                                            error={Boolean(touched.requiredSkills && errors.requiredSkills)}\n                                            helperText={touched.requiredSkills && errors.requiredSkills}\n                                        >\n                                        </TextField> */}\n\n                                        {/* ------ Job Description ------ */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Job Description *\"\n                                            multiline\n                                            rows={8}\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"jobDescription\")}\n\n                                            error={Boolean(touched.jobDescription && errors.jobDescription)}\n                                            helperText={touched.jobDescription && errors.jobDescription}\n                                        >\n                                        </TextField>                                        \n\n                                        {/* --------------------- Responsibilities --------------------- */}\n                                        <TextField\n                                            fullWidth\n                                            label=\"Responsibilities\"\n                                            disabled={disableValue}\n                                            multiline\n                                            rows={8}\n\n                                            {...getFieldProps(\"responsibilities\")}\n\n                                            error={Boolean(touched.responsibilities && errors.responsibilities)}\n                                            helperText={touched.responsibilities && errors.responsibilities}\n                                        >\n                                        </TextField>\n                                    </Stack>                               \n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2} justifyContent=\"center\">\n                                        {/* --------------------- Is Active --------------------- */}\n                                        <Typography>\n                                            <Checkbox checked={checked} onChange={handleIsActiveChange}\n                                            disabled={disableValue} />\n                                            Show on Job Openings Page\n                                        </Typography>\n                                    </Stack>                                    \n\n                                    <LoadingButton\n                                        fullWidth\n                                        size=\"large\"\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        loading={isSubmitting}\n                                        disabled={disableValue}\n                                    >\n                                        Update Requisition\n                                    </LoadingButton>                                    \n                                </Stack>\n                            </CardContent>                                                                 \n                        </Card>\n                    </Form>\n                </FormikProvider>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisition/CreateRequisition.js",["1719","1720","1721","1722","1723","1724","1725","1726","1727","1728","1729","1730"],"import React, { useState, useEffect } from 'react';\nimport { Autocomplete, Box, Button,  Checkbox, Container, InputLabel, Link, MenuItem, Select, Stack, Step, Stepper, StepLabel, TextField,Typography} from '@mui/material';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport Page from '../../Page';\nimport axios from 'axios';\nimport * as Yup from \"yup\";\nimport { format } from 'date-fns';\nimport { LoadingButton } from \"@mui/lab\";\nimport {useSnackbar} from 'notistack';\nimport * as constants from 'src/utils/constants';\nimport ArrowCircleLeftIcon from '@mui/icons-material/ArrowCircleLeft';\n\nconst steps = ['New Requisition Details', 'Job Details', 'Requirements Details'];\n\nexport default function CreateRequisition() {\n    const { enqueueSnackbar} = useSnackbar();\n    const navigate = useNavigate();\n\n    const [techStackTechnologyAPIData, setTechStackTechnologyAPIData] = useState([])\n    const [techStacksArray, setTechStacksArray] = useState([])\n\n    const getTechStackTechnology = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-technologies/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechStackTechnologyAPIData(response.data.data)\n\n            var techStacks = response.data.data.map((obj) => (obj.technology_stack))\n            setTechStacksArray(techStacks)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    const [technologyData, setTechnologyData] = useState([])\n    const [secondaryTechnologyArray, setSecondaryTechnologyArray] = useState([])\n\n    const [options, setOptions] = useState([])\n\n    const getTechnologyData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechnologyData(response.data.data)\n            // setSecondaryTechnologyArray(response.data.data)\n            setOptions(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    };\n\n    // dropdown1 => Must Have Technologies\n    // dropdown2 => Good To Have Technologies\n    const [selectedOptions1, setSelectedOptions1] = useState([]);\n    const [selectedOptions2, setSelectedOptions2] = useState([]);\n  \n    const handleDropdown1Change = (value) => {\n      const selectedOptions = value.map(obj => obj.id);\n      setSelectedOptions1(selectedOptions)\n      setSelectedOptions2(selectedOptions2.filter(option => !selectedOptions.includes(option)));\n      setFieldValue(\"primaryTechnology\", value.map(obj => obj.id))\n    };\n  \n    const handleDropdown2Change = (value) => {\n      const selectedOptions = value.map(obj => obj.id);\n      setSelectedOptions2(selectedOptions)\n      setSelectedOptions1(selectedOptions1.filter(option => !selectedOptions.includes(option)));\n      setFieldValue(\"secondaryTechnology\", value.map(obj => obj.id))\n    };\n  \n    const dropdown1Options = options.filter(option => !selectedOptions2.includes(option.id));\n    const dropdown2Options = options.filter(option => !selectedOptions1.includes(option.id));\n\n    // set default fsd members on tech stack change\n    const [stackRecruiterData, setStackRecruiterData] = useState([])\n\n    const getStackTechnologies = (props) => {\n        handleChange(\"techStack\")(props)\n\n        const data = {\n            tech_stack_id: props.target.value\n        }\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-recruiter/', data, {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setStackRecruiterData(response.data.data)\n            handleChange(\"defaultFsdMember\")(`${response.data.data.id}`)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n\n        var techstack = techStackTechnologyAPIData.filter(obj => {\n            return obj.technology_stack.id === data.tech_stack_id\n        })[0]\n\n        var tech_ids = techstack.technologies.map((obj) => obj.id)\n        \n        // setFieldValue(\"primaryTechnology\", tech_ids)\n\n        // setFieldValue(\"secondaryTechnology\", [1, 2])\n\n        // Filter data for secondary technology options (Do not include selected values primary tech)\n\n        var secondaryTechnologyData = technologyData.filter(obj => {\n            return !tech_ids.includes(obj.id)\n        })\n\n        // setSecondaryTechnologyArray(secondaryTechnologyData)\n    }\n\n    // requisition template data state\n    const [requisitionTemplateData, setRequisitionTemplateData] = useState([])\n    const getRequisitionTemplates = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-template/', {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionTemplateData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n\n        axios.get(\"http://10.0.2.117:8000/api/v1/requisitions/\", {headers: {\"Authorization\": `Token 5891032b40088d5617039a2219360d8c6dcb8003`}})\n        .then((response) => {\n            setRequisitionTemplateData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n    }\n\n    // rrf-number state\n    const [rrfNumberData, setRRFNumberData] = useState([])\n    const getRRFNumber = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/rrf-number/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRRFNumberData(response.data.data)\n            handleChange('rrfNumber')(`${response.data.data}`)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }\n\n    // tech stack state\n    const [techStackData, setTechStackData] = useState([])\n    const getTechStackData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/tech-stack/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setTechStackData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get fsd members\n    const [fsdMembersData, setFsdMembers] = useState([])\n    const getFsdMembers = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/fsd-members/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setFsdMembers(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get business units\n    const [businessUnitData, setBusinessUnitData] = useState([])\n    const getBusinessUnits = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/business-units/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setBusinessUnitData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };  \n    \n    // get job category / requisition department\n    const [requisitionDepartmentData, setRequisitionDepartmentData] = useState([])\n    const getRequisitionDepartment = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-category/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionDepartmentData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }; \n    \n    // get requisition types\n    const [requisitionTypeData, setRequisitionTypeData] = useState([])\n    const getRequisitionTypes = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT +'/api/v1/requisition-types/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionTypeData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get office locations\n    const [officeLocationData, setOfficeLocationData] = useState([])\n    const getOfficeLocations = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/office-locations/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setOfficeLocationData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // get requisition status\n    const [requisitionStatusData, setRequisitionStatusData] = useState([])\n    const getRequisitionStatusData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-status/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setRequisitionStatusData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    // pre-fill requisition create form on rrf template selection\n    const fillRequisitionForm = (props) => {\n        handleChange(\"rrfTemplate\")(props)\n\n        let requisitionTemplate = requisitionTemplateData.filter(item => {\n            return item.id === props.target.value\n        })\n\n        // set default fsd members\n        const data = {\n            tech_stack_id: requisitionTemplate[0].tech_stack?.id\n        }\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-recruiter/', data, {headers: {\"Authorization\": `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setStackRecruiterData(response.data.data)\n            handleChange(\"defaultFsdMember\")(`${response.data.data.id}`)\n        })\n        .catch((e) => console.log('something went wrong (:', e));\n\n        handleChange(\"department\")(`${requisitionTemplate[0].department.id}`)\n        handleChange(\"techStack\")(`${requisitionTemplate[0].tech_stack.id}`)\n        // handleChange(\"additionalSkills\")(`${requisitionTemplate[0].additional_skills}`)\n        // handleChange(\"requiredSkills\")(`${requisitionTemplate[0].required_skills}`)\n        handleChange(\"jobDescription\")(`${requisitionTemplate[0].job_description}`)\n        handleChange(\"responsibilities\")(`${requisitionTemplate[0].responsibilities}`)\n        \n        setFieldValue(\"primaryTechnology\", requisitionTemplate[0].primary_technology.map(obj => obj.id))\n        setFieldValue(\"secondaryTechnology\", requisitionTemplate[0].other_technology.map(obj => obj.id))\n        \n        handleDropdown2Change(requisitionTemplate[0].other_technology)\n        handleDropdown1Change(requisitionTemplate[0].primary_technology)\n        \n        handleChange(\"jobName\")(`${requisitionTemplate[0].job_name}`)\n        handleChange(\"requiredExperience\")(`${requisitionTemplate[0].job_exp}`)\n    }\n\n    // is_active state\n    const [checked, setChecked] = useState(true);\n    const handleIsActiveChange = event =>{\n      setChecked(event.target.checked);\n    };\n\n    const newDate = new Date()\n    const minDate = format(newDate.setDate(newDate.getDate() + 30), 'yyyy-MM-dd')\n\n    useEffect(() => {\n        getTechStackTechnology()\n        getTechnologyData()\n        getRequisitionTemplates()\n        getTechStackData()\n        getFsdMembers()\n        getBusinessUnits()\n        getRequisitionDepartment()\n        getRequisitionTypes()\n        getOfficeLocations()\n        getRequisitionStatusData()\n        getRRFNumber()\n    }, [])\n\n    const createRequisitionSchema = Yup.object().shape({\n        rrfTemplate:  Yup.string()\n        .required(\"RRF template is required\"),\n        // rrfNumber: Yup.string()\n        // .required(\"RRF Number is required\"),\n        designation: Yup.string()\n        .required(\"Designation is required\"),\n        positions: Yup.number()\n        .required(\"Positions are required\"),\n        techStack: Yup.string()\n        .required(\"Tech Stack is required\"),\n        defaultFsdMember: Yup.string()\n        .required(\"Default FSD Member is required\"),\n        // assignedFsdMember: Yup.array()\n        // .min(1, \"Assigned FSD Member is required\")\n        // .required(\"Assigned FSD Member is required\"),\n        businessUnit: Yup.string()\n        .required(\"Business unit is required\"),\n        department: Yup.string()\n        .required(\"Department is required\"),\n        requisitionType: Yup.string()\n        .required(\"Requisition type is required\"),\n        expectedJoiningDate: Yup.string()\n        .required(\"Expected joining date is required\"),\n\n        jobName:  Yup.string(),\n        requiredExperience: Yup.string(),\n        requisitionStatus: Yup.string()\n        .required(\"Project location is required\"),\n\n        projectName:  Yup.string(),\n        projectLocation: Yup.string()\n        .required(\"Project location is required\"),\n        projectDuration: Yup.string(),\n        opportunityID: Yup.string(),\n        projectSummary: Yup.string(),\n        // additionalSkills: Yup.string()\n        // .required(\"Additional skills are required\"),\n        // requiredSkills: Yup.string()\n        // .required(\"Must have skills are required\"),\n        jobDescription: Yup.string()\n        .required(\"Job description is required\"),\n        responsibilities: Yup.string(),\n        hrSummary: Yup.string(),\n        projectStartDate: Yup.string(),\n        jobLocation: Yup.array()\n        .min(1, \"Job location is required\")\n        .required(\"Job location is required\").nullable(),\n        maxBudget: Yup.string()\n        .required(\"Maximum budget is required\"),\n        clientInterview: Yup.string()\n        .required(\"Client interview process is required\"),\n        targetCompany: Yup.string(),\n        referenceProfile: Yup.string(),\n        projectPersonalityTraits: Yup.string(),\n        primaryTechnology: Yup.array()\n        .min(1, \"Must have technologies are required\")\n        .required(\"Must have technologies are required\").nullable(),\n        secondaryTechnology: Yup.array()\n        .min(1, \"Good to have technologies are required\")\n        .required(\"Good to have technologies are required\").nullable(),\n    })\n    const formik = useFormik({\n        initialValues: {\n            rrfTemplate: \"\",\n\n            rrfNumber: \"\",\n            designation: \"\",\n            positions: \"\",\n            techStack: \"\",\n            defaultFsdMember: \"\",\n            assignedFsdMember: [],\n            businessUnit: \"\",\n            department: \"\",\n            requisitionType: \"\",\n            expectedJoiningDate: minDate,\n\n            jobName: \"\",\n            requiredExperience: \"\",\n            requisitionStatus: \"2\" ?? \"\",\n            primaryTechnology: [],\n            secondaryTechnology: [],\n            projectName: \"\",\n            projectLocation: \"\",\n            projectDuration: \"\",\n            opportunityID: \"\",\n            projectStartDate: \"\",\n            jobLocation: [],\n            maxBudget: \"\",\n            clientInterview: \"\",\n            projectSummary: \"\",\n            // additionalSkills: [],\n            // requiredSkills: [],\n            jobDescription: \"\",\n            responsibilities: \"\",\n            hrSummary: \"\",\n            comment: \"\",\n\n            targetCompany: \"\",\n            referenceProfile: \"\",\n            projectPersonalityTraits: \"\",\n        },\n        validationSchema: createRequisitionSchema,\n        onSubmit: (formValues) => {\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            const data = {\n                rrf_template: formValues.rrfTemplate,\n\n                designation: formValues.designation,\n                positions: formValues.positions,\n                tech_stack_id: formValues.techStack,\n                default_fsd_users_id: formValues.defaultFsdMember,\n                assigned_fsd_user_id: formValues.assignedFsdMember,\n                bu_group_id: formValues.businessUnit,\n                department_id: formValues.department,\n                requisite_type_id: formValues.requisitionType,\n                requisite_status_id: formValues.requisitionStatus,\n                expected_join_date: formValues.expectedJoiningDate,\n\n                job_name: formValues.jobName,\n                required_exp: formValues.requiredExperience,\n                project_name: formValues.projectName,\n                project_loc: formValues.projectLocation,\n                project_duration: formValues.projectDuration,\n                opportunity_id: formValues.opportunityID,\n                project_start_date: formValues.projectStartDate,\n                job_loc_id: formValues.jobLocation,\n                max_budget: formValues.maxBudget,\n                client_interview: formValues.clientInterview,\n                project_sum: formValues.projectSummary,\n                additional_skills: formValues.additionalSkills,\n                required_skills: formValues.requiredSkills,\n                job_description: formValues.jobDescription,\n                responsibilities: formValues.responsibilities,\n                hr_summary: formValues.hrSummary,\n                comment: formValues.comment,\n\n                target_company: formValues.targetCompany,\n                reference_profile: formValues.referenceProfile,\n                project_personality_traits: formValues.projectPersonalityTraits,\n\n                is_active: checked,\n\n                primary_technology_id: formValues.primaryTechnology,\n                other_technology_id: formValues.secondaryTechnology\n            }\n\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/requisitions/\", data, {headers})\n            .then(function (response) {\n                if (response.status === 200) {\n                    enqueueSnackbar(\"Requisition created successfully !!\", {\n                        anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                      },\n                        variant: 'success',\n                        autoHideDuration: 1500,\n                      });\n                      navigate('/resumex/myrequisition/', {replace: true});\n                      window.location.reload(false);                    \n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n                setSubmitting(false)\n            });            \n        }\n    })\n\n    const { errors, handleChange, setFieldValue, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting, values } = formik;\n\n    const projectLocations = [\n        {\n            value: 'ONSITE',\n            label: 'Onsite'\n        },\n        {\n            value: 'OFFSHORE',\n            label: 'Offshore'\n        },\n        {\n            value: 'BOTH',\n            label: 'Both'\n        },\n    ];\n\n    const clientInterviewProcess = [\n        {\n            value: 'true',\n            label: 'Yes'\n        },\n        {\n            value: 'false',\n            label: 'No'\n        },\n    ]\n\n    const designationData = [\n        {\n            value: 'Project Trainee',\n            label: 'Project Trainee'\n        },\n        {\n            value: 'Software Engineer',\n            label: 'Software Engineer'\n        },\n        {\n            value: 'Senior Software Engineer',\n            label: 'Senior Software Engineer'\n        },\n        {\n            value: 'Analyst Programmer',\n            label: 'Analyst Programmer'\n        },\n        {\n            value: 'Senior Analyst Programmer',\n            label: 'Senior Analyst Programmer'\n        },\n        {\n            value: 'Technical Lead',\n            label: 'Technical Lead'\n        },\n        {\n            value: 'Senior Technical Lead',\n            label: 'Senior Technical Lead'\n        },\n        {\n            value: 'Project Manager',\n            label: 'Project Manager'\n        }\n    ]\n\n    const opportunityData = [\n        {\n            value: 'Opportunity 1',\n            label: 'Opportunity 1'\n        },\n        {\n            value: 'Opportunity 2',\n            label: 'Opportunity 2'\n        },\n        {\n            value: 'Opportunity 3',\n            label: 'Opportunity 3'\n        },\n        {\n            value: 'Opportunity 4',\n            label: 'Opportunity 4'\n        },\n    ]\n\n    // ##################################  Stepper Code #################################################\n\n    const [activeStep, setActiveStep] = useState(0);\n\n    const isStepOptional = (step) => {\n        return step === 1;\n    };\n\n    const handleNext = () => {       \n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    }; \n\n    const handleBtnClick = () => {\n        if(activeStep === steps.length - 1){\n            handleReset()\n        }\n        else{\n            handleNext()\n        }\n    }\n\n    function renderStepContent(step) {\n        switch (step) {\n          case 1:\n                      \n            return (\n                <Stack spacing={10} sx={{mt: 10, mb: 12}}>\n                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={10}>\n                        {/* --------------------- RRF Number --------------------- */}\n                        <TextField\n                            fullWidth\n                            disabled\n                            label=\"RRF Number\"\n                            variant=\"standard\"\n                            {...getFieldProps(\"rrfNumber\")}\n                            error={Boolean(touched.rrfNumber && errors.rrfNumber)}\n                            helperText={touched.rrfNumber && errors.rrfNumber}\n                        >\n                        </TextField>\n\n                        {/* --------------------- Requisition Status --------------------- */}\n                        <TextField\n                            fullWidth\n                            select\n                            label=\"Requisition Status *\"\n                            variant=\"standard\"\n                            {...getFieldProps(\"requisitionStatus\")}\n                            error={Boolean(touched.requisitionStatus && errors.requisitionStatus)}\n                            helperText={touched.requisitionStatus && errors.requisitionStatus}\n                        >\n                            {requisitionStatusData.map((status) => (\n                                <MenuItem key={status.id} value={status.id}>{status.requisition_status}</MenuItem>\n                            ))}\n                        </TextField> \n                    </Stack>\n\n                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={10}>\n                        {/* --------------------- Requisition Type --------------------- */}\n                        <TextField\n                            fullWidth\n                            select\n                            label=\"Requisition Type *\"\n                            variant=\"standard\"\n                            // sx={{\n                            //     \"& .MuiInputLabel-root\": {color: '#5A5A5A'},//styles the label\n                            //     \"& .MuiOutlinedInput-root\": {\n                            //     \"& > fieldset\": { borderColor: \"#5A5A5A\" },\n                            //     },\n                            // }}\n                            {...getFieldProps(\"requisitionType\")}\n                            error={Boolean(touched.requisitionType && errors.requisitionType)}\n                            helperText={touched.requisitionType && errors.requisitionType}\n                        >\n                            {requisitionTypeData.map((type) => (\n                                <MenuItem key={type.id} value={type.id}>{type.req_type_name}</MenuItem>\n                            ))}\n                        </TextField>\n\n                        {/* --------------------- Opportunity ID --------------------- */}\n                        <TextField\n                            fullWidth\n                            select\n                            label=\"Opportunity ID\"\n                            variant=\"standard\"\n                            disabled={values.requisitionType === 1 ? false : true}\n                            // sx={{\n                            //     \"& .MuiInputLabel-root\": {color: '#5A5A5A'},//styles the label\n                            //     \"& .MuiOutlinedInput-root\": {\n                            //     \"& > fieldset\": { borderColor: \"#5A5A5A\" },\n                            //     },\n                            // }}\n                            {...getFieldProps(\"opportunityID\")}\n                            error={Boolean(touched.opportunityID && errors.opportunityID)}\n                            helperText={touched.opportunityID && errors.opportunityID}\n                        >\n                            {opportunityData.map((opportunity) => (\n                                <MenuItem key={opportunity.value} value={opportunity.value}>{opportunity.label}</MenuItem>\n                            ))}\n                        </TextField>\n                    </Stack>\n                \n                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={10}>\n                        {/* --------------------- Requisition Template --------------------- */}\n                        <TextField\n                            fullWidth\n                            select\n                            label=\"Select Requisition Template\"\n                            variant=\"standard\"\n                            // sx={{\n                            //     \"& .MuiInputLabel-root\": {color: '#5A5A5A'},//styles the label\n                            //     \"& .MuiOutlinedInput-root\": {\n                            //     \"& > fieldset\": { borderColor: \"#5A5A5A\" },\n                            //     },\n                            // }}\n                            {...getFieldProps(\"rrfTemplate\")}\n                            onChange={(selectedOption) => fillRequisitionForm(selectedOption)}\n                            value = {formik.values.rrfTemplate}\n                            error={Boolean(touched.rrfTemplate && errors.rrfTemplate)}\n                            helperText={touched.rrfTemplate && errors.rrfTemplate}\n                            SelectProps={{\n                                MenuProps: {\n                                    style: {\n                                        maxHeight: 500,\n                                    },\n                                }\n\n                            }}\n\n                        >\n                            {requisitionTemplateData.map((template) => (\n                                <MenuItem key={template.id} value={template.id}>\n                                    {\"id: \" + template.id + \" | \" + template.job_name + \" | \" + template.job_exp}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n\n                        {/* --------------------- Department --------------------- */}\n                        <TextField\n                            fullWidth\n                            select\n                            label=\"Department *\"\n                            variant=\"standard\"\n                            // sx={{\n                            //     \"& .MuiInputLabel-root\": {color: '#5A5A5A'},//styles the label\n                            //     \"& .MuiOutlinedInput-root\": {\n                            //     \"& > fieldset\": { borderColor: \"#5A5A5A\" },\n                            //     },\n                            // }}\n                            {...getFieldProps(\"department\")}\n                            error={Boolean(touched.department && errors.department)}\n                            helperText={touched.department && errors.department}\n                        >\n                            {requisitionDepartmentData.map((department) => (\n                                <MenuItem key={department.id} value={department.id}>{department.job_category_name}</MenuItem>\n                            ))}\n                        </TextField>\n                    </Stack>\n                </Stack>\n            );\n\n          case 2:\n            return (\n                <Stack spacing={3} sx={{mt: 6}}>\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    {/* --------------------- Business Unit --------------------- */}\n                    <TextField\n                        fullWidth\n                        select\n                        label=\"Business Unit *\"\n                        {...getFieldProps(\"businessUnit\")}\n                        error={Boolean(touched.businessUnit && errors.businessUnit)}\n                        helperText={touched.businessUnit && errors.businessUnit}\n                    >\n                        {businessUnitData.map((unit) => (\n                            <MenuItem key={unit.id} value={unit.id}>{unit.bu_name}</MenuItem>\n                        ))}\n                    </TextField>\n\n                    {/* --------------------- Designation --------------------- */}\n                    <TextField\n                        fullWidth\n                        select\n                        label=\"Designation *\"\n                        {...getFieldProps(\"designation\")}\n                        error={Boolean(touched.designation && errors.designation)}\n                        helperText={touched.designation && errors.designation}\n                    >\n                        {designationData.map((designation) => (\n                            <MenuItem key={designation.value} value={designation.value}>{designation.label}</MenuItem>\n                        ))}\n                    </TextField>\n\n                    {/* --------------------- Number of Positions --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Number of Positions *\"\n                        type=\"number\"\n                        {...getFieldProps(\"positions\")}\n                        error={Boolean(touched.positions && errors.positions)}\n                        helperText={touched.positions && errors.positions}\n                    >\n                    </TextField>\n\n\n                    {/* --------------------- Max Budget for the Position --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Max Budget for the Position *\"\n                        {...getFieldProps(\"maxBudget\")}\n                        error={Boolean(touched.maxBudget && errors.maxBudget)}\n                        helperText={touched.maxBudget && errors.maxBudget}\n                    >\n                    </TextField> \n                </Stack>\n                \n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                    {/* --------------------- Default FSD Member --------------------- */}\n                    {/* <TextField\n                        fullWidth\n                        disabled\n                        select\n                        label=\"Default FSD Member\"\n                        {...getFieldProps(\"defaultFsdMember\")}\n                        value = {formik.values.defaultFsdMember}\n                        error={Boolean(touched.defaultFsdMember && errors.defaultFsdMember)}\n                        helperText={touched.defaultFsdMember && errors.defaultFsdMember}\n                        >\n                            <MenuItem\n                            key={stackRecruiterData?.id} \n                            value={stackRecruiterData?.id}>\n                                {stackRecruiterData?.recruiters?.map(\n                                    (recruiter, index) => (index ? ', ': '') + recruiter?.member?.first_name + \" \" + recruiter?.member?.last_name)}\n                            </MenuItem>\n                    </TextField> */}\n\n                    {/* --------------------- Assigned FSD Member --------------------- */}\n                    {/* <TextField\n                        fullWidth\n                        select\n                        label=\"Assigned FSD Member\"\n                        multiple\n                        {...getFieldProps(\"assignedFsdMember\")}\n                        error={Boolean(touched.assignedFsdMember && errors.assignedFsdMember)}\n                        helperText={touched.assignedFsdMember && errors.assignedFsdMember}\n                        SelectProps={{\n                            multiple: true,\n                            value: formik.values.assignedFsdMember,\n                            onChange: (selectedOption) => handleChange(\"assignedFsdMember\")(selectedOption)\n                        }}\n                        >\n                        {fsdMembersData.map((member) => (\n                            <MenuItem \n                            key={member.id} \n                            value={member.id}>\n                                {member.member.first_name + \" \" + member.member.last_name}\n                            </MenuItem>\n                        ))}\n                    </TextField> */}\n\n                    {/* --------------------- Project Name --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Project Name\"\n                        {...getFieldProps(\"projectName\")}\n                        error={Boolean(touched.projectName && errors.projectName)}\n                        helperText={touched.projectName && errors.projectName}\n                    >\n                    </TextField>\n\n                    {/* --------------------- Project Location --------------------- */}\n                    <TextField\n                        select\n                        fullWidth\n                        label=\"Project Location *\"\n                        {...getFieldProps(\"projectLocation\")}\n                        error={Boolean(touched.projectLocation && errors.projectLocation)}\n                        helperText={touched.projectLocation && errors.projectLocation}\n                    >\n                        {projectLocations.map((location) => (\n                            <MenuItem key={location.value} value={location.value}>{location.label}</MenuItem>\n                        ))}\n                    </TextField>\n\n                    {/* --------------------- Project Duration --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Project Duration\"\n                        {...getFieldProps(\"projectDuration\")}\n                        error={Boolean(touched.projectDuration && errors.projectDuration)}\n                        helperText={touched.projectDuration && errors.projectDuration}\n                    >\n                    </TextField>\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    {/* --------------------- Client Interview Process --------------------- */}\n                    <TextField\n                        fullWidth\n                        select\n                        label=\"Client Interview Process *\"\n                        {...getFieldProps(\"clientInterview\")}\n                        error={Boolean(touched.clientInterview && errors.clientInterview)}\n                        helperText={touched.clientInterview && errors.clientInterview}\n                    >\n                        {clientInterviewProcess.map((process) => (\n                            <MenuItem key={process.value} value={process.value}>{process.label}</MenuItem>\n                        ))}\n                    </TextField>\n                {/* </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}> */}\n                    {/* --------------------- Tentative Project Start Date --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Tentative Project Start Date\"\n                        type=\"date\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        {...getFieldProps(\"projectStartDate\")}\n                        error={Boolean(touched.projectStartDate && errors.projectStartDate)}\n                        helperText={touched.projectStartDate && errors.projectStartDate}\n                    >\n                    </TextField>\n\n                    {/* --------------------- Expected Joining Date --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Expected Joining Date *\"\n                        type=\"date\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        InputProps={{inputProps: { min: minDate} }}\n                        {...getFieldProps(\"expectedJoiningDate\")}\n                        error={Boolean(touched.expectedJoiningDate && errors.expectedJoiningDate)}\n                        helperText={touched.expectedJoiningDate && errors.expectedJoiningDate}\n                    >\n                    </TextField>                                                                                                                                                                                                                                             \n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                    {/* --------------------- Project Summary --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Project Summary\"\n                        multiline\n                        rows={6}\n                        {...getFieldProps(\"projectSummary\")}\n                        error={Boolean(touched.projectSummary && errors.projectSummary)}\n                        helperText={touched.projectSummary && errors.projectSummary}\n                    >\n                    </TextField>\n\n                    {/* --------------------- HR Summary --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Confidential information for HR (If any)\"\n                        multiline\n                        rows={6}\n                        {...getFieldProps(\"hrSummary\")}\n                        error={Boolean(touched.hrSummary && errors.hrSummary)}\n                        helperText={touched.hrSummary && errors.hrSummary}\n                    >\n                    </TextField>\n\n                    {/* --------------------- Comment --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Comment (If any)\"\n                        multiline\n                        rows={6}\n                        {...getFieldProps(\"comment\")}\n                        error={Boolean(touched.comment && errors.comment)}\n                        helperText={touched.comment && errors.comment}\n                    >\n                    </TextField>\n                </Stack>\n                \n                <Stack spacing={3}>\n                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2} sx={{mb: 5}}>\n                        {/* --------------------- Target Companies --------------------- */}\n                        <TextField\n                            fullWidth\n                            label=\"Target Companies(if Any)\"\n                            {...getFieldProps(\"targetCompany\")}\n                            error={Boolean(touched.targetCompany && errors.targetCompany)}\n                            helperText={touched.targetCompany && errors.targetCompany}\n                        >\n                        </TextField>\n\n                        {/* ----------------- Reference Profile/Link of Similar Candidate ------------- */}\n                        <TextField\n                            fullWidth\n                            label=\"Reference Profile/Link of Similar Candidate\"\n                            {...getFieldProps(\"referenceProfile\")}\n                            error={Boolean(touched.referenceProfile && errors.referenceProfile)}\n                            helperText={touched.referenceProfile && errors.referenceProfile}\n                        >\n                        </TextField>\n\n                        {/* ----------------- Personality traits for Project/Assignment ---------------- */}\n                        <TextField\n                            fullWidth\n                            label=\"Personality traits for Project/Assignment\"\n                            {...getFieldProps(\"projectPersonalityTraits\")}\n                            error={Boolean(touched.projectPersonalityTraits && errors.projectPersonalityTraits)}\n                            helperText={touched.projectPersonalityTraits && errors.projectPersonalityTraits}\n                        >\n                        </TextField>\n                    </Stack>\n                </Stack>\n                            \n            \n            </Stack>\n            );\n\n          case 3:\n            return (\n                <Stack spacing={3} sx={{mt: 5}}>\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    <Typography variant=\"h10\" color=\"#800000\" >\n                        Note: Below details will be visible on the job openings page.\n                    </Typography>\n                </Stack>\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    {/* --------------------- Job Name --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Job Name\"\n                        {...getFieldProps(\"jobName\")}\n                        error={Boolean(touched.jobName && errors.jobName)}\n                        helperText={touched.jobName && errors.jobName}\n                    >\n                    </TextField>\n\n                    {/* --------------------- Required Experience --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Required Experience\"\n                        {...getFieldProps(\"requiredExperience\")}\n                        error={Boolean(touched.requiredExperience && errors.requiredExperience)}\n                        helperText={touched.requiredExperience && errors.requiredExperience}\n                    >\n                    </TextField>\n\n                    {/* --------------------- Job Location --------------------- */}\n                    {/* <TextField\n                        fullWidth\n                        select\n                        label=\"Job Location *\"\n                        multiple\n                        red    {...getFieldProps(\"jobLocation\")}\n                        error={Boolean(touched.jobLocation && errors.jobLocation)}\n                        helperText={touched.jobLocation && errors.jobLocation}\n                        SelectProps={{\n                            multiple: true,\n                            value: formik.values.jobLocation,\n                            onChange: (selectedOption) => handleChange(\"jobLocation\")(selectedOption)\n                        }}\n                    >\n                        {officeLocationData.map((location) => (\n                            <MenuItem key={location.id} value={location.id}>{location.office_location}</MenuItem>\n                        ))}\n                    </TextField> */}\n\n                    <Autocomplete\n                        multiple\n                        fullWidth\n                        id=\"tags-outlined\"\n                        options={officeLocationData}\n                        getOptionLabel={(option) => option.office_location}\n                        onChange={(event, value) => setFieldValue(\"jobLocation\", value.map(obj => obj.id))}\n                        renderInput={(params) => (\n                            <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Job Location *\"\n                            {...getFieldProps(\"jobLocation\")}\n                            error={Boolean(touched.jobLocation && errors.jobLocation)}\n                            helperText={touched.jobLocation && errors.jobLocation}\n                            />\n                        )}\n                        >\n                    </Autocomplete>\n                </Stack> \n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    {/* --------------------- TechStack --------------------- */}\n                    <TextField\n                        fullWidth\n                        select\n                        label=\"Tech Stack *\"\n                        sx={{width: \"50%\"}}\n                        {...getFieldProps(\"techStack\")}\n                        onChange={(selectedOption) => getStackTechnologies(selectedOption)}\n                        value = {formik.values.techStack}\n                        error={Boolean(touched.techStack && errors.techStack)}\n                        helperText={touched.techStack && errors.techStack}\n                        >\n                        {techStacksArray.map((techstack) => (\n                            <MenuItem key={techstack.id} value={techstack.id}>{techstack.tech_stack_name}</MenuItem>\n                        ))}\n                    </TextField>\n\n                    {/* --------------------- Primary Technology --------------------- */}\n                    {/* <TextField\n                        fullWidth\n                        select\n                        label=\"Must Have Technologies *\"\n                        // disabled= {\"true\" ? formik.values.primaryTechnology.length === 5 : \"false\"}\n                        // disabled\n                        multiple\n                        {...getFieldProps(\"primaryTechnology\")}\n                        error={Boolean(touched.primaryTechnology && errors.primaryTechnology)}\n                        helperText={touched.primaryTechnology && errors.primaryTechnology}\n                        SelectProps={{\n                            multiple: true,\n                            value: formik.values.primaryTechnology,\n                            onChange: (selectedOption) => handleChange(\"primaryTechnology\")(selectedOption)\n                        }}\n                        >\n                        {technologyData.map((technology) => (\n                            <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                        ))}\n                    </TextField> */}\n\n                    <Autocomplete\n                        multiple\n                        fullWidth\n                        id=\"tags-outlined\"\n                        options={dropdown1Options}\n                        getOptionLabel={(option) => option.technology_name}\n                        onChange={(event, value) => handleDropdown1Change(value)}\n                        defaultValue={technologyData.filter(obj => {\n                            return values.primaryTechnology.includes(obj.id)\n                        })}\n                        // onChange={(event, value) => setFieldValue(\"primaryTechnology\", value.map(obj => obj.id))}\n                        renderInput={(params) => (\n                            <TextField\n                            inputProps={{\n                                autoComplete: 'new-password',\n                              }}\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Must Have Technologies *\"\n                            {...getFieldProps(\"primaryTechnology\")}\n                            error={Boolean(touched.primaryTechnology && errors.primaryTechnology)}\n                            helperText={touched.primaryTechnology && errors.primaryTechnology}\n                            />\n                        )}\n                        >\n                    </Autocomplete>\n\n                    {/* --------------------- Secondary Technology --------------------- */}\n                    {/* <TextField\n                        fullWidth\n                        select\n                        label=\"Good To Have Technologies *\"\n                        multiple\n                        {...getFieldProps(\"secondaryTechnology\")}\n                        error={Boolean(touched.secondaryTechnology && errors.secondaryTechnology)}\n                        helperText={touched.secondaryTechnology && errors.secondaryTechnology}\n                        SelectProps={{\n                            multiple: true,\n                            value: formik.values.secondaryTechnology,\n                            onChange: (selectedOption) => handleChange(\"secondaryTechnology\")(selectedOption)\n                        }}\n                        >\n                        {secondaryTechnologyArray.map((technology) => (\n                            <MenuItem key={technology.id} value={technology.id}>{technology.technology_name}</MenuItem>\n                        ))}\n                    </TextField> */}\n\n                    <Autocomplete\n                        multiple\n                        fullWidth\n                        id=\"tags-outlined\"\n                        options={dropdown2Options}\n                        getOptionLabel={(option) => option.technology_name}\n                        onChange={(event, value) => handleDropdown2Change(value)}\n                        defaultValue={technologyData.filter(obj => {\n                            return values.secondaryTechnology.includes(obj.id)\n                        })}\n                        // onChange={(event, value) => setFieldValue(\"secondaryTechnology\", value.map(obj => obj.id))}\n                        renderInput={(params) => (\n                            <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Good To Have Technologies *\"\n                            {...getFieldProps(\"secondaryTechnology\")}\n                            error={Boolean(touched.secondaryTechnology && errors.secondaryTechnology)}\n                            helperText={touched.secondaryTechnology && errors.secondaryTechnology}\n                            />\n                        )}\n                        >\n                    </Autocomplete>\n\n                    {/* --------------------- Good To Have Skills --------------------- */}\n                    {/* <TextField\n                        fullWidth\n                        label=\"Good To Have Skills *\"\n                        multiline\n                        rows={1}\n                        {...getFieldProps(\"additionalSkills\")}\n                        error={Boolean(touched.additionalSkills && errors.additionalSkills)}\n                        helperText={touched.additionalSkills && errors.additionalSkills}\n                    >\n                    </TextField>   */}\n                    \n                    {/* --------------------- Must Have Skills --------------------- */}\n                    {/* <TextField\n                        fullWidth\n                        label=\"Must Have Skills *\"\n                        multiline\n                        rows={1}\n                        {...getFieldProps(\"requiredSkills\")}\n                        error={Boolean(touched.requiredSkills && errors.requiredSkills)}\n                        helperText={touched.requiredSkills && errors.requiredSkills}\n                    >\n                    </TextField>                                       */}\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                    {/* --------------------- Job Description --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Job Description *\"\n                        multiline\n                        rows={10}\n                        {...getFieldProps(\"jobDescription\")}\n                        error={Boolean(touched.jobDescription && errors.jobDescription)}\n                        helperText={touched.jobDescription && errors.jobDescription}\n                    >\n                    </TextField>\n\n                    {/* --------------------- Responsibilities --------------------- */}\n                    <TextField\n                        fullWidth\n                        label=\"Responsibilities\"\n                        multiline\n                        rows={10}\n                        {...getFieldProps(\"responsibilities\")}\n                        error={Boolean(touched.responsibilities && errors.responsibilities)}\n                        helperText={touched.responsibilities && errors.responsibilities}\n                    >\n                    </TextField>                                  \n                </Stack>                        \n            \n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={0} justifyContent=\"center\">\n                    {/* --------------------- Is Active --------------------- */}\n                    <Typography>\n                        <Checkbox checked={checked} onChange={handleIsActiveChange}/>\n                        Publish On Openings Page\n                    </Typography>\n                </Stack>                                    \n            </Stack>\n            );\n           \n          default:\n            return <div>Not Found</div>;\n        }\n      }\n\n  \n    return (\n        <Page title=\"Requisition\">\n            <Container maxWidth=\"xl\" sx={{ mt:0 }} >\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={72} sx={{ mb: 5 }}>\n                    <Link to=\"/resumeX/myrequisition/\"\n                        color=\"green\" \n                        underline=\"hover\" \n                        component={RouterLink} \n                        fontSize=\"20px\">\n                            <ArrowCircleLeftIcon fontSize=\"large\" />\n                    </Link>\n\n                    <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Create Requisition</h2>\n\n                    {/* <Typography variant=\"h4\" sx={{ mb:5 }} align=\"center\">\n                        Create Requisition\n                    </Typography> */}\n                </Stack>\n\n                <Box sx={{ width: '100%' }}>\n                    <Stepper activeStep={activeStep} alternativeLabel\n                      sx={{\n                        \"& .MuiStepConnector-line\": {\n                          borderTopWidth: \"4px\",\n                        },\n                        \"& .MuiStepConnector-root.Mui-completed .MuiStepConnector-line\": {\n                          borderColor: \"green\",\n                        },\n                    }}\n                    >\n                        {steps.map((label, index) => {\n                        const stepProps = {};\n                        const labelProps = {};\n                        // if (isStepOptional(index)) {\n                        //     labelProps.optional = (\n                        //     <Typography variant=\"caption\">Optional</Typography>\n                        //     );\n                        // }\n                        // if (isStepSkipped(index)) {\n                        //     stepProps.completed = false;\n                        // }\n                        return (\n                            <Step key={label} {...stepProps}>\n                            <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n                        );\n                        })}\n                    </Stepper>\n\n                        <React.Fragment>\n                        \n                            <FormikProvider value={formik}>\n                                <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                                    {renderStepContent(activeStep+1)}\n\n\n                        <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                            <Button\n                            color=\"inherit\"\n                            disabled={activeStep === 0}\n                            onClick={handleBack}\n                            sx={{ mr: 1, fontSize: 18 }}\n                            size=\"medium\"\n                            >\n                            Back\n                            </Button>\n                            <Box sx={{ flex: '1 1 auto' }} />\n\n                            {activeStep === steps.length - 1 ? (\n                            <Stack spacing={3}>\n                                <LoadingButton\n                                    fullWidth\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    loading={isSubmitting}\n                                >\n                                    Create Requisition\n                                </LoadingButton>\n                            </Stack>\n                            ):(\n                            <Button onClick={handleNext} size=\"medium\" sx={{fontSize: 15}} variant=\"contained\">\n                            Next\n                            </Button>\n                            )}\n                        </Box>\n                        </Form>\n                            </FormikProvider>\n                        </React.Fragment>\n                </Box>\n            </Container>\n\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/businessUnits/BusinessUnits.js",["1731","1732","1733","1734"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\n// import UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function BusinessUnits() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Business Units\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var bid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/business-units/edit/${bid}`}\n                            state={{fromPage: \"business-units\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [BusinessUnitsData, setBusinessUnitsData] = useState([])\n    const getBusinessUnits = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/business-units/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setBusinessUnitsData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getBusinessUnits()\n    }, [])\n\n    return (\n        <Page title=\"Business Unit | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Business Unit</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/business-units/add-business-units/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Business Unit \n                            </Button>\n                        }\n\n                        data={BusinessUnitsData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.bu_name,\n                                data?.created,\n                                data?.modified,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/theme/shadows.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/noticePeriod/EditNoticePeriod.js",["1735","1736","1737","1738","1739","1740"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditNoticePeriod() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores NoticePeriod information\n    const [NoticePeriodInfo, setNoticePeriodInfo] = useState({});\n\n\n    const getNoticePeriodInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"notice-period/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setNoticePeriodInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getNoticePeriodInfo();\n    }, [])\n\n    const callEditNoticePeriodAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"notice-period/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/notice-period\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const NoticePeriodSchema = Yup.object().shape({\n        NoticePeriodName: Yup.string()\n            .required(\"Notice Period name required\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            NoticePeriodName: NoticePeriodInfo?.notice_period ?? '',        \n        },\n        enableReinitialize: true,\n        validationSchema: NoticePeriodSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"notice_period\": values.NoticePeriodName,\n            }\n\n            // call Edit NoticePeriod API\n            callEditNoticePeriodAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Notice Period\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/notice-period\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Notice Period\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Notice Period\"\n\n                                            {...getFieldProps('NoticePeriodName')}\n\n                                            error={Boolean(touched.NoticePeriodName && errors.NoticePeriodName)}\n                                            helperText={touched.NoticePeriodName && errors.NoticePeriodName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update Notice Period\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/typography.js",[],"/home/raj/Desktop/resumeX/resumeX/src/utils/Authorization/UserInfo.js",["1741","1742","1743"],"import React, { useEffect, useState } from 'react'\nimport { useAuth } from '../auth'\nimport PERMISSIONS from './Permissions'\n\nconst UserInfo = () =>  {\n    const auth_user = useAuth()\n    const local_user = JSON.parse(localStorage.getItem(\"user\"))\n    const local_key = localStorage.getItem(\"authToken\")\n    const [user_data, set_user_data] = useState({})\n\n    useEffect(() => {\n      if (Object.keys(auth_user.user).length === 0)\n      {\n        if (local_key && local_user){\n          var pk = local_user.pk\n          var user_name = local_user.username\n          var f_name = local_user.first_name\n          var m_name = local_user.middle_name\n          var l_name = local_user.last_name\n          var u_email = local_user.email\n          var u_mobile = local_user.mobile\n          var u_master_role = local_user.master_role.master_role\n          var u_role = local_user.role.role_name\n          var u_perm = local_user.permissions\n          var join_date = local_user.joined_date\n          var modify_date = local_user.update_date\n          var is_active = local_user.is_active\n          var is_staff = local_user.is_staff\n\n          set_user_data({ pk: pk, username: user_name, first_name: f_name, \n            middle_name: m_name, last_name: l_name, master_role: u_master_role, \n            role:u_role, permissions: u_perm, email: u_email, mobile: u_mobile, joining_data: join_date,\n            profile_update_date: modify_date, is_active: is_active,\n            is_staff: is_staff  \n          })\n        \n        }    \n      }\n    else{\n        set_user_data(auth_user.user)\n    }      \n    },[])\n  \n    return user_data\n\n}\nexport default UserInfo","/home/raj/Desktop/resumeX/resumeX/src/theme/palette.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/noticePeriod/AddNoticePeriodForm.js",["1744","1745","1746","1747","1748","1749"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddNoticePeriodForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddNoticePeriodAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"notice-period/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/notice-period\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const NoticePeriodSchema = Yup.object().shape({\n        NoticePeriodName: Yup.string()\n            .required(\"Notice Period name required\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            NoticePeriodName: '',\n            \n        },\n        validationSchema: NoticePeriodSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"notice_period\": values.NoticePeriodName,\n            }\n\n            // call create NoticePeriod API\n            callAddNoticePeriodAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Notice Period\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/notice-period\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Notice Period\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Notice Period Name\"\n\n                                            {...getFieldProps('NoticePeriodName')}\n\n                                            error={Boolean(touched.NoticePeriodName && errors.NoticePeriodName)}\n                                            helperText={touched.NoticePeriodName && errors.NoticePeriodName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Notice Period\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/theme/shape.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/Page.js",[],"/home/raj/Desktop/resumeX/resumeX/src/_mocks_/user.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/authentication/login/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/booked-interview/PreviousRoundsDetailCards.js",["1750","1751","1752","1753","1754"],"import PropTypes from 'prop-types';\nimport { alpha, styled } from '@mui/material/styles';\nimport { Dialog, DialogContent, Card, Checkbox, Grid, Avatar, \n    Table, TableContainer, TableRow, TableHead, TextField, TableBody, TableCell, Tooltip, Typography, CardContent, Rating } from '@mui/material';\nimport { Button, Modal } from 'react-bootstrap';\nimport { useState } from 'react';\n\nimport GradingIcon from '@mui/icons-material/Grading';\nimport EmergencyRecordingIcon from '@mui/icons-material/EmergencyRecording';\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nconst CardMediaStyle = styled('div')({\n  position: 'relative',\n  paddingTop: 'calc(100% * 1 / 4)'\n});\n\nconst InfoStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  marginTop: theme.spacing(3),\n//   color: 'success',\n//   backgroundColor\n}));\n\nconst CoverImgStyle = styled('img')({\n  top: 0,\n  width: '100%',\n  height: '100%',\n  objectFit: 'cover',\n  position: 'absolute'\n});\n\n// ----------------------------------------------------------------------\n\nPreviousRoundsDetailCards.propTypes = {\n  post: PropTypes.object.isRequired,\n  index: PropTypes.number\n};\n\nexport default function PreviousRoundsDetailCards({ post, index }) {\n\n  // Dialog open/close state\n  const [openDialog, setOpenDialog] = useState(false);\n\n  let intstatus = localStorage.getItem(\"candIsInterviewed\") === 'true'\n\n  const latestPostLarge = index === -1;\n  const latestPost = index === -1 || index === -2;\n\n  return (\n    <Grid\n      item\n      xs={3}\n    >\n      <Card sx={{ position: \"relative\" }}>\n        <CardMediaStyle>\n          <CoverImgStyle\n            alt={post.interview_round.round_name}\n            src='/static/g-meet-resumex.png'\n          />\n\n        </CardMediaStyle>\n\n        <CardContent\n        align=\"center\"\n          sx={{\n            minWidth: 80,\n            align: 'center',\n            pt: 1,\n            ...((latestPostLarge || latestPost) && {\n              bottom: 0,\n              width: \"100%\",\n              position: \"absolute\",\n            }),\n          }}\n        >\n\n        <h2 style={{fontSize: '16px', fontWeight: '600', marginBottom: '30px'}}>\n            {post.interview_round.round_name.toLowerCase().split('_')\n            .map(word => {\n                return word.charAt(0).toUpperCase() + word.slice(1);\n                }).join(' ')}\n        </h2>\n\n          <InfoStyle>\n            <Tooltip title=\"View Feedback\">\n                <Button variant=\"outlined\" onClick={() => setOpenDialog(true)} disabled={intstatus}>\n                    <GradingIcon sx={{color: \"#00AB55\"}}/>\n                </Button>\n            </Tooltip>\n\n            <Tooltip title=\"View Recording\">\n                <Button variant=\"outlined\" disabled={intstatus} href={post.interview_recording_link} target=\"blank\">\n                    <EmergencyRecordingIcon sx={{color: \"#00AB55\"}}/>\n                </Button>\n            </Tooltip>\n\n            <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\n                <h2 \n                style={{\n                    fontSize: '16px', fontWeight: '600', marginBottom: '5px', marginTop: '10px'\n                }}\n                align=\"center\">\n                    Interview Feedback | {post.interview_round.round_name.toLowerCase().split('_')\n                    .map(word => {\n                    return word.charAt(0).toUpperCase() + word.slice(1);\n                    }).join(' ')}\n                </h2>\n                <DialogContent>\n                <TableContainer>\n                        <Table>\n                            <TableHead>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                            </TableHead>\n                            <TableBody>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Strong Areas:</b></TableCell>\n                                    <TableCell>{post.candidate_strong_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Weak Areas:</b></TableCell>\n                                    <TableCell>{post.candidate_weak_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Skills Rating:</b></TableCell>\n                                    <TableCell>\n                                        {post.skills_rating.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>\n                                            <Rating\n                                                name=\"hover-feedback\"\n                                                value={item.rating}\n                                                readOnly\n                                            />\n                                            </TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Training Areas:</b></TableCell>\n                                    <TableCell>\n                                        {post.training_areas.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>{item.duration}</TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for BU:</b></TableCell>\n                                    <TableCell>{post.fit_bu}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Project:</b></TableCell>\n                                    <TableCell>{post.fit_project}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Level:</b></TableCell>\n                                    <TableCell>{post.fit_level}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Interview Feedback:</b></TableCell>\n                                    <TableCell>{post.interview_feedback}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Is candidate selected?:</b></TableCell>\n                                    <TableCell>\n                                    <Checkbox checked={post.candidate_eligibility} readOnly/>\n                                    </TableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </DialogContent>\n            </Dialog>\n          </InfoStyle>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n}","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/pages/LoggedOut.js",[],"/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/DashboardNavbar.js",[],"/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/DashboardSidebar.js",["1755","1756"],"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\n// material\nimport { styled } from '@mui/material/styles';\nimport { Box, Link, Drawer, Typography, Avatar } from '@mui/material';\n// components\nimport Logo from '../../components/Logo';\nimport Scrollbar from '../../components/Scrollbar';\nimport NavSection from '../../components/NavSection';\nimport { MHidden } from '../../components/@material-extend';\nimport axios from 'axios';\nimport * as constants from \"src/utils/constants\";\n//\nimport sidebarConfig from './SidebarConfig';\nimport account from '../../_mocks_/account';\n\n// ----------------------------------------------------------------------\nconst DRAWER_WIDTH = 280;\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  [theme.breakpoints.up('lg')]: {\n    flexShrink: 0,\n    width: DRAWER_WIDTH\n  }\n}));\n\nconst AccountStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n\n  \n  padding: theme.spacing(2, 2.5),\n  borderRadius: theme.shape.borderRadiusSm,\n  backgroundColor: theme.palette.grey[200]\n}));\nDashboardSidebar.propTypes = {\n  isOpenSidebar: PropTypes.bool,\n  onCloseSidebar: PropTypes.func\n};\nexport default function DashboardSidebar({ isOpenSidebar, onCloseSidebar }) {\n\n  const [firstNameData, setFirstNameData]  = useState([]);\n  const getFirstName = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setFirstNameData(response.data.data.user.first_name)\n      localStorage.setItem(\"candidateFirstName\", response.data.data.user.first_name); \n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const [lastNameData, setLastNameData]  = useState([]);\n  const getLastName = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setLastNameData(response.data.data.user.last_name)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const { pathname } = useLocation();\n  useEffect(() => {\n    getFirstName()\n    getLastName()\n    if (isOpenSidebar) {\n      onCloseSidebar();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pathname]);\n\n  const renderContent = (\n    <Scrollbar\n      sx={{\n        height: '100%',\n        '& .simplebar-content': { height: '100%', display: 'flex', flexDirection: 'column' }\n      }}\n    >\n      <Box sx={{ px: 2.5, py: 3 }}>\n        <Box component={RouterLink} to=\"/dashboard/app\" sx={{ display: 'inline-flex' }}>\n          <Logo />\n        </Box>\n      </Box>\n\n      <Box sx={{ mb: 5, mx: 2.5 }}>\n        <Link underline=\"none\" component={RouterLink} to=\"#\">\n          <AccountStyle>\n            <Avatar src={account.photoURL} alt=\"photoURL\" />\n            <Box sx={{ ml: 2 }}>\n              <Typography variant=\"subtitle2\" sx={{ color: 'text.primary' }}>\n               {firstNameData} {lastNameData}\n              </Typography>\n              <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n               Candidate\n              </Typography>\n            </Box>\n          </AccountStyle>\n        </Link>\n      </Box>\n      <NavSection navConfig={sidebarConfig} />\n    </Scrollbar>\n  );\n  return (\n    <RootStyle>\n      <MHidden width=\"lgUp\">\n        <Drawer\n          open={isOpenSidebar}\n          onClose={onCloseSidebar}\n          PaperProps={{\n            sx: { width: DRAWER_WIDTH }\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      </MHidden>\n\n      <MHidden width=\"lgDown\">\n        <Drawer\n          open\n          variant=\"persistent\"\n          PaperProps={{\n            sx: {\n              width: DRAWER_WIDTH,\n              bgcolor: 'background.default'\n            }\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      </MHidden>\n    </RootStyle>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmployeeDashboardSidebar.js",["1757"],"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\n// material\nimport { styled } from '@mui/material/styles';\nimport { Box, Link, Drawer, Typography, Avatar } from '@mui/material';\n// components\nimport Logo from '../../Logo';\nimport Scrollbar from '../../Scrollbar';\nimport NavSection from '../../NavSection';\nimport { MHidden } from '../../@material-extend';\n//\nimport EmployeeSidebarConfig from './EmployeeSidebarConfig';\nimport account from '../../../_mocks_/account';\nimport UserInfo from '../../../utils/Authorization/UserInfo';\n\n// ----------------------------------------------------------------------\n\nconst DRAWER_WIDTH = 280;\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  [theme.breakpoints.up('lg')]: {\n    flexShrink: 0,\n    width: DRAWER_WIDTH\n  }\n}));\n\nconst AccountStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  padding: theme.spacing(2, 2.5),\n  borderRadius: theme.shape.borderRadiusSm,\n  backgroundColor: theme.palette.grey[200]\n}));\n\n// ----------------------------------------------------------------------\n\nEmployeeDashboardSidebar.propTypes = {\n  isOpenSidebar: PropTypes.bool,\n  onCloseSidebar: PropTypes.func\n};\n\nexport default function EmployeeDashboardSidebar({ isOpenSidebar, onCloseSidebar }) {\n  const { pathname } = useLocation();\n  const userData = UserInfo();\n\n  useEffect(() => {\n    if (isOpenSidebar) {\n      onCloseSidebar();\n    }\n  }, [pathname]);\n\n  const renderContent = (\n    <Scrollbar\n      sx={{\n        height: '100%',\n        '& .simplebar-content': { height: '100%', display: 'flex', flexDirection: 'column' }\n      }}\n    >\n      <Box sx={{ px: 2.5, py: 3 }}>\n        <Box component={RouterLink} to=\"/employee-dashboard/app\" sx={{ display: 'inline-flex' }}>\n          <Logo />\n        </Box>\n      </Box>\n\n      <Box sx={{ mb: 5, mx: 2.5 }}>\n        <Link underline=\"none\" component={RouterLink} to=\"#\">\n          <AccountStyle>\n            <Avatar src={account.photoURL} alt=\"photoURL\" />\n            <Box sx={{ ml: 2 }}>\n              <Typography variant=\"subtitle2\" sx={{ color: 'text.primary' }}>\n               {userData.first_name + \" \" + userData.last_name}\n              </Typography>\n              <Typography variant=\"body2\" sx={{ color: 'text.secondary'}}>\n\n                {/* {userData.role === 'NON_TECH_INTERVIEWER' ? 'Non-Tech Interviewer' : '' || userData.role === 'TECH_INTERVIEWER' ? 'Technical Interviewer' : ''} */}\n                {\n                  userData.role === 'NON_TECH_INTERVIEWER' ? 'Non-Tech Interviewer' : userData.role === 'TECH_INTERVIEWER' ? 'Technical Interviewer' : ''\n                }\n              </Typography>\n            </Box>\n          </AccountStyle>\n        </Link>\n      </Box>\n\n      {(userData?.role === 'TECH_INTERVIEWER'  || userData?.role === 'NON_TECH_INTERVIEWER') &&\n      <NavSection navConfig={EmployeeSidebarConfig} />} \n\n    </Scrollbar>\n  );\n\n  return (\n    <RootStyle>\n      <MHidden width=\"lgUp\">\n        <Drawer\n          open={isOpenSidebar}\n          onClose={onCloseSidebar}\n          PaperProps={{\n            sx: { width: DRAWER_WIDTH }\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      </MHidden>\n\n      <MHidden width=\"lgDown\">\n        <Drawer\n          open\n          variant=\"persistent\"\n          PaperProps={{\n            sx: {\n              width: DRAWER_WIDTH,\n              bgcolor: 'background.default'\n            }\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      </MHidden>\n    </RootStyle>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmployeeDashboardNavbar.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/HrDashboardSidebar.js",["1758","1759","1760"],"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\n// material\nimport { styled } from '@mui/material/styles';\nimport { Box, Link, Drawer, Typography, Avatar } from '@mui/material';\n// components\nimport Logo from '../../../components/Logo';\nimport Scrollbar from '../../Scrollbar';\nimport NavSection from '../../../components/NavSection';\nimport { MHidden } from '../../@material-extend';\n//\n// import FSDAdminSidebarConfig from './Sidebar_Config/FSDAdminSidebarConfig';\nimport OnboardingHrSidebarConfig from './Sidebar_Config/OnboardingHrSidebarConfig';\nimport BUHeadSideBarConfig from './Sidebar_Config/BUHeadSideBarConfig';\nimport DRMSidebarConfig from './Sidebar_Config/DRMSidebarConfig';\nimport FSD_HODSidebarConfig from './Sidebar_Config/FSD_HODSidebarConfig';\nimport RMGSidebarConfig from './Sidebar_Config/RMGSidebarConfig'\nimport account from '../../../_mocks_/account';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\n\nimport { useSnackbar } from 'notistack'\nimport { apiInstance } from 'src/utils/apiAuth';\n\n//------------ imports for sidebar ----------------------------------\n\nimport { Icon } from '@iconify/react';\nimport peopleFill from '@iconify/icons-eva/people-fill';\nimport baselineDocumentScanner from '@iconify/icons-ic/baseline-document-scanner';\nimport fileTextFill from '@iconify/icons-eva/file-text-fill';\nimport pieChart2Fill from '@iconify/icons-eva/pie-chart-2-fill';\nimport baselineArchive from '@iconify/icons-ic/baseline-archive';\nimport sharpTopic from '@iconify/icons-ic/sharp-topic';\nimport layersFill from '@iconify/icons-eva/layers-fill';\nimport personDoneFill from '@iconify/icons-eva/person-done-fill';\nimport baselinePermContactCalendar from '@iconify/icons-ic/baseline-perm-contact-calendar';\nimport baselineAdminPanelSettings from '@iconify/icons-ic/baseline-admin-panel-settings';\nimport baselineManageAccounts from '@iconify/icons-ic/baseline-manage-accounts';\nimport Badge from '@mui/material/Badge';\nimport LayersIcon from '@mui/icons-material/Layers';\n\n// ----------------------------------------------------------------------\n\nconst DRAWER_WIDTH = 280;\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  [theme.breakpoints.up('lg')]: {\n    flexShrink: 0,\n    width: DRAWER_WIDTH\n  }\n}));\n\nconst AccountStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  padding: theme.spacing(2, 2.5),\n  borderRadius: theme.shape.borderRadiusSm,\n  backgroundColor: theme.palette.grey[200]\n}));\n\n// ----------------------------------------------------------------------\n\nHrDashboardSidebar.propTypes = {\n  isOpenSidebar: PropTypes.bool,\n  onCloseSidebar: PropTypes.func\n};\n\nconst getIcon = (name) => <Icon icon={name} width={22} height={22} />;\n\nexport default function HrDashboardSidebar({ isOpenSidebar, onCloseSidebar }) {\n  const { pathname } = useLocation();\n  const userInfo = UserInfo()\n  let user_roles = JSON.parse(localStorage.getItem(\"user\"))\n\n  const { enqueueSnackbar } = useSnackbar();\n  const [requisitionData, setRequisitionData] = useState([])\n\n  const getRequisitionData = () => {\n      apiInstance({\n          method: \"get\",\n          url: \"requisitions/\",\n          headers: {\n              Authorization: \"token \" + localStorage.getItem(\"authToken\"),\n          }\n      })\n          .then(function (response) {\n              setRequisitionData(response.data.data)\n          })\n          .catch(function (error) {\n              enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                  anchorOrigin: {\n                      vertical: 'top',\n                      horizontal: 'right',\n                  },\n                  variant: 'error',\n                  autoHideDuration: 2000,\n              });\n          });\n  }\n\n  // count unassigned RRFs to dsplay number on an icon badge\n  const filterRequisitionData = requisitionData.map((item) => { if(item?.assigned_fsd_user?.length === 0){ return(item) } })\n  const unAssignedReqData = filterRequisitionData.filter(function (el) { return el != null; });\n  const rrf_pool_length = unAssignedReqData.length\n\n  useEffect(() => {\n    getRequisitionData();\n    if (isOpenSidebar) {\n      onCloseSidebar();\n    }\n  }, [pathname]);\n\n  // -------------------------- FSD Admin Sidebar Config (Moved here from FSDAdminSidebarConfig.js) --------------------------\n\n  const FSDAdminSidebarConfig = [\n    {\n      title: 'dashboard',\n      path: '/resumeX/app',\n      icon: getIcon(pieChart2Fill)\n    },\n    {\n      title: 'RRF templates',\n      path: '/resumeX/rrf-templates',\n      icon: getIcon(sharpTopic)\n    },\n    {\n      title: 'Requisition Pool',\n      path: '/resumeX/rrfpool',\n      icon: <Badge badgeContent={rrf_pool_length} color=\"primary\"><LayersIcon color=\"action\" /></Badge>\n      \n    },\n    {\n      title: 'Requisition',\n      // path: '/resumeX/requisition',\n      icon: getIcon(fileTextFill),\n      children: [{\n          title: 'My Requisitions',\n          path: '/resumeX/myrequisition',\n          icon: getIcon(fileTextFill)\n        },\n        {\n          title: 'Other Requisitions',\n          path: '/resumeX/otherrequisition'\n        }]\n    },\n    {\n      title: 'job applications',\n      path: '/resumeX/job-application',\n      icon: getIcon(baselineArchive)\n    },  \n    {\n      title: 'candidates',\n      path: '/resumeX/candidates',\n      icon: getIcon(peopleFill)\n    },\n    {\n      title: 'Joinees',\n      path: '/resumeX/joinees',\n      icon: getIcon(personDoneFill)\n    },\n    {\n      title: 'Users',\n      // path: '/resumeX/users',\n      icon: getIcon(baselinePermContactCalendar),\n      children: [{\n          title: 'FSD Members',\n          path: '/resumeX/fsdusers',\n          icon: getIcon(fileTextFill)\n        },\n        {\n          title: 'Employees',\n          path: '/resumeX/empusers'\n        }]\n    }, \n    {\n      title: 'Master Roles',\n      path: '/resumeX/master-roles',\n      icon: getIcon(baselineManageAccounts)\n    },\n    {\n      title: 'Roles',\n      path: '/resumeX/roles',\n      icon: getIcon(baselineAdminPanelSettings)\n    },      \n    {\n      title: 'resume parser',\n      path: '/resumeX/resume-parser',\n      icon: getIcon(baselineDocumentScanner)\n    },\n    {\n      title: 'Master Tables',\n      icon: getIcon(layersFill),\n      children: [\n        {\n          title: 'Business Unit',\n          path: '/resumeX/business-units',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'Currency',\n          path: '/resumeX/currency',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'Candidate Source',\n          path: '/resumeX/candidate-source',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'Candidate Status',\n          path: '/resumeX/candidate-status',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'Educational Degree',\n          path: '/resumeX/education-degree',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'Notice Period',\n          path: '/resumeX/notice-period',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'Office Location',\n          path: '/resumeX/office-location',\n          // icon: getIcon(pinFill)\n        },\n        {\n          title: 'Requisition Status',\n          path: '/resumeX/requisition-status',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'Requisition Type',\n          path: '/resumeX/requisition-types',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'TechStack',\n          path: '/resumeX/tech-stack',\n          // icon: getIcon(shakeFill)\n        },\n        {\n          title: 'Technology',\n          path: '/resumeX/technology',\n          // icon: getIcon(shakeFill)\n        },\n        // {\n        //   title: 'TechStack Technology',\n        //   path: '/resumeX/techstack-technologies',\n        //   // icon: getIcon(shakeFill)\n        // },\n      ]\n    },  \n    // {\n    //   title: 'DRM Requisition',\n    //   path: '/resumeX/drm-requisition',\n    //   icon: getIcon(fileTextFill),\n    // },\n    // {\n    //   title: 'product',\n    //   path: '/resumeX/products',\n    //   icon: getIcon(shoppingBagFill)\n    // },\n    // {\n    //   title: 'blog',\n    //   path: '/resumeX/blog',\n    //   icon: getIcon(fileTextFill)\n    // }\n  ];\n\n  // -------------------------------------------------------------------------------------\n\n  const renderContent = (\n    <Scrollbar\n      sx={{\n        height: '100%',\n        '& .simplebar-content': { height: '100%', display: 'flex', flexDirection: 'column' }\n      }}\n    >\n      <Box sx={{ px: 2.5, py: 3 }}>\n        <Box component={RouterLink} to=\"/resumeX/app\" sx={{ display: 'inline-flex' }}>\n          <Logo />\n        </Box>\n      </Box>\n\n      <Box sx={{ mb: 5, mx: 2.5 }}>\n        <Link underline=\"none\" component={RouterLink} to=\"#\">\n          <AccountStyle>\n            <Avatar src={account.photoURL} alt=\"photoURL\" />\n            <Box sx={{ ml: 2 }}>\n              <Typography variant=\"subtitle2\" sx={{ color: 'text.primary' }}>\n               {userInfo.first_name + \" \" + userInfo.last_name}\n              </Typography>\n              <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n               {userInfo.role}\n              </Typography>\n            </Box>\n          </AccountStyle>\n        </Link>\n      </Box>\n\n      {userInfo?.role === 'FSD_Admin' &&\n      <NavSection navConfig={FSDAdminSidebarConfig} />} \n\n      {userInfo?.role === 'BU_HEAD' &&\n      <NavSection navConfig={BUHeadSideBarConfig} />} \n\n      {userInfo?.role === 'DRM' &&\n      <NavSection navConfig={DRMSidebarConfig} />} \n\n      {userInfo?.role === 'FSD_HOD' &&\n      <NavSection navConfig={FSD_HODSidebarConfig} />} \n\n      {userInfo?.role === 'RMG' &&\n      <NavSection navConfig={RMGSidebarConfig} />} \n\n      {userInfo?.role === 'OnBoarding_HR' &&\n      <NavSection navConfig={OnboardingHrSidebarConfig} />} \n    \n    </Scrollbar>\n  );\n\n  return (\n    <RootStyle>\n      <MHidden width=\"lgUp\">\n        <Drawer\n          open={isOpenSidebar}\n          onClose={onCloseSidebar}\n          PaperProps={{\n            sx: { width: DRAWER_WIDTH }\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      </MHidden>\n\n      <MHidden width=\"lgDown\">\n        <Drawer\n          open\n          variant=\"persistent\"\n          PaperProps={{\n            sx: {\n              width: DRAWER_WIDTH,\n              bgcolor: 'background.default'\n            }\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      </MHidden>\n    </RootStyle>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/HrDashboardNavbar.js",[],"/home/raj/Desktop/resumeX/resumeX/src/utils/mockImages.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/authentication/login/EmpLoginForm.js",["1761","1762","1763","1764","1765","1766","1767","1768","1769"],"import * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport { Icon } from '@iconify/react';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack';\n// material\nimport {\n  Link,\n  Stack,\n  Checkbox,\n  TextField,\n  IconButton,\n  InputAdornment,\n  FormControlLabel\n} from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { useAuth } from 'src/utils/auth';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n// ----------------------------------------------------------------------\n\nexport default function EmpLoginForm() {\n  const { enqueueSnackbar} = useSnackbar();\n\n  const navigate = useNavigate();\n\n  const [showPassword, setShowPassword] = useState(false);\n  \n  const PasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]{8,}$/\n\n  const [loginUser, setLoginUser] = useState({})\n\n  const auth = useAuth()\n\n  const EmpLoginSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().min(8, \n                          \"Minimum Password Length is 8\").matches(PasswordRegex, \n                          'Password must have atleast 1 lower,upper,number and special character').required('Password is required')\n  });\n\n  const callEmpLoginApi = (email, password) => {\n\n    apiInstance({\n      method: 'post',\n      url: '/user/login/',\n      data: {\n        \"email\": email,\n        \"password\": password\n      }\n    }).then(function (response) {\n\n      if (response.status == 200) {\n        localStorage.setItem('user',  JSON.stringify(response.data.user))\n        localStorage.setItem('authToken', response.data.key)\n\n        auth.login(response.data.user)\n\n        if(response?.data?.key && response?.data?.key?.length !== 0)\n        {\n          var m_role = response?.data?.user?.master_role?.master_role\n          var m_role_status = response?.data?.user?.master_role?.is_active\n          var role_status = response?.data?.user?.role?.is_active\n          var user_status = response?.data?.user?.is_active\n\n          // ----- Master Role: Employee -----\n          if (m_role === 'Employee' && m_role_status)\n          {\n            if (role_status && user_status)\n            {\n              enqueueSnackbar(\"Logged in successfully !!\", {\n                anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                              },\n                variant: 'success',\n                autoHideDuration: 1000,\n              });\n              navigate('/employee-dashboard/app', {replace: true});\n            } \n            else{\n              enqueueSnackbar(\"Please check your active status !!\", {\n                anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                              },\n                variant: 'error',\n                autoHideDuration: 1500,\n              });\n              navigate('/401', {replace: true});\n            }                      \n          }\n          \n        // ----- Master Role: Manager / Admin -----\n\n        else if ((m_role === 'Manager' || m_role === 'Admin') && m_role_status)\n          {         \n            if (role_status && user_status){\n              enqueueSnackbar(\"Logged in successfully !!\", {\n                anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                              },\n                variant: 'success',\n                autoHideDuration: 1000,\n              });\n            navigate('/resumeX/app', {replace: true});\n            }\n            else{\n              enqueueSnackbar(\"Please check your active status !!\", {\n                anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                              },\n                variant: 'error',\n                autoHideDuration: 1500,\n              });\n              navigate('/401', {replace: true});\n            }            \n          }\n\n        // Master roles are inactive\n        else{\n          enqueueSnackbar(\"Please check your active status !!\", {\n            anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                          },\n            variant: 'error',\n            autoHideDuration: 1500,\n          });\n          navigate('/401', {replace: true});\n        }            \n      }\n\n      // When user key is absent.\n      else {\n        enqueueSnackbar(\"No user found !!\", {\n          anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                        },\n          variant: 'warning',\n          autoHideDuration: 1500,\n        });\n        navigate('/login', {replace: true}) }\n      }\n    })\n    .catch(function (error) {\n      enqueueSnackbar(error.response.data.non_field_errors, {\n        anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                      },\n          variant: 'error',\n          autoHideDuration: 2000,  \n        });\n      \n      setSubmitting(false)\n    })\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      remember: true\n    },\n    validationSchema: EmpLoginSchema,\n    onSubmit: (formValues) => {\n\n      let email = formValues.email\n      let password = formValues.password\n\n      localStorage.setItem('employeeEmail', email)\n      callEmpLoginApi(email, password)\n\n    }\n  });\n\n  const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting } = formik;\n\n  const handleShowPassword = () => {\n    setShowPassword((show) => !show);\n  };\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"email\"\n            label=\"Email address\"\n            {...getFieldProps('email')}\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"current-password\"\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            {...getFieldProps('password')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton onClick={handleShowPassword} edge=\"end\">\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            error={Boolean(touched.password && errors.password)}\n            helperText={touched.password && errors.password}\n          />\n\n        </Stack>\n\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}/>\n\n        <LoadingButton\n          fullWidth\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          loading={isSubmitting}\n          name='emp-login-btn'\n        >\n         Login\n        </LoadingButton>\n      </Form>\n    </FormikProvider>\n  );\n}","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/login/LoginForm.js",["1770","1771","1772","1773","1774","1775","1776"],"import * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport { Icon } from '@iconify/react';\n// material\nimport {\n  Link,\n  Stack,\n  TextField,\n  InputAdornment,\n  FormControlLabel\n} from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack'\nimport { apiInstance } from 'src/utils/apiAuth';\n\n\n// ----------------------------------------------------------------------\n\n\n// const apiInstance = axios.create({\n//   baseURL: 'http://127.0.0.1:8000/api/v1/auth/',\n//   timeout: 10000,\n// });\n\n\nexport default function LoginForm() { \n  const { enqueueSnackbar } = useSnackbar(); \n\n  const navigate = useNavigate();\n\n  const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n\n  const LoginSchema = Yup.object().shape({\n    mobile_no: Yup.string().matches(phoneRegExp, 'Mobile Number is not valid').min(10, 'Mobile Number must be of 10 digit').max(10, 'Mobile Number must be of 10 digit').required('Mobile Number is required'),\n    email: Yup.string()\n    .email(\"Email must be a valid email address\")\n    .required(\"Email is required\"),\n    });\n  \n  const callSendOtpApi = (candEmail, candMobile) => {  \n    apiInstance({\n      method: 'post',\n      url: '/auth/email/',\n      data: {\n        \"email\": candEmail,\n        \"mobile\": candMobile\n      }  \n    }).then(function (response) {\n  \n      if (response.status === 200) {\n\n        enqueueSnackbar(response.data.detail, {\n          anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n            variant: 'success',\n            autoHideDuration: 3000,\n\n          });\n          navigate('/verify-otp', { replace: true });\n      }\n      \n    })\n    .catch(function (error) {\n      enqueueSnackbar(\"User with this mobile already exist\", {\n        anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                      },\n          variant: 'error',\n          autoHideDuration: 3000,  \n        });\n\n        setSubmitting(false)\n    });   \n  \n  }   \n\n  const formik = useFormik({\n    initialValues: {\n      mobile_no: '',\n      email: '',\n      remember: true\n    },\n    validationSchema: LoginSchema,\n    onSubmit: (values) => {  \n\n      let candMobile = \"+91\" + values.mobile_no\n      localStorage.setItem('candidateMN', candMobile);\n     \n      //  callSendOtpApi(candMobile)\n\n       let candEmail = values.email\n       localStorage.setItem('candEmail', candEmail)\n\n       callSendOtpApi(candEmail, candMobile)\n    }\n  }); \n      \n  const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <TextField\n            fullWidth\n            autoFocus={true}\n            type=\"text\"\n            label=\"Email\"\n            \n            {...getFieldProps('email')}\n            \n            // InputProps={{\n            //   startAdornment: <InputAdornment position=\"start\">\n            //     +91\n            //     </InputAdornment>,\n            // }}\n            \n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n          \n        </Stack>\n        \n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}/>\n        <TextField\n            fullWidth\n            type=\"text\"\n            label=\"Mobile Number\"\n            \n            {...getFieldProps('mobile_no')}\n            \n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">\n                +91\n                </InputAdornment>,\n            }}\n            \n            error={Boolean(touched.mobile_no && errors.mobile_no)}\n            helperText={touched.mobile_no && errors.mobile_no}\n          />\n\n       <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}/>\n\n        <LoadingButton\n          fullWidth\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          loading={isSubmitting}\n        >\n          Send OTP\n        </LoadingButton>\n      </Form>\n    </FormikProvider>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/login/OtpVerifyForm.js",["1777","1778","1779","1780","1781"],"import * as Yup from 'yup';\n// import { useState } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// import { Icon } from '@iconify/react';\n// material\nimport {\n  Link,\n  Stack,\n  TextField,\n  InputAdornment,\n  FormControlLabel\n} from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack'\nimport { apiInstance } from 'src/utils/apiAuth';\n\n// ----------------------------------------------------------------------\n\n// const apiInstance = axios.create({\n//   baseURL: 'http://127.0.0.1:8000/api/v1/',\n//   timeout: 10000,\n// });\n\nexport default function OtpVerifyForm() {\n  const { enqueueSnackbar } = useSnackbar(); \n\n  const navigate = useNavigate();\n\n  const OtpRegex = /\\d{6}$/\n\n  const candidateMobileNo = localStorage.getItem(\"candidateMN\");\n\n  const candidateEmail = localStorage.getItem(\"candEmail\")\n\n  const LoginSchema = Yup.object().shape({\n    otp: Yup.string().matches(OtpRegex, 'OTP should be number').max(6, 'OTP length should be 6').required('OTP is required'),\n  });\n\n  const callVerifyOtpApi = (userEmail, userMobileNumber, otp) => { \n   \n    apiInstance({\n      method: 'post',\n      url: 'auth/token/',\n      data: {\n        \"email\": userEmail,\n        \"token\": otp\n      }  \n    }).then(function (response) {\n  \n      if (response.status === 200) {\n        enqueueSnackbar(\"OTP verified successfully !!\", {\n          anchorOrigin: {\n            vertical: \"top\",\n            horizontal: \"right\",\n          },\n          variant: \"success\",\n          autoHideDuration: 1000,\n        });\n        \n        let candidateToken = response.data.token\n\n        localStorage.setItem(\"candidateToken\", candidateToken);\n\n        // Candidate details API\n\n        callCandidateDetailsApi()   \n      }    \n    })\n    .catch(function (error) {\n      enqueueSnackbar(error.response.data.token[0], {\n        anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                      },\n          variant: 'error',\n          autoHideDuration: 2000,  \n        });\n\n        setSubmitting(false)\n    });   \n  }\n  \n  const callCandidateDetailsApi = () => {\n\n    apiInstance({\n      method: 'get',\n      url: 'candidate/',\n      headers: {\n        Authorization: \"token \" + localStorage.getItem(\"candidateToken\"),\n      },\n    }).then(function (response) {\n  \n      if (\n          (response.status === 200) &\n          (response.data.message === \"New Candidate\") &\n          (response.data.data.length === 0)\n        ) \n      {\n        enqueueSnackbar(\"Fill up details !\", {\n          anchorOrigin: {\n            vertical: \"top\",\n            horizontal: \"right\",\n          },\n          variant: \"success\",\n          autoHideDuration: 2000,\n        });\n\n        navigate(\"/register\", { replace: true });\n\n      } else {\n\n        let userDetails = response.data.data;\n        let fName = userDetails.user.first_name;\n        let lName = userDetails.user.last_name;\n        let usrEmail = userDetails.user.email;\n        let jobApplicationId = userDetails?.job_application?.[0]?.id\n        let jobApplicationReq = userDetails?.requisition?.requisite_number\n        let registrationDateTime = userDetails.user.joined_date\n        let candIsInterviewed\n        let JobAppDetails\n\n        let objs = userDetails.job_application\n\n        if (objs.length !== 0) {\n          objs?.forEach(obj => {\n\n            if (obj.is_interviewed) {\n              candIsInterviewed = false\n            }\n            else {\n              candIsInterviewed = true\n            }\n          });\n        }\n        else {\n          candIsInterviewed = false\n        }\n\n        localStorage.setItem(\"candidateFirstName\", fName);\n        localStorage.setItem(\"candidateLastName\", lName);\n        localStorage.setItem(\"candidateEmail\", usrEmail);\n        localStorage.setItem(\"candIsInterviewed\", candIsInterviewed)\n        localStorage.setItem(\"jobApplicationId\", jobApplicationId)\n        localStorage.setItem(\"registrationDateTime\", registrationDateTime)\n        localStorage.setItem(\"candidateJobApplicationReq\", jobApplicationReq)\n        localStorage.setItem(\"thisJobAppDetails\", JobAppDetails)\n\n        navigate(\"/dashboard/app\", { replace: true });\n\n      }      \n    })\n    .catch(function (error) {\n      enqueueSnackbar(error.response.data, {\n        anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                      },\n          variant: 'error',\n          autoHideDuration: 2000,  \n        });\n\n        setSubmitting(false)\n    });   \n  }  \n\n  const handleResendOTP = (resendValues) => {\n\n    // Send otp API\n\n    apiInstance({\n      method: 'post',\n      url: '/auth/email/',\n      data: {\n        email: resendValues.email,\n        mobile: resendValues.mobile\n      },\n    }).then(function (response) {\n        if (response.status === 200) {\n          enqueueSnackbar(response.data.detail, {\n            anchorOrigin: {\n              vertical: \"top\",\n              horizontal: \"right\",\n            },\n            variant: \"success\",\n            autoHideDuration: 1500,\n          });\n        }\n      })\n      .catch(function (error) {\n        enqueueSnackbar(error.response.data.detail, {\n          anchorOrigin: {\n            vertical: \"top\",\n            horizontal: \"right\",\n          },\n          variant: \"error\",\n          autoHideDuration: 2000,\n        });\n      });\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      mobile: candidateMobileNo,\n      email: candidateEmail,\n      otp: '',\n      remember: true\n    },\n    validationSchema: LoginSchema,\n    onSubmit: (formValues) => {\n      let userMobileNumber = formValues.mobile;\n      let userEmail = formValues.email;\n      let userOTP = formValues.otp;\n\n      // Verify otp API\n      callVerifyOtpApi(userEmail, userMobileNumber, userOTP)     \n    }\n  });\n  \n  const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, isReseting, setSubmitting } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n\n        <TextField\n          disabled\n          // id=\"C-Mobile\"\n          label=\"Email\"\n          defaultValue= {candidateEmail}                 \n        />\n\n          <TextField\n            fullWidth\n            id='C-otp'\n            type=\"text\"\n            label=\"OTP\"\n            autoFocus={true}\n            \n            {...getFieldProps('otp')}\n            \n            error={Boolean(touched.otp && errors.otp)}\n            helperText={touched.otp && errors.otp}\n          />\n        \n       \n       <Stack direction={{ xs: 'column', sm: 'row' }} spacing={5}>\n\n        <LoadingButton  \n            fullWidth={true}    \n            size=\"large\"\n            color=\"error\"\n            variant=\"contained\"\n            loading={isReseting}\n            onClick={() => handleResendOTP(values)}\n            name=\"resend-btn\"\n          >\n            Resend OTP\n          </LoadingButton>\n\n          <LoadingButton \n            fullWidth={true}          \n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n            name=\"verify-btn\"\n          >\n            Verify OTP\n          </LoadingButton>\n        </Stack>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Autocomplete.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobCards.js",[],"/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/AccountPopover.js",["1782","1783","1784"],"import { Icon } from '@iconify/react';\nimport { useRef, useState, useEffect } from 'react';\nimport homeFill from '@iconify/icons-eva/home-fill';\nimport personFill from '@iconify/icons-eva/person-fill';\nimport settings2Fill from '@iconify/icons-eva/settings-2-fill';\nimport * as constants from \"src/utils/constants\";\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { alpha } from '@mui/material/styles';\nimport { Button, Box, Divider, MenuItem, Typography, Avatar, IconButton } from '@mui/material';\n// components\nimport MenuPopover from '../../components/MenuPopover';\n//\nimport account from '../../_mocks_/account';\n\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n// ----------------------------------------------------------------------\n\nconst MENU_OPTIONS = [\n  {\n    label: 'Home',\n    icon: homeFill,\n    linkTo: '/dashboard/app'\n  },\n  {\n    label: 'Profile',\n    icon: personFill,\n    linkTo: '/user/profile'\n  },\n];\n\n// ----------------------------------------------------------------------\n\n\nexport default function CandidateAccountPopover() {\n\n\n  const [firstNameData, setFirstNameData]  = useState([]);\n  const getFirstName = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setFirstNameData(response.data.data.user.first_name)\n      localStorage.setItem(\"candidateFirstName\", response.data.data.user.first_name); \n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const [lastNameData, setLastNameData]  = useState([]);\n  const getLastName = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD+constants.HTTP_URL+constants.HTTP_PORT+'/api/v1/candidate/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('candidateToken')}`}})\n    .then((response) => {\n      setLastNameData(response.data.data.user.last_name)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n  \n  const { enqueueSnackbar} = useSnackbar();\n  const navigate = useNavigate();\n\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    getFirstName()\n    getLastName()\n  },[])\n\n  function LogOutHandler() {  \n    apiInstance({\n      method: 'post',\n      url: 'user/logout/',\n      headers: {\"Authorization\" : 'Token ' + localStorage.getItem('candidateToken')},\n    }).then(function (response) {\n  \n      if (response.status === 200) {\n        localStorage.clear()\n        enqueueSnackbar(response.data.detail, {\n          anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n            variant: 'success',\n            autoHideDuration: 1500,\n\n          });\n          navigate('/', { replace: true });\n      }\n      \n    })\n    .catch(function (error) {\n      enqueueSnackbar(error.response.data.detail, {\n        anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                      },\n          variant: 'error',\n          autoHideDuration: 2000,  \n        });\n    });   \n  };\n\n  return (\n    <>\n      <IconButton\n        ref={anchorRef}\n        onClick={handleOpen}\n        sx={{\n          padding: 0,\n          width: 44,\n          height: 44,\n          ...(open && {\n            '&:before': {\n              zIndex: 1,\n              content: \"''\",\n              width: '100%',\n              height: '100%',\n              borderRadius: '50%',\n              position: 'absolute',\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.72)\n            }\n          })\n        }}\n      >\n        <Avatar src={account.photoURL} alt=\"photoURL\" />\n      </IconButton>\n\n      <MenuPopover\n        open={open}\n        onClose={handleClose}\n        anchorEl={anchorRef.current}\n        sx={{ width: 220 }}\n      >\n        <Box sx={{ my: 1.5, px: 2.5 }}>\n          <Typography variant=\"subtitle1\" noWrap>\n          {firstNameData} {lastNameData}\n          </Typography>\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }} noWrap>\n          {localStorage.getItem('candidateEmail')}\n          </Typography>\n        </Box>\n\n        <Divider sx={{ my: 1 }} />\n\n        {MENU_OPTIONS.map((option) => (\n          <MenuItem\n            key={option.label}\n            to={option.linkTo}\n            component={RouterLink}\n            onClick={handleClose}\n            sx={{ typography: 'body2', py: 1, px: 2.5 }}\n          >\n            <Box\n              component={Icon}\n              icon={option.icon}\n              sx={{\n                mr: 2,\n                width: 24,\n                height: 24\n              }}\n            />\n\n            {option.label}\n          </MenuItem>\n        ))}\n\n        <Box sx={{ p: 2, pt: 1.5 }}>\n          <Button fullWidth color=\"inherit\" variant=\"outlined\" onClick={LogOutHandler}>\n            Logout\n          </Button>\n        </Box>\n      </MenuPopover>\n    </>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/_mocks_/account.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmployeeSidebarConfig.js",["1785"],"import { Icon } from '@iconify/react';\nimport pieChart2Fill from '@iconify/icons-eva/pie-chart-2-fill';\nimport calendarFill from '@iconify/icons-eva/calendar-fill';\nimport bookmarkFill from '@iconify/icons-eva/bookmark-fill';\nimport personDoneFill from '@iconify/icons-eva/person-done-fill';\n\n// ----------------------------------------------------------------------\n\nconst getIcon = (name) => <Icon icon={name} width={22} height={22} />;\n\nconst EmployeeSidebarConfig = [\n  {\n    title: 'dashboard',\n    path: '/employee-dashboard/app',\n    icon: getIcon(pieChart2Fill)\n  },\n  // {\n  //   title: 'Calendar',\n  //   path: '/employee-dashboard/employee-calendar',\n  //   icon: getIcon(calendarFill)\n  // },\n  {\n    title: 'Booked Interviews',\n    path: '/employee-dashboard/booked-interview',\n    icon: getIcon(bookmarkFill)\n  },\n  {\n    title: 'Completed Interviews',\n    path: '/employee-dashboard/completed-interview',\n    icon: getIcon(personDoneFill)\n  },\n  // {\n  //   title: 'product',\n  //   path: '/employee-dashboard/products',\n  //   icon: getIcon(shoppingBagFill)\n  // },\n  // {\n  //   title: 'blog',\n  //   path: '/employee-dashboard/blog',\n  //   icon: getIcon(fileTextFill)\n  // }\n];\n\nexport default EmployeeSidebarConfig;\n","/home/raj/Desktop/resumeX/resumeX/src/components/NavSection.js",["1786","1787"],"import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport { NavLink as RouterLink, matchPath, useLocation } from 'react-router-dom';\nimport arrowIosUpwardFill from '@iconify/icons-eva/arrow-ios-upward-fill';\nimport arrowIosDownwardFill from '@iconify/icons-eva/arrow-ios-downward-fill';\n// material\nimport { alpha, useTheme, styled } from '@mui/material/styles';\nimport { Box, List, Collapse, ListItemText, ListItemIcon, ListItemButton } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst ListItemStyle = styled((props) => <ListItemButton disableGutters {...props} />)(\n  ({ theme }) => ({\n    ...theme.typography.body2,\n    height: 48,\n    position: 'relative',\n    textTransform: 'capitalize',\n    paddingLeft: theme.spacing(5),\n    paddingRight: theme.spacing(2.5),\n    color: theme.palette.text.secondary,\n    '&:before': {\n      top: 0,\n      right: 0,\n      width: 3,\n      bottom: 0,\n      content: \"''\",\n      display: 'none',\n      position: 'absolute',\n      borderTopLeftRadius: 4,\n      borderBottomLeftRadius: 4,\n      backgroundColor: theme.palette.primary.main\n    }\n  })\n);\n\nconst ListItemIconStyle = styled(ListItemIcon)({\n  width: 22,\n  height: 22,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n});\n\n// ----------------------------------------------------------------------\n\nNavItem.propTypes = {\n  item: PropTypes.object,\n  active: PropTypes.func\n};\n\nfunction NavItem({ item, active }) {\n  const theme = useTheme();\n  const isActiveRoot = active(item.path);\n  const { title, path, icon, info, children } = item;\n  const [open, setOpen] = useState(isActiveRoot);\n\n  const handleOpen = () => {\n    setOpen((prev) => !prev);\n  };\n\n  const activeRootStyle = {\n    color: 'primary.main',\n    fontWeight: 'fontWeightMedium',\n    bgcolor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    '&:before': { display: 'block' }\n  };\n\n  const activeSubStyle = {\n    color: 'text.primary',\n    fontWeight: 'fontWeightMedium'\n  };\n\n  if (children) {\n    return (\n      <>\n        <ListItemStyle\n          onClick={handleOpen}\n          sx={{\n            ...(isActiveRoot && activeRootStyle)\n          }}\n        >\n          <ListItemIconStyle>{icon && icon}</ListItemIconStyle>\n          <ListItemText disableTypography primary={title} />\n          {info && info}\n          <Box\n            component={Icon}\n            icon={open ? arrowIosUpwardFill : arrowIosDownwardFill}\n            sx={{ width: 22, height: 22, ml: 1 }}\n          />\n        </ListItemStyle>\n\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding>\n            {children.map((item) => {\n              const { title, path, icon, info } = item;\n              const isActiveSub = active(path);\n\n              return (\n                <ListItemStyle\n                  key={title}\n                  component={RouterLink}\n                  to={path}\n                  sx={{\n                    ...(isActiveSub && activeSubStyle)\n                  }}\n                >\n                  <ListItemIconStyle>\n                    <Box\n                      component=\"span\"\n                      sx={{\n                        width: 4,\n                        height: 4,\n                        display: 'flex',\n                        borderRadius: '50%',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        bgcolor: 'text.disabled',\n                        transition: (theme) => theme.transitions.create('transform'),\n                        ...(isActiveSub && {\n                          transform: 'scale(2)',\n                          bgcolor: 'primary.main'\n                        })\n                      }}\n                    />\n                  </ListItemIconStyle>\n                  <ListItemText disableTypography primary={title} />\n                </ListItemStyle>\n              );\n            })}\n          </List>\n        </Collapse>\n      </>\n    );\n  }\n\n  return (\n    <ListItemStyle\n      component={RouterLink}\n      to={path}\n      sx={{\n        ...(isActiveRoot && activeRootStyle)\n      }}\n    >\n      <ListItemIconStyle>{icon && icon}</ListItemIconStyle>\n      <ListItemText disableTypography primary={title} />\n      {info && info}\n    </ListItemStyle>\n  );\n}\n\nNavSection.propTypes = {\n  navConfig: PropTypes.array\n};\n\nexport default function NavSection({ navConfig, ...other }) {\n  const { pathname } = useLocation();\n  const match = (path) => (path ? !!matchPath({ path, end: false }, pathname) : false);\n\n  return (\n    <Box {...other}>\n      <List disablePadding>\n        {navConfig.map((item) => (\n          <NavItem key={item.title} item={item} active={match} />\n        ))}\n      </List>\n    </Box>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/Scrollbar.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/layouts/EmployeeAccountPopover.js",["1788","1789","1790"],"import { Icon } from '@iconify/react';\nimport { useRef, useState } from 'react';\nimport homeFill from '@iconify/icons-eva/home-fill';\nimport personFill from '@iconify/icons-eva/person-fill';\nimport settings2Fill from '@iconify/icons-eva/settings-2-fill';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { alpha } from '@mui/material/styles';\nimport { Button, Box, Divider, MenuItem, Typography, Avatar, IconButton } from '@mui/material';\n// components\nimport MenuPopover from '../../MenuPopover';\n//\nimport account from '../../../_mocks_/account';\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport { useAuth } from 'src/utils/auth';\nimport UserInfo from '../../../utils/Authorization/UserInfo';\n\n// ----------------------------------------------------------------------\n\nconst MENU_OPTIONS = [\n  {\n    label: 'Home',\n    icon: homeFill,\n    linkTo: '/employee-dashboard/app'\n  },\n  {\n    label: 'Change Password',\n    icon: settings2Fill,\n    linkTo: '/employee-dashboard/change-password/'\n  },\n  // {\n  //   label: 'Settings',\n  //   icon: settings2Fill,\n  //   linkTo: '#'\n  // }\n];\n\n// ----------------------------------------------------------------------\n\nexport default function EmployeeAccountPopover() {\n  const { enqueueSnackbar} = useSnackbar();\n  const navigate = useNavigate();\n  const employeeEmail = localStorage.getItem('employeeEmail');\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n  const auth = useAuth()\n  const userData = UserInfo()\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  function LogOutHandler() {  \n    apiInstance({\n      method: 'post',\n      url: '/user/logout/',\n      headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`},\n    }).then(function (response) {\n  \n      if (response.status === 200) {\n        auth.logout()\n        localStorage.clear()\n        enqueueSnackbar(response.data.detail, {\n          anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n            variant: 'success',\n            autoHideDuration: 1500,\n\n          });\n          navigate('/employee-login', { replace: true });\n      }\n      \n    })\n    .catch(function (error) {\n      enqueueSnackbar(error.response.data.detail, {\n        anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                      },\n          variant: 'error',\n          autoHideDuration: 2000,  \n        });\n    });   \n  };\n\n  return (\n    <>\n      <IconButton\n        ref={anchorRef}\n        onClick={handleOpen}\n        sx={{\n          padding: 0,\n          width: 44,\n          height: 44,\n          ...(open && {\n            '&:before': {\n              zIndex: 1,\n              content: \"''\",\n              width: '100%',\n              height: '100%',\n              borderRadius: '50%',\n              position: 'absolute',\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.72)\n            }\n          })\n        }}\n      >\n        <Avatar src={account.photoURL} alt=\"photoURL\" />\n      </IconButton>\n\n      <MenuPopover\n        open={open}\n        onClose={handleClose}\n        anchorEl={anchorRef.current}\n        sx={{ width: 220 }}\n      >\n        <Box sx={{ my: 1.5, px: 2.5 }}>\n          <Typography variant=\"subtitle1\" noWrap>\n            {userData.first_name + \" \" + userData.last_name}\n          </Typography>\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }} noWrap>\n            {userData.email}\n          </Typography>\n        </Box>\n\n        <Divider sx={{ my: 1 }} />\n\n        {MENU_OPTIONS.map((option) => (\n          <MenuItem\n            key={option.label}\n            to={option.linkTo}\n            component={RouterLink}\n            onClick={handleClose}\n            sx={{ typography: 'body2', py: 1, px: 2.5 }}\n          >\n            <Box\n              component={Icon}\n              icon={option.icon}\n              sx={{\n                mr: 2,\n                width: 24,\n                height: 24\n              }}\n            />\n\n            {option.label}\n          </MenuItem>\n        ))}\n\n        <Box sx={{ p: 2, pt: 1.5 }}>\n          <Button fullWidth color=\"inherit\" variant=\"outlined\" onClick={LogOutHandler}>\n            Logout\n          </Button>\n        </Box>\n      </MenuPopover>\n    </>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/HrAccountPopover.js",["1791","1792","1793"],"import { Icon } from '@iconify/react';\nimport { useRef, useState } from 'react';\nimport homeFill from '@iconify/icons-eva/home-fill';\nimport personFill from '@iconify/icons-eva/person-fill';\nimport settings2Fill from '@iconify/icons-eva/settings-2-fill';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { alpha } from '@mui/material/styles';\nimport { Button, Box, Divider, MenuItem, Typography, Avatar, IconButton } from '@mui/material';\n// components\nimport MenuPopover from '../../../components/MenuPopover';\n//\nimport account from '../../../_mocks_/account';\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport { useAuth } from 'src/utils/auth';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n// ----------------------------------------------------------------------\n\nconst MENU_OPTIONS = [\n  {\n    label: 'Home',\n    icon: homeFill,\n    linkTo: '/resumeX/app'\n  },\n  {\n    label: 'Change Password',\n    icon: settings2Fill,\n    linkTo: '/resumeX/change-password'\n  },\n  // {\n  //   label: 'Settings',\n  //   icon: settings2Fill,\n  //   linkTo: '#'\n  // }\n];\n\n// ----------------------------------------------------------------------\n\nexport default function HrAccountPopover() {\n  const { enqueueSnackbar} = useSnackbar();\n  const navigate = useNavigate();\n  const employeeEmail = localStorage.getItem('employeeEmail');\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n  const auth = useAuth();\n  const user_data = UserInfo();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  function LogOutHandler() {  \n    apiInstance({\n      method: 'post',\n      url: '/user/logout/',\n      headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`},\n    }).then(function (response) {\n  \n      if (response.status === 200) {\n        auth.logout()\n        localStorage.clear()\n        enqueueSnackbar(response.data.detail, {\n          anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n            variant: 'success',\n            autoHideDuration: 1500,\n\n          });\n          navigate('/employee-login', { replace: true });\n      }\n      \n    })\n    .catch(function (error) {\n      enqueueSnackbar(error.response.data.detail, {\n        anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                      },\n          variant: 'error',\n          autoHideDuration: 2000,  \n        });\n    });   \n  };\n\n  return (\n    <>\n      <IconButton\n        ref={anchorRef}\n        onClick={handleOpen}\n        sx={{\n          padding: 0,\n          width: 44,\n          height: 44,\n          ...(open && {\n            '&:before': {\n              zIndex: 1,\n              content: \"''\",\n              width: '100%',\n              height: '100%',\n              borderRadius: '50%',\n              position: 'absolute',\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.72)\n            }\n          })\n        }}\n      >\n        <Avatar src={account.photoURL} alt=\"photoURL\" />\n      </IconButton>\n\n      <MenuPopover\n        open={open}\n        onClose={handleClose}\n        anchorEl={anchorRef.current}\n        sx={{ width: 220 }}\n      >\n        <Box sx={{ my: 1.5, px: 2.5 }}>\n          <Typography variant=\"subtitle1\" Wrap>\n            {user_data.first_name + \" \" + user_data.last_name}\n          </Typography>\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }} Wrap>\n            {user_data.email}\n          </Typography>\n        </Box>\n\n        <Divider sx={{ my: 1 }} />\n\n        {MENU_OPTIONS.map((option) => (\n          <MenuItem\n            key={option.label}\n            to={option.linkTo}\n            component={RouterLink}\n            onClick={handleClose}\n            sx={{ typography: 'body2', py: 1, px: 2.5 }}\n          >\n            <Box\n              component={Icon}\n              icon={option.icon}\n              sx={{\n                mr: 2,\n                width: 24,\n                height: 24\n              }}\n            />\n\n            {option.label}\n          </MenuItem>\n        ))}\n\n        <Box sx={{ p: 2, pt: 1.5 }}>\n          <Button fullWidth color=\"inherit\" variant=\"outlined\" onClick={LogOutHandler}>\n            Logout\n          </Button>\n        </Box>\n      </MenuPopover>\n    </>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/animate/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/@material-extend/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/MenuPopover.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/animate/MotionContainer.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/@material-extend/MHidden.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/Wrap.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/bounce/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/bounce/BounceOut.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/animate/variants/bounce/BounceIn.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/Logo.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/RMGSidebarConfig.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/FSD_HODSidebarConfig.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/DRMSidebarConfig.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/BUHeadSideBarConfig.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/layouts/Sidebar_Config/OnboardingHrSidebarConfig.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobsPostsSort.js",[],"/home/raj/Desktop/resumeX/resumeX/src/layouts/dashboard/SidebarConfig.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobsPostsSearch.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobsPostCard.js",["1794","1795","1796","1797","1798","1799","1800"],"import PropTypes from 'prop-types';\n// import { Icon } from '@iconify/react';\n// import eyeFill from '@iconify/icons-eva/eye-fill';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// material\nimport { alpha, styled } from '@mui/material/styles';\nimport { Box, Link, Card, Grid, Avatar, Typography, CardContent } from '@mui/material';\n//\nimport SvgIconStyle from '../../SvgIconStyle';\nimport { Button, Modal } from 'react-bootstrap';\nimport { useState } from 'react';\n\n// ----------------------------------------------------------------------\n\nconst CardMediaStyle = styled('div')({\n  position: 'relative',\n  paddingTop: 'calc(100% * 3 / 4)'\n});\n\nconst TitleStyle = styled(Link)({\n  height: 44,\n  overflow: 'hidden',\n  WebkitLineClamp: 2,\n  display: '-webkit-box',\n  WebkitBoxOrient: 'vertical'\n});\n\nconst AvatarStyle = styled(Avatar)(({ theme }) => ({\n  zIndex: 9,\n  width: 32,\n  height: 32,\n  position: 'absolute',\n  left: theme.spacing(3),\n  bottom: theme.spacing(-2)\n}));\n\nconst InfoStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'flex-end',\n  marginTop: theme.spacing(3),\n  color: theme.palette.text.disabled\n}));\n\nconst CoverImgStyle = styled('img')({\n  top: 0,\n  width: '100%',\n  height: '100%',\n  objectFit: 'cover',\n  position: 'absolute'\n});\n\n// ----------------------------------------------------------------------\n\nJobsPostCard.propTypes = {\n  post: PropTypes.object.isRequired,\n  index: PropTypes.number\n};\n\nexport default function JobsPostCard({ post, index }) {\n  const navigate = useNavigate();\n  const [show, setShow] = useState(false);\n\n  let intstatus = localStorage.getItem(\"candIsInterviewed\") === 'true'\n\n  const handleClose = () => {\n    setShow(false);\n  };\n  \n  const handleApply = () => {\n    localStorage.setItem(\"SelectedJobName\", post.jobName);\n    localStorage.setItem(\"SelectedJobID\", post.pk);\n    navigate('/dashboard/jobs/openings/job-details/apply-job', {replace: true});\n  };\n\n  const handleShow = () => setShow(true);\n\n  const { cover, title, author, createdAt } = post;\n  const latestPostLarge = index === -1;\n  const latestPost = index === -1 || index === -2;\n\n  const primary_tech = [];\n  const other_tech = [];\n  const locs = [];\n\n  post.jobPrimaryTechnology.forEach((ele, index) => {\n    primary_tech.push((index ? ', ': '') + ele.technology_name)\n  });\n\n  post.jobTechnology.forEach((ele, index) => {\n    other_tech.push((index ? ', ': '') + ele.technology_name)\n  });\n\n  post.jobLocation.forEach((lc, index) => {\n    locs.push((index ? ', ': '') + lc.office_location);\n  });\n\n  return (\n    <Grid\n      item\n      xs={3}\n    >\n      <Card sx={{ position: \"relative\" }}>\n        <CardMediaStyle\n          sx={{\n            ...((latestPostLarge || latestPost) && {\n              pt: \"calc(100% * 4 / 3)\",\n              \"&:after\": {\n                top: 0,\n                content: \"''\",\n                width: \"100%\",\n                height: \"100%\",\n                position: \"absolute\",\n                bgcolor: (theme) => alpha(theme.palette.grey[900], 0.72),\n              },\n            }),\n            ...(latestPostLarge && {\n              pt: {\n                xs: \"calc(100% * 4 / 3)\",\n                sm: \"calc(100% * 3 / 4.66)\",\n              },\n            }),\n          }}\n        >\n          <SvgIconStyle\n            color=\"paper\"\n            src=\"/static/mock-images/jobs/hiringImg.jpg\"\n            sx={{\n              width: 80,\n              height: 36,\n              zIndex: 9,\n              bottom: -15,\n              position: \"absolute\",\n              ...((latestPostLarge || latestPost) && { display: \"none\" }),\n            }}\n          />\n          <AvatarStyle\n            alt='loading'\n            src='/static/mock-images/jobs/gateway_logo.jpeg'\n            sx={{\n              ...((latestPostLarge || latestPost) && {\n                zIndex: 9,\n                top: 24,\n                left: 24,\n                width: 40,\n                height: 40,\n              }),\n            }}\n          />\n\n          <CoverImgStyle\n            alt={post.jobName}\n            src='/static/mock-images/jobs/we-are-hiring.jpg'\n          />\n\n        </CardMediaStyle>\n\n        <CardContent\n          sx={{backgroundColor: \"#edece8\",\n            minWidth: 80,\n            pt: 4,\n            ...((latestPostLarge || latestPost) && {\n              bottom: 0,\n              width: \"100%\",\n              position: \"absolute\",\n            }),\n          }}\n        >\n          <Typography\n            gutterBottom\n            variant=\"caption\"\n            sx={{ color: \"text.disabled\", display: \"block\" }}\n          >\n            {post.jobCategory.job_category_name}\n          </Typography>\n\n          <Typography\n            gutterBottom\n            variant=\"h5\"\n            sx={{ display: \"block\", minHeight: 60, }}\n          >\n            {post.jobName}\n          </Typography>\n\n          {/* <TitleStyle\n            to=\"#\"\n            color=\"inherit\"\n            variant=\"subtitle2\"\n            underline=\"hover\"\n            component={RouterLink}\n            sx={{minHeight: 50,\n              ...(latestPostLarge && { typography: \"h5\", height: 60 }),\n              ...((latestPostLarge || latestPost) && {\n                color: \"common.white\",\n              }),\n            }}\n          >\n            <h5 style={{fontWeight: 'bold'}}>{post.jobName}</h5>\n          </TitleStyle> */}\n\n          <InfoStyle>\n            <Button variant=\"success\" onClick={handleShow} disabled={intstatus}>\n              View Details\n            </Button>\n            <Modal\n              size=\"lg\"\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              scrollable={true}\n              backdrop='static'\n              centered\n              show={show}\n              onHide={handleClose}\n              style={{\n                left: \"680px\",\n                top: \"80px\",\n                height: \"90%\",\n                width: \"40%\",\n              }}\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>{post.jobName}</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n              {post.jobExperience? ( <p><h6> Required Experience: </h6> <p> <pre  style={{whiteSpace: \"pre-line\",fontSize: \"smaller\",fontFamily: \"inherit\" }}> {post.jobExperience} </pre> </p></p>) : null}\n\n              {post.jobDescription? ( <p><h6> Description: </h6> <p> <pre style={{ whiteSpace: \"pre-line\",fontSize: \"smaller\",fontFamily: \"inherit\"}}> {post.jobDescription} </pre> </p></p>) : null}\n                \n              {post.jobSkills? (<p><h6> Skills: </h6> <p> <pre style={{ whiteSpace: \"pre-line\",fontSize: \"smaller\",fontFamily: \"inherit\" }}> {post.jobSkills} </pre> </p></p>) : null}\n                \n              {post.jobResponsibility? ( <p> <h6> Responsibilities: </h6> <p> <pre style={{ whiteSpace: \"pre-line\",fontSize: \"smaller\",fontFamily: \"inherit\" }}> {post.jobResponsibility} </pre> </p></p>) : null}\n\n              {primary_tech? ( <p><h6> Must have technologies: </h6> <p> <pre style={{whiteSpace: \"pre-line\",fontSize: \"smaller\",fontFamily: \"inherit\" }}> {primary_tech}  </pre> </p></p>) : null}\n\n              {other_tech? ( <p><h6> Good to have technologies: </h6> <p> <pre style={{whiteSpace: \"pre-line\",fontSize: \"smaller\",fontFamily: \"inherit\" }}> {other_tech}  </pre> </p></p>) : null}\n                \n              {locs? ( <p><h6> Locations: </h6> <p> <pre style={{whiteSpace: \"pre-line\",fontSize: \"smaller\",fontFamily: \"inherit\" }}> {locs} </pre> </p></p>) : null}\n              \n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"danger\" onClick={handleClose}>\n                  Close\n                </Button>\n                <Button variant=\"success\" onClick={handleApply}>\n                  Apply\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </InfoStyle>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n}","/home/raj/Desktop/resumeX/resumeX/src/components/SvgIconStyle.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/IconButton.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Typography.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Backdrop.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Tooltip.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Button.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Input.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Paper.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Lists.js",[],"/home/raj/Desktop/resumeX/resumeX/src/theme/overrides/Card.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/SearchNotFound.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/Label.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/pages/InterviewListDialog.js",["1801","1802","1803"],"import Page from '../../Page';\nimport React, { useState } from \"react\";\nimport {Container} from '@mui/material';\nimport MUIDataTable from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport {\n    TableRow,\n    TableCell,\n    TableFooter\n  } from \"@mui/material\";\n  import { useNavigate } from 'react-router-dom';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        iconActive: {\n                display: 'none',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nexport default function InterviewListDialog(data) {\n    const navigate = useNavigate();\n\n    const [rowClickData, setRowClickData] = useState([])\n\n    const handleOnRowClick = (rowData) => {\n        navigate(\"/employee-dashboard/booked-interview/candidate-interview\", {state:{\n            id: rowData[0],\n            jobApplicationId: rowData[1]\n        }})\n    } \n\n    const options = {\n        selectableRows: false,\n        filter: false,\n        print: false,\n        download: false,\n        responsive: \"standard\",\n        fixedHeader: true,\n        fixedSelectColumn: false,\n        viewColumns: false,\n        customFooter: (\n            count,\n            page,\n            rowsPerPage,\n            changeRowsPerPage,\n            changePage\n          ) => {\n            return(\n                <TableFooter>\n                <TableRow>\n                  <TableCell> <b> Total: &nbsp; {count} </b></TableCell>\n                </TableRow>\n              </TableFooter>\n            );\n          },\n        onRowClick: (rowData) => {handleOnRowClick(rowData)},\n    };\n    \n    const columns = [\n        {\n            name: \"Interview ID\",\n            options: {\n                filter: false,\n                display:false\n            },\n        },\n        {\n            name: \"Job Application ID\",\n            options: {\n                filter: false,\n                display:false\n            },\n        },\n        {\n            name: \"RRF Number\",\n            options: {\n                filter: true,\n            },\n        },\n        {\n            name: \"Candidate Name\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <a href=\"\" style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Interview Round\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Email\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Phone Number\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Interview DateTime\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Round Status\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                       value === 'CONFIRMED' ?  <b style={{color: 'red'}}>Pending</b> : <b style={{color: 'green'}}>Completed</b> \n                    )\n                }\n            }\n        }\n             \n    ];\n\n    return (\n        <Page title=\"Home | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n            <ThemeProvider theme={theme}>\n                <MUIDataTable\n                    data={data.data?.map(data => {\n                        return [\n                            data.id,\n                            data.jobApplicationId,\n                            data.rrfNumber,\n                            data.candidateName,\n                            data.interviewRound,\n                            data.candidateEmail,\n                            data.candidatePhoneNumber,\n                            new Date(data.start).toLocaleDateString() + \" | \" + new Date(data.start).toLocaleTimeString().substring(0, 5) ,\n                            data.status\n                        ]\n                    })}\n                    columns={columns}\n                    options={options}\n                />\n            </ThemeProvider>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/ReviewCompleted.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/ReviewScheduleCount.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/InterviewCompleted.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/InterviewScheduleCount.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/CandidateTimeline.js",["1804","1805","1806","1807","1808","1809","1810","1811","1812","1813","1814","1815","1816","1817","1818","1819","1820","1821","1822","1823","1824","1825"],"import React, { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport { Button, Card, CardContent, Checkbox, Container, Dialog, DialogContent, DialogActions, Stack, Typography, TextField } from '@mui/material';\nimport {useParams} from 'react-router-dom';\nimport axios from 'axios';\nimport Timeline from '@mui/lab/Timeline';\nimport TimelineItem from '@mui/lab/TimelineItem';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator';\nimport TimelineConnector from '@mui/lab/TimelineConnector';\nimport TimelineContent from '@mui/lab/TimelineContent';\nimport TimelineDot from '@mui/lab/TimelineDot';\nimport {useSnackbar} from 'notistack';\n\nimport ScheduleScreeningRound from './candidate-timeline/screening-round/ScheduleScreeningRound';\nimport ScreeningRoundRecording from './candidate-timeline/screening-round/ScreeningRoundRecording';\nimport ScreeningRoundResult from './candidate-timeline/screening-round/ScreeningRoundResult';\nimport ScreeningRoundStatus from './candidate-timeline/screening-round/ScreeningRoundStatus';\n\nimport InitialRoundCandidateForm from './candidate-timeline/initial-hr-call/InitialRoundCandidateForm'\nimport InitialRoundCallRecording from './candidate-timeline/initial-hr-call/InitialRoundCallRecording';\nimport InitialRoundFeedback from './candidate-timeline/initial-hr-call/InitialRoundFeedback';\nimport InitialRoundStatus from './candidate-timeline/initial-hr-call/InitialRoundStatus';\n\nimport SendForReview from './candidate-timeline/review-candidate/SendForReview';\nimport ReviewFeedback from './candidate-timeline/review-candidate/ReviewFeedback';\nimport ReviewCandidateStatus from './candidate-timeline/review-candidate/ReviewCandidateStatus';\n\nimport ScheduleTechnicalRoundOne from './candidate-timeline/technical-round-one/ScheduleTechnicalRoundOne';\nimport TechnicalRoundOneRecording from './candidate-timeline/technical-round-one/TechnicalRoundOneRecording';\nimport TechnicalRoundOneResult from './candidate-timeline/technical-round-one/TechnicalRoundOneResult';\nimport TechnicalRoundOneStatus from './candidate-timeline/technical-round-one/TechnicalRoundOneStatus';\n\nimport ScheduleTechnicalRoundTwo from './candidate-timeline/technical-round-two/ScheduleTechnicalRoundTwo';\nimport TechnicalRoundTwoRecording from './candidate-timeline/technical-round-two/TechnicalRoundTwoRecording';\nimport TechnicalRoundTwoResult from './candidate-timeline/technical-round-two/TechnicalRoundTwoResult';\nimport TechnicalRoundTwoStatus from './candidate-timeline/technical-round-two/TechnicalRoundTwoStatus';\n\nimport ScheduleCTORound from './candidate-timeline/cto-round/ScheduleCTORound';\nimport CTORoundRecording from './candidate-timeline/cto-round/CTORoundRecording';\nimport CTORoundResult from './candidate-timeline/cto-round/CTORoundResult';\nimport CTORoundStatus from './candidate-timeline/cto-round/CTORoundStatus';\n\nimport HowToRegOutlinedIcon from '@mui/icons-material/HowToRegOutlined';\nimport VideoCallOutlinedIcon from '@mui/icons-material/VideoCallOutlined';\nimport PreviewIcon from '@mui/icons-material/Preview';\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport LaptopChromebookOutlinedIcon from '@mui/icons-material/LaptopChromebookOutlined';\nimport ListAltOutlinedIcon from '@mui/icons-material/ListAltOutlined';\nimport * as constants from 'src/utils/constants';\n\nexport default function CandidateTimeline() {\n    const { id } = useParams();\n\n    const { enqueueSnackbar} = useSnackbar();\n\n    const [jobApplicationData, setJobApplicationData] = useState([])\n    const getJobApplicationData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-application/' + id + '/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setJobApplicationData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    useEffect(() => {\n        getJobApplicationData()\n    }, [])\n\n    // HR Schedule Interview Dialog\n    const [hrScheduleInterviewOpen, setHrScheduleInterviewOpen] = useState(false)\n\n    // Technical Schedule Interview Dialog\n    const [practicalScheduleInterviewOpen, setPracticalScheduleInterviewOpen] = useState(false)\n\n    const handleScheduleInterview = event => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n        const data = {\"job_application_id\": id}\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/send-interview-slot-mail/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Mail has been sent to the candidate successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // Mark HR Interview as Completed flag state\n    const [hrInterviewChecked, setHrInterviewChecked] = React.useState();\n\n    const handleHrInterviewCheckedChange = event =>{\n        setHrInterviewChecked(event.target.checked);\n    };\n\n    // Mark Candidate as Selected\n    const [markCandidateAsSelected, setMarkCandidateAsSelected] = React.useState();\n\n    const handleMarkCandidateAsSelectedCheckedChange = event =>{\n        setMarkCandidateAsSelected(event.target.checked);\n        setMarkCandidateAsRejected(false)\n    };\n\n    // Mark Candidate as Rejected\n    const [markCandidateAsRejected, setMarkCandidateAsRejected] = React.useState();\n\n    const handleMarkCandidateAsRejectedChange = event =>{\n        setMarkCandidateAsRejected(event.target.checked);\n        setMarkCandidateAsSelected(false)\n    };\n\n    const [hrRoundResult, setHrRoundResult] = useState(\"\")\n\n    const [hrInterviewRecordingNotes, setHrInterviewRecordingNotes] = useState(\"\")\n\n    const [jobApplicationResult, setJobApplicationResult] = useState(\"\")\n\n    const HrRoundData = jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'SCREENING_ROUND'\n    })\n\n    // set initial values\n    useEffect(() => {\n        setHrInterviewChecked(HrRoundData?.[0]?.interview_status === \"COMPLETED\")\n        setMarkCandidateAsSelected(jobApplicationData?.is_candidate_selected)\n        setMarkCandidateAsRejected(jobApplicationData?.is_candidate_rejected)\n        setHrRoundResult(HrRoundData?.[0]?.interview_feedback)\n        setHrInterviewRecordingNotes(HrRoundData?.[0]?.interview_recording_notes)\n        setJobApplicationResult(jobApplicationData?.job_application_result)\n    }, [\n        HrRoundData?.[0]?.interview_status === \"COMPLETED\", \n        jobApplicationData?.is_candidate_selected,\n        jobApplicationData?.is_candidate_rejected,\n        HrRoundData?.[0]?.interview_feedback,\n        HrRoundData?.[0]?.interview_recording_notes,\n        jobApplicationData?.job_application_result\n    ])\n\n    // HR Schedule Interview Result Dialog\n    const [hrScheduleInterviewResultOpen, setHrScheduleInterviewResultOpen] = useState(false)\n\n    // Job Application Result Dialog\n    const [jobApplicationResultOpen, setJobApplicationResultOpen] = useState(false)\n\n    // Open HR Interview Recording\n    const [openHrInterviewRecording, setOpenHrInterviewRecording] = useState(false)\n\n    // HR Interview Recording State\n    const [hrInterviewRecording, setHrInterviewRecording] = useState(\"\")\n\n    const handleHrInterviewRecording = () => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n        const data = {\"id\": jobApplicationData?.interview_details?.[0]?.id}\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/interview-recording/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            setHrInterviewRecording(response.data.data)\n            setOpenHrInterviewRecording(true)\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const handleHrRoundResult = event => {\n        const confirmed_interview_id = jobApplicationData?.interview_details?.[0]?.id\n\n        setHrScheduleInterviewResultOpen(false)\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n        const data = {\n            \"is_interview_completed\": hrInterviewChecked,\n            \"is_hr_interview_completed\": hrInterviewChecked,\n            \"interview_feedback\": hrRoundResult, \n            \"interview_recording_notes\": hrInterviewRecordingNotes\n        }\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const handleJobApplicationResult = event => {\n        setJobApplicationResultOpen(false)\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n        const data = {\n            \"is_candidate_selected\": markCandidateAsSelected,\n            \"is_candidate_rejected\": markCandidateAsRejected,\n            \"job_application_result\": jobApplicationResult,\n            \"is_interviewed\": true\n        }\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-application/' + id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    function getHRInterviewDateTime(){ \n        const HRDateTime = jobApplicationData?.interview_details.filter(item => {\n            return item.interview_round === 'SCREENING_ROUND'\n        })\n        return HRDateTime[0].modified.substring(0, 10).split('-').reverse().join('/') + \" | \" + HRDateTime[0].modified.substring(11, 16)\n    }\n\n    const date1 = new Date(jobApplicationData?.resume?.candidate?.user?.joined_date)\n    const date2 = new Date(jobApplicationData?.modified)\n    const seconds = (date2.getTime() - date1.getTime())/1000 ? (date2.getTime() - date1.getTime())/1000 : 0\n    const totalTime = (Math.floor(seconds/86400) + \":\" + (new Date(seconds * 1000)).toISOString().substr(11, 8)).split(\":\")\n\n    return(\n    <Page>\n        <Container maxWidth=\"xl\" sx={{ mt:0 }}>\n            <Card sx={{mt: 2}} variant=\"outlined\" style={{ border: \"none\", boxShadow: \"none\" }}>\n            <CardContent>\n            <Timeline position=\"alternate\">\n            <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\">\n                        <HowToRegOutlinedIcon />\n                    </TimelineDot>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/> \n                    </TimelineSeparator>\n                    <TimelineContent sx={{ mt: 1}}>\n                        <Typography variant=\"h6\">\n                            Candidate Registration\n                        </Typography>\n                        <br></br>\n                        <b>Date:</b> {jobApplicationData?.resume?.candidate?.user?.joined_date.substring(0, 10).split('-').reverse().join('/')} <br></br>\n                        <b>Time:</b> {jobApplicationData?.resume?.candidate?.user?.joined_date.substring(11, 16)}\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                    </TimelineContent>\n                </TimelineItem>\n\n\n                {/* <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\"/>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/> \n                    </TimelineSeparator>\n                    <TimelineContent>\n                        <Typography variant=\"h6\">\n                            Initial HR Call\n                        </Typography>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <InitialRoundCandidateForm />\n                        </Stack>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <InitialRoundCallRecording />\n                        </Stack>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <InitialRoundFeedback />\n                        </Stack>\n                        <InitialRoundStatus />\n                    </TimelineContent>\n                </TimelineItem> */}\n\n\n                <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\">\n                        <VideoCallOutlinedIcon />\n                    </TimelineDot>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/>\n                    </TimelineSeparator>\n                    <TimelineContent sx={{ mt: 1}}>\n                        <Typography variant=\"h6\">\n                            Screening Round\n                        </Typography>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:5, mb: 3 }}>\n                            <ScheduleScreeningRound jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <ScreeningRoundRecording jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <ScreeningRoundResult jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <ScreeningRoundStatus jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                    </TimelineContent>\n                </TimelineItem>\n\n                <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\">\n                        <PreviewIcon />\n                    </TimelineDot>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/> \n                    </TimelineSeparator>\n                    <TimelineContent sx={{ mt: 1}}>\n                        <Typography variant=\"h6\">\n                            Review Candidate\n                        </Typography>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                            <SendForReview jobApplicationData={jobApplicationData}/>\n                        </Stack>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                            <ReviewFeedback jobApplicationData={jobApplicationData}/>\n                        </Stack>\n                        <ReviewCandidateStatus jobApplicationData={jobApplicationData}/>\n                    </TimelineContent>\n                </TimelineItem>                \n\n                <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\">\n                        <GroupsIcon />\n                    </TimelineDot>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/>\n                    </TimelineSeparator>\n                    <TimelineContent sx={{mt: 1}}>\n                        <Typography variant=\"h6\">\n                            Technical Round 1\n                        </Typography>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:5, mb: 3 }}>\n                            <ScheduleTechnicalRoundOne jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <TechnicalRoundOneRecording jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <TechnicalRoundOneResult jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n\n                        <TechnicalRoundOneStatus jobApplicationData={jobApplicationData} />\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                    </TimelineContent>\n                </TimelineItem>\n\n                <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\">\n                        <GroupsIcon />\n                    </TimelineDot>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/>\n                    </TimelineSeparator>\n                    <TimelineContent sx={{mt: 1}}>\n                        <Typography variant=\"h6\">\n                            Technical Round 2\n                        </Typography>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:5, mb: 3 }}>\n                            <ScheduleTechnicalRoundTwo jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                            <TechnicalRoundTwoRecording jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                            <TechnicalRoundTwoResult jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n\n                        <TechnicalRoundTwoStatus jobApplicationData={jobApplicationData} />\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                    </TimelineContent>\n                </TimelineItem>\n\n                <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\">\n                        <GroupsIcon />\n                    </TimelineDot>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/>\n                    </TimelineSeparator>\n                    <TimelineContent sx={{mt: 1}}>\n                        <Typography variant=\"h6\">\n                            CTO / Manager / HR Round\n                        </Typography>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:5, mb: 3 }}>\n                            <ScheduleCTORound jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <CTORoundRecording jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\" sx={{ mt:3, mb: 3 }}>\n                            <CTORoundResult jobApplicationData={jobApplicationData}/>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n\n                        <CTORoundStatus jobApplicationData={jobApplicationData} />\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                    </TimelineContent>\n                </TimelineItem>\n\n                {/* <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\">\n                        <LaptopChromebookOutlinedIcon />\n                    </TimelineDot>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/>\n                    </TimelineSeparator>\n                    <TimelineContent sx={{ mt: 1}}>\n                        <Typography variant=\"h6\">\n                            Practical Round\n                        </Typography>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:5, mb: 3 }}>\n                            <Button \n                                variant=\"contained\"\n                                size=\"small\" \n                                color=\"error\" \n                                style={{width: \"150px\"}}\n                                onClick={() => setPracticalScheduleInterviewOpen(true)}\n                                // disabled={(jobApplicationData?.interview_details?.[0]?.interview_status!=\"COMPLETED\" ? jobApplicationData?.interview_details?.[1]?.interview_status!=\"COMPLETED\" : jobApplicationData?.interview_details?.[1]?.interview_status!=\"COMPLETED\")}\n                                disabled\n                                >\n                                    Schedule Interview\n                                </Button>\n                            \n                            {jobApplicationData?.interview_details?.[2] ? (\n                                <Dialog open={practicalScheduleInterviewOpen} onClose={() => setPracticalScheduleInterviewOpen(false)}>\n                                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                                        Schedule Interview for Practical Round\n                                    </Typography>\n                                    <DialogContent>\n                                        Interview has already been scheduled. Below are the interview details:\n                                    </DialogContent>\n                                    <DialogContent>\n                                        <b>Interview Date:</b> <b style={{color: \"red\"}}>{jobApplicationData?.interview_details[2]?.start_date.substring(0, 10)}</b>\n                                        <br></br>\n                                        <b>Interview Time:</b> <b style={{color: \"red\"}}>{jobApplicationData?.interview_details[2]?.start_date.substring(11, 16)}</b> to <b style={{color: \"red\"}}>{jobApplicationData?.interview_details[2]?.end_date.substring(11, 16)}</b>\n                                        <br></br><br></br>\n                                        <b>Interview Link:</b> <a href={jobApplicationData?.interview_details[2]?.interview_moderator_link}>Click here to join</a>\n                                    </DialogContent>\n                                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                                    </DialogActions>\n                                </Dialog>\n                            ) : (\n                                <Dialog open={practicalScheduleInterviewOpen} onClose={() => setPracticalScheduleInterviewOpen(false)}>\n                                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                                        Schedule Interview for Practical Round\n                                    </Typography>\n                                    {jobApplicationData?.is_practical_interview_mail_sent ? (\n                                    <DialogContent>\n                                        <b>Awaiting for candidate's response.</b>\n                                        <br></br> <br></br>\n                                        An email has already been sent to the candidate asking him to choose interview slot!\n                                    </DialogContent>\n                                    ) : (\n                                    <DialogContent>\n                                        An email will be sent to the candidate asking him/her to choose a slot for the interview.\n                                        <br></br> <br></br>\n                                        Before pressing the \"Schedule Interview\" button, Please make sure you have given slots for the Interview!\n                                    </DialogContent>\n                                    )}\n                                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px'}}>\n                                        <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleScheduleInterview} disabled={jobApplicationData?.is_practical_interview_mail_sent && true}>Schedule Interview</Button>\n                                    </DialogActions>\n                                </Dialog>\n                            )}\n\n                        </Stack>\n\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        <Button variant=\"contained\" size=\"small\" color=\"error\"  style={{width: \"150px\"}} disabled>Interview Result</Button>\n                        </Stack>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        <Button variant=\"contained\" size=\"small\" color=\"error\" style={{width: \"150px\"}} disabled>Interview Recording</Button>\n                        </Stack>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                        <b>Status:</b> <b style={{color: \"red\"}}>------</b> \n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                    </TimelineContent>\n                </TimelineItem> */}\n\n                <TimelineItem>\n                    <TimelineSeparator>\n                    <TimelineDot variant=\"outlined\" color=\"error\">\n                        <ListAltOutlinedIcon />\n                    </TimelineDot>\n                    <TimelineConnector sx={{ bgcolor: 'error.main' }}/>\n                    </TimelineSeparator>\n                    <TimelineContent sx={{ mt: 1}}>\n                        <Typography variant=\"h6\">\n                            Overall Performance\n                        </Typography>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                            <Button \n                                variant=\"contained\" \n                                size=\"small\" \n                                color=\"success\" \n                                onClick={() => setJobApplicationResultOpen(true)}\n                                disabled={(jobApplicationData?.interview_details?.[0]?.interview_status!==\"COMPLETED\" ? jobApplicationData?.interview_details?.[1]?.interview_status!==\"COMPLETED\" : jobApplicationData?.interview_details?.[1]?.interview_status!==\"COMPLETED\")}>\n                                Job Application Result\n                            </Button>\n\n                            <Dialog open={jobApplicationResultOpen} onClose={() => setJobApplicationResultOpen(false)}>\n                                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                                    Candidate Job Application Result\n                                </Typography>\n                                <DialogContent>\n                                    Mark Candidate as Selected:\n                                    <Checkbox checked={markCandidateAsSelected} onChange={handleMarkCandidateAsSelectedCheckedChange} required/>\n                                </DialogContent>\n                                <DialogContent>\n                                    Mark Candidate as Rejected:\n                                    <Checkbox checked={markCandidateAsRejected} onChange={handleMarkCandidateAsRejectedChange} required/>\n                                </DialogContent>\n                                <DialogContent>\n                                    Please give feedback below:\n                                </DialogContent>\n                                <DialogContent>\n                                <TextField\n                                    fullWidth\n                                    label=\"Feedback\"\n                                    style={{ width: 500 }}\n                                    multiline\n                                    rows={6}\n                                    maxRows={4}\n                                    defaultValue={jobApplicationResult}\n                                    onChange={(event) => setJobApplicationResult(event.target.value)}\n                                />\n                                </DialogContent>\n                                <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                                    <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleJobApplicationResult}>Submit</Button>\n                                </DialogActions>\n                            </Dialog>\n                        </Stack>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                        <b>Selected:</b> <b style={{color: markCandidateAsSelected ? \"Green\" : \"red\"}}>{markCandidateAsSelected ? 'Yes' : 'No'}</b>\n                        <br></br>\n                        {jobApplicationData?.job_application_result ? (\n                        <b>Date Time: &nbsp;\n                            <b style={{color: markCandidateAsSelected ? \"Green\" : \"red\"}}>\n                                {jobApplicationData?.modified?.substring(0, 10).split('-').reverse().join('/') + \" | \" + jobApplicationData?.modified?.substring(11, 16)}</b>\n                            </b>\n                        ) : (\"\")}\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} sx={{ mt:3, mb: 3 }}>\n                        </Stack>\n                    </TimelineContent>\n                </TimelineItem>\n            </Timeline>\n            </CardContent>\n            <CardContent>\n            <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                Total Time Taken <br></br>\n                {jobApplicationData?.job_application_result ? (\n                <b style={{color: \"red\"}}>{totalTime[0] + \" Days \" + totalTime[1] + \" Hours \" + totalTime[2] + \" Minutes \" + totalTime[3] + \" Seconds \"}</b>\n                ) : (<b style={{color: \"red\"}}>Recruitment process is in progress !</b>) }\n            </Typography>\n            </CardContent>\n            </Card>\n        </Container>\n    </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/user/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/booked-interview/BookedInterviewList.js",["1826","1827"],"import axios from 'axios';\nimport {useState, useEffect} from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport * as constants from 'src/utils/constants';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nexport default function BookedInterviewList() {\n    const navigate = useNavigate();\n    const handleOnRowClick = (rowData) => {\n        navigate(\"/employee-dashboard/booked-interview/candidate-interview\", {state:{\n            id: rowData[0],\n            jobApplicationId: rowData[1]\n        }})\n    }   \n\n    const options = {\n        selectableRows: false,\n        filter: true,\n        filterType: \"multiselect\",\n        responsive: \"standard\",\n        download: false,\n        print: false,\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {handleOnRowClick(rowData)},\n    };\n\n    const columns = [\n        {\n            name: \"Interview ID\",\n            options: {\n                filter: false,\n                display:false\n            },\n        },\n        {\n            name: \"Job Application ID\",\n            options: {\n                filter: false,\n                display:false\n            },\n        },\n        {\n            name: \"RRF Number\",\n            options: {\n                filter: true,\n            },\n        },\n        {\n            name: \"Candidate Name\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <a href=\"\" style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Interview Round\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        <b>{value}</b>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Email\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Phone Number\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Interview Date\",\n            options: {\n                filter: true\n            }\n        },\n        {\n            name: \"Interview Status\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                       value === 'CONFIRMED' ?  <b style={{color: 'red'}}>Pending</b> : <b style={{color: 'green'}}>Completed</b> \n                    )\n                }\n            }\n        }\n    ];\n\n    // get and save employee data\n    const [employeeData, setEmployeeData] = useState([])\n    const employeeDataLoad = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee-data/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setEmployeeData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    }\n\n    useEffect(() => {\n        employeeDataLoad()\n      }, [])\n\n    const InterviewData = []\n    if (employeeData.booked_interviews)\n        employeeData.booked_interviews.forEach(data => (data.interview_status=='CONFIRMED' && data.interview_feedback==null) ? \n        InterviewData.push({\n            id: data.id,\n            jobApplicationId: data.job_application_id,\n            rrfNumber: data.rrf_number,\n            candidateName: data.candidate_name,\n            candidateEmail: data.candidate_email,\n            candidatePhoneNumber: data.candidate_number,\n            interviewRound: data.interview_round,\n            start: data.start_date, \n            end: data.end_date, \n            status: data.interview_status, \n            link: data.interview_moderator_link\n        }) : \"Not Available\") \n\n    return(\n        <ThemeProvider theme={theme}>\n        <MUIDataTable\n            data={InterviewData.map(data => {\n                return [\n                    data.id,\n                    data.jobApplicationId,\n                    data.rrfNumber,\n                    data.candidateName,\n                    data.interviewRound,\n                    data.candidateEmail,\n                    data.candidatePhoneNumber,\n                    data.start,\n                    data.status\n                ]\n            })}\n            columns={columns}\n            options={options}\n            components={components}\n        />\n        </ThemeProvider>   \n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/GenerateOfferLetter.js",["1828","1829","1830"],"import 'scrollable-component';\nimport React from \"react\";  \nimport PrintButton from \"./PrintButton\";// material\nimport { Button, Typography } from '@mui/material';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport { useSnackbar } from 'notistack';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport UserInfo from '../../../utils/Authorization/UserInfo';\nimport { renderToString } from 'react-dom/server';\nimport { jsPDF } from \"jspdf\";\nimport { useRef } from 'react';\n\n\nconst styles = {\n  page: {\n    marginLeft: \"2rem\",\n    marginRight: \"2rem\",\n    \"page-break-after\": \"always\",\n    fontSize: \"16px\",\n    lineHeight: \"22px\",\n    align: \"justify\",\n  \n  },\n  mycontent: {\n    height: \"600px\",\n    border: \"1px solid black\",\n    marginTop: \"20px\",\n  },\n\n  columnLayout: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    margin: \"02rem 0rem 0rem 0rem\",\n    gap: \"1rem\"\n  },\n\n  spacer2: {\n    height: \"2.5rem\"\n  },\n\n  fullWidth: {\n    width: \"90%\"\n  },\n\n  marginb0: {\n    marginBottom: 0\n  },\n  \n};\n\nexport default function GOL2(candData) {\n  \n  const hrToken = localStorage.getItem(\"authToken\");\n\n  var cand_id = candData?.candidateData?.id\n\n  const offerLetterRef = useRef(null);\n\n  const offerLetterRef1 = useRef(null);\n\n  const offerLetterRef2 = useRef(null);\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const navigate = useNavigate();\n\n  const userInfo = UserInfo()\n\n  const pdfRef = React.useRef();\n\n    // ------------------- Functions --------------------\n\n    function handleSendMail(){\n\n      const candId = candData?.candidateData?.id\n\n      const hrToken = localStorage.getItem(\"authToken\");\n\n      var apiData = {\n          \"cand_id\": candId,\n      }\n\n      apiInstance({\n          method: \"post\",\n          url: \"candidate-viewset/send_mail/\",\n          headers: {\n              Authorization: \"token \" + hrToken,\n          },\n          data: apiData,\n      })\n      .then(function (response) {\n          enqueueSnackbar(response.data.message, {\n              anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'right',\n              },\n              variant: 'success',\n              autoHideDuration: 2000,\n          });\n          navigate(\"/resumeX/candidates\", { replace: true });\n      })\n      .catch(function (error) {\n          enqueueSnackbar('Insufficient Candidate Information. Please fill up necessary data.', {\n              anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'right',\n              },\n              variant: 'error',\n              autoHideDuration: 2000,\n          });\n      });\n  }\n  function handleGeneratePDF(){\n\n\t\tconst doc = new jsPDF('landscape', 'pt','a2');\n    let pageHeight = doc.internal.pageSize.getHeight();\n    doc.html(document.getElementById(\"Page1\"), {\n       callback: function (pdf) {\n         pdf.addPage(\"a2\", \"l\");\n         pdf.html(document.getElementById(\"Page2\"), {\n           callback: function (pdf2) {\n             pdf2.addPage(\"a2\", \"l\");\n             pdf2.html(document.getElementById(\"Page3\"), {\n               callback: function (pdf3) {\n                  var blob = doc.output('blob');\n                  var formData = new FormData();\n                  formData.append('offer_letter_file', blob); \n\n                  apiInstance({\n                    method: \"put\",\n                    url: \"candidate-viewset/\" + cand_id + \"/\",\n                    headers: {\n                        Authorization: \"token \" + hrToken,\n                        'Content-Type': \"multipart/form-data\",\n                    },\n                    data: formData,\n                })\n                    .then(function (response) {\n                        enqueueSnackbar('Offer Letter Stored Successfully', {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                            },\n                            variant: 'success',\n                            autoHideDuration: 2000,\n                        });\n                        navigate(\"/resumeX/candidates\", { replace: true });\n                    })\n                    .catch(function (error) {\n                        enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                            },\n                            variant: 'error',\n                            autoHideDuration: 2000,\n                        });\n      \n        \n                    });\n\n               },\n               x: 0,\n               y: 2 * pageHeight,\n             });\n           },\n           x: 0,\n           y: pageHeight,\n         });\n       },\n       x: 0,\n       y: 0,\n     });\n  }\n\n    return (\n      <>\n      <scrollable-component style={styles.mycontent}>       \n      <div ref={pdfRef} id=\"pdf\" style={{float: \"left\"}}>\n        <table>\n          <tr>\n            <td>\n            <div id=\"Page1\" ref={offerLetterRef}>    \n              <div style={styles.page}>\n                <div style={styles.columnLayout}>\n                  <div style={styles.column}>\n                    <p><font>{candData?.candidateData?.onboard_details?.ref_no}</font>\n                    <font style={{float: \"right\"}} >{candData?.candidateData?.onboard_details?.offer_date}</font></p>\n                    <p>\n                      <center><h4 style={styles.marginb0}><u><b>Offer Letter</b></u></h4></center></p>\n                    <p>\n                    Dear <b>{candData?.candidateData?.user?.first_name}  {candData?.candidateData?.user?.last_name}</b>,<br/>\n                    Heartiest Congratulations!<br/>\n                    With great pleasure, we invite you to become a part of our tenacious team.\n                    Our inherent organizational DNA is to deliver tangible and measurable business value to \n                    our Global Customers and we take extreme pride in having you as a part of our team.\n                    We are pleased to offer you the position of “<b>{candData?.candidateData?.job_application?.[0]?.job_name}</b>” \n                    in our organization on the terms discussed and agreed by you during your\n                    interactions with us. The details of the offer are mentioned below and in the \n                    Annexure I & II attached herewith.<br/></p>\n                    <p>\n                    <b>Joining Date</b>&emsp;&emsp;&ensp;&ensp;:  &emsp; &emsp;{candData?.candidateData?.onboard_details?.join_date}<br/>\n                    <b>Reporting Time</b>&emsp;&ensp;:  &emsp; &emsp; 9:30 a.m.<br/>\n                    </p>\n                    <p>\n                    Your formal Letter of Appointment will be issued to you upon your joining the organization.\n                    This will contain details of all our terms and conditions of employment.<br/></p>\n                    <p>\n                    <b>{candData?.candidateData?.user?.first_name}</b> , we look forward to having you on board with us on this exciting journey.\n                    In case you have any feedback/suggestion or have any query, feel free to contact any of the\n                    following individuals:<br/>\n                    </p>\n                    <p>\n                    Recruitment team member: {candData?.candidateData?.created_by?.member?.first_name} {candData?.candidateData?.created_by?.member?.last_name} – hr@thegatewaycorp.com<br/>\n                    Onboarding team member : {candData?.candidateData?.onboard_details?.onboarding_hr?.hr_name} – onboarding@thegatewaycorp.com<br/>\n                    </p>\n                    <p>\n                    We take this opportunity to wish you a great career ahead with Gateway.<br/>\n                    With Best Regards,<br/></p>\n                    <p>\n                    <b>For, Gateway Group Of Companies  <font style={{float: \"right\"}}>Read and Accepted:</font></b><br/></p>\n                    <p>\n                    _________________________________<font style={{float: \"right\"}}>___________________</font><br/>\n                    <font><b>( {candData?.candidateData?.onboard_details?.sign_authority?.authority_name} ) <font style={{float: \"right\"}}>( {candData?.candidateData?.user?.first_name}  {candData?.candidateData?.user?.last_name} )</font></b></font><br/>\n                    <font><b>Authorized Signatory</b></font><br/><br/><br/><br/><br/>\n                    </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          </td>\n        </tr>\n        <tr>\n          <td>\n          <div id=\"Page2\" ref={offerLetterRef1}>    \n              <div style={styles.page}>\n                <div style={styles.columnLayout}>\n                  <div style={styles.column}>\n                    <p><center><h4 style={styles.marginb0}><b>Annexure I</b></h4></center></p>\n                    <p style={styles.marginb0}><b>Below are further details of your offer:</b></p>\n                    <p style={{align: \"justify\"}}>\n                      1. The company will be aligning your growth with that of the company’s growth and expect a \n                      mutual understanding that you will refrain from directly or indirectly engaging in any other business.<br/><br/>\n                      2. We request you to kindly share your acceptance before the expiration of three (3) days from\n                      the date of this letter, or the joining date, whichever is earlier. In case we don’t receive any \n                      acceptance as above from you or you remain absent on the joining day post acceptance, this will \n                      automatically be treated as the offer being rejected by you and no communication regarding the \n                      same shall be made from the company’s side.<br/><br/>\n                      3. We further request you to ready the material (copies of documents pertaining to the statements/claims \n                      made in your resume), for satisfactory verification of references, non-compete obligations, background,\n                        education and employment history since it is contingent for your appointment.<br/><br/>\n                      4. Your compensation package & structure is unique to you & is not liable for comparison with any other\n                      employee of the company. It is determined by numerous factors such as your job, skill specific background\n                      and professional merit. This information and any subsequent changes made there in should be treated as \n                      strictly personal and confidential.<br/><br/>\n                      5. Information pertaining to Company operations and intellectual property is confidential and you will be\n                      required to sign a non-disclosure agreement for the same.If you are bound by a confidentiality agreement \n                      with a previous employer, you must notify the Company and indemnify the Company against any breach thereof.<br/><br/>\n                      6. Upon acceptance of this offer, we expect you to comply with the code of conduct as well as the policies \n                      of the Company.<br/><br/>\n                      7. If amendments to your offer are required, such as joining date or designation, they will be confirmed \n                      and communicated to you by the company in writing (on paper ordigital).<br/><br/>\n                      8. Based on the specific needs and exigencies of work, the company reserves right to deploy you for work in \n                      any of its offices within India or abroad. You are expected to respect the judgement and the decision of the \n                      company in this regard.<br/>\n                    </p>\n                    <p style={styles.marginb0}><b>Agreed and accepted:</b></p>\n                    <br/>\n                    <p>...................................................<br/>\n                    Candidate’s Signature</p>\n                    <p> Name:<br/> Date:<br/>Place:</p>\n                </div>\n              </div>\n            </div>\n         </div>\n          </td>\n        </tr>\n        <tr>\n          <td>\n          <div id=\"Page3\" ref={offerLetterRef2}>   \n            <div style={styles.page}>\n                <div style={styles.columnLayout}>\n                  <div style={styles.column}>\n                    <p><center><h4 style={styles.marginb0}><b>Annexure II</b></h4></center></p>\n                    <p>After accepting this offer, you will be receiving a link from ‘Gateway Talent Hub’ over email\n                        on your email id. We request you to kindly click on the link which will enable you to get onto our portal.</p>\n                    <p>Please create your credentials there to complete your joining formalities prior to your date of joining.</p>\n                    <p>You are required to upload the following documents at Gateway Talent Hub Portal:</p>\n                    <p>1)Passport size photograph (Upload Softcopy & Bring 4 Hard Copies as well).<br/>\n                        2)Identity Proof (PAN, AADHAR, Voter ID, DL, PASSPORT)<br/>\n                        3)Relieving & Experience Letters of all the companies worked with<br/>\n                        4)Last Salary Slip/Bank Statement<br/>\n                        5) Academic Mark Sheets/Certificates (10th , 12th , Diploma, Bachelors, Masters)<br/>\n                    </p>\n                    <p> Please note that all the documents listed above are mandatory to be brought with you in its original form at the time of joining for verification purposes. </p>\n                    <p>On our portal, you can access assistance, support & live feeds about us.</p>\n                    <p style={styles.marginb0}><b>Agreed and accepted:</b></p>\n                      <br/>\n                      <p>...................................................<br/> Candidate’s Signature</p>\n                      <p> Name:<br/> Date:<br/>Place:</p>\n                    </div>\n                  </div>\n                </div>\n             </div>\n              </td>\n            </tr>\n          </table>\n        </div>\n      </scrollable-component>\n\n      {userInfo.role !== 'BU_HEAD' ? \n      <div>\n        <PrintButton refsToPrint={[pdfRef]} />\n        <Button style={{float: \"right\" ,fontWeight: \"bold\", \n                        padding: \"10px\", borderRadius: \"10px\", \n                        color: \"white\", backgroundColor: \"#009999\", \n                        margin: \"10px\", fontSize: \"medium\"}} \n                onClick={handleSendMail}> \n          Send Mail \n        </Button>\n        <Button style={{float: \"right\" ,fontWeight: \"bold\", \n                        padding: \"10px\", borderRadius: \"10px\", \n                        color: \"white\", backgroundColor: \"rgb(55 151 250)\", \n                        margin: \"10px\", fontSize: \"medium\"}} \n                onClick={handleGeneratePDF}> \n          Save PDF \n        </Button>\n      </div>\n      : null }\n    </>\n  );\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/OnboardEngagement.js",["1831","1832","1833","1834","1835","1836","1837","1838","1839","1840","1841","1842","1843"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem, Tooltip, Fade, Autocomplete\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field, useFormikContext, useField } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { DateTimePicker, LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport { CenterFocusStrong } from '@mui/icons-material';\nimport OnboardEngagementList from './ListCandOnboardEngagement';\nimport DatePicker from 'react-datepicker';\nimport { border } from '@mui/system';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n\nconst DatePickerField = ({ ...props }) => {\n    const { setFieldValue } = useFormikContext();\n    const [field] = useField(props);\n   \n    return (   \n      <DatePicker\n        {...field}\n        {...props}\n\n        showTimeSelect        \n\n        selected={(field.value && new Date(field.value)) || null}\n\n        onChange={(val) => {\n          setFieldValue(field.name, val);\n        }}\n\n        dateFormat=\"MMMM d, yyyy h:mm aa\"\n        // dateFormat=\"yyyy-MM-dd h:mm:ss aa\"\n      />\n    );\n  };\n\nexport default function OnboardEngagement(candData) {\n    const { enqueueSnackbar } = useSnackbar();\n    const hrToken = localStorage.getItem(\"authToken\");\n    const navigate = useNavigate();\n\n    const contact_person = [\n        'Aashruti D Pagey',\n        'Aesha P Shah',\n        'Ajay K Chawla',\n        'Alap D Mistry',\n    ]\n\n    const [disableValue, setDisableValue] = useState(false)\n   \n    const setOtherValues = () => \n    {\n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n            \n        if (user_role === 'BU_HEAD')\n        { setDisableValue(true)  }\n\n        else{ setDisableValue(false) }\n    }\n\n    useEffect(() => {\n        setOtherValues();\n    }, [])\n\n\n    const callEngagementCreateAPI = (apiData) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"onboard-engagements/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiData,\n        })\n            .then(async function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidates\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });    \n                setSubmitting(false)    \n            });\n      }\n\n    const EngagementSchema = Yup.object().shape({\n        ContactPerson: Yup.string()\n                          .required(\"Contact person is required.\"),\n        MeetingDT: Yup.date()\n                      .min(new Date(), \"Invalid meeting date & time.\")\n                      .required(\"Schedule date & time is required.\"),\n        Mode: Yup.string()\n                 .required(\"Contact mode is required.\"),\n        IM: Yup.string()\n               .when(\"Mode\",{\n                is: (val) => val !== \"BBB\" && val !== \"Face To Face\",\n                then: Yup.string().required('IM is required')\n               } ),\n        Agenda: Yup.string()\n                    .required(\"Agenda for call is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            ContactPerson: '',\n            MeetingDT: new Date(),\n            Mode: '',\n            IM: '',\n            Agenda: '',\n        },\n        validationSchema: EngagementSchema,\n        onSubmit: (values) => {\n            let cand_id = candData?.candidateData?.id\n\n            let formData = {\n                \"candidate_id\": cand_id,\n                \"call_with\": values.ContactPerson,\n                \"schedule_dt\": values.MeetingDT,\n                \"mode\": values.Mode,\n                \"im\": values.IM,\n                \"agenda\": values.Agenda\n            }\n            callEngagementCreateAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, } = formik;\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2 }} variant=\"outlined\">\n\n                            <CardContent>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <Autocomplete\n                                        fullWidth\n                                        id=\"ContactPerson\"\n                                        type=\"string\"\n                                        options={contact_person}\n\n                                        onChange={(event, value) => {\n                                            setFieldValue(\"ContactPerson\", value);\n                                          }}\n                                          \n                                        renderInput={(params) => <TextField {...params} \n                                        \n                                        label=\"Call/Meeting With ?\" \n                                        disabled={disableValue}\n\n                                        error={Boolean(touched.ContactPerson && errors.ContactPerson)}\n                                        helperText={touched.ContactPerson && errors.ContactPerson}\n                                        />}\n                                    />\n\n                                    <div className=\"form-group\" \n                                         style={{ display: 'flex', justifyContent: 'space-between', paddingTop:15, width:\"100%\" }}\n                                    >\n\n                                        <InputLabel id=\"schedule-date-time\"\n                                        style={{ width: \"50%\"}}> \n                                            Scheduled Date and Time: \n                                        </InputLabel>\n                                        <TextField \n                                        style={{width: \"100%\"}}  label=\"Meeting\" \n                                        type=\"datetime-local\" \n                                        name=\"MeetingDT\"  \n                                        disabled={disableValue}\n\n                                        InputLabelProps={{shrink: true }}/>\n\n                                        <ErrorMessage name=\"MeetingDT\">\n                                            {(msg) => <span\n                                                style={{width:\"inherit\", color: \"#FF4842\", fontSize: \"13px\", textAlign: \"inherit\"}}>\n                                                {msg}\n                                            </span>}\n                                        </ErrorMessage>                       \n                                    </div>\n\n                                    </Stack>\n                                    \n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Mode\"\n                                            type=\"string\"\n                                            label=\"Meeting Mode\"\n                                            disabled={disableValue}\n\n                                            select\n\n                                            {...getFieldProps(\"Mode\")}\n                                            error={Boolean(touched.Mode && errors.Mode)}\n                                            helperText={touched.Mode && errors.Mode}\n                                        >\n                                        \n                                        <MenuItem key=\"Audio\" value=\"Audio\">\n                                            Audio\n                                        </MenuItem>\n                                        <MenuItem key=\"BBB\" value=\"BBB\">\n                                            BBB\n                                        </MenuItem>\n                                        <MenuItem key=\"Skype\" value=\"Skype\">\n                                            Skype\n                                        </MenuItem>\n                                        <MenuItem key=\"Face2Face\" value=\"Face To Face\">\n                                            Face To Face\n                                        </MenuItem>\n                                      \n                                        </TextField>\n\n                                        { values.Mode !== 'BBB' && values.Mode !== 'Face To Face'? \n\n                                        <TextField\n                                            fullWidth\n                                            id=\"IM\"\n                                            type=\"string\"\n                                            label=\"IM\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"IM\")}\n\n                                            error={Boolean(touched.IM && errors.IM)}\n                                            helperText={touched.IM && errors.IM}\n                                        />  : null }                                   \n                                    </Stack>\n\n                                    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} >\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Agenda\"\n                                            label=\"Agenda of the call \"\n                                            multiline\n                                            rows={3}\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"Agenda\")}\n\n                                            error={Boolean(touched.Agenda && errors.Agenda)}\n                                            helperText={touched.Agenda && errors.Agenda}\n                                        />\n                                    </Stack>\n\n                                </Stack>\n\n\n                                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n\n                                <LoadingButton\n                                    fullWidth\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    loading={isSubmitting}\n                                    disabled={disableValue}\n                                >\n                                    Schedule Call\n                                </LoadingButton>\n\n                            </CardContent>\n                        </Card>\n                    </Form>\n                </FormikProvider>\n\n                <Card sx={{ mt: 2 }} variant=\"outlined\">\n                    <CardContent>\n                        <OnboardEngagementList  tableContent={candData} />                        \n                    </CardContent>\n                </Card>\n\n            </Container >\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/interviews/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/utils/formatNumber.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/cto-round/CTORoundStatus.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/user/UserMoreMenu.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/cto-round/CTORoundResult.js",["1844","1845","1846","1847","1848","1849","1850"],"import axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport { styled } from '@mui/material/styles';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Checkbox, Dialog, DialogActions, DialogContent, Rating, Stack, Table, TableContainer, TableRow, TableHead, TextField, TableBody, TableCell, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nexport default function CTORoundResult(props) {\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Schedule Interview Result Dialog\n    const [ctoScheduleInterviewResultOpen, setCTOScheduleInterviewResultOpen] = useState(false)\n\n    // Mark Technical Interview as Completed flag state\n    const [ctoInterviewChecked, setCTOInterviewChecked] = React.useState();\n\n    const [ctoRoundResult, setCTORoundResult] = useState(\"\")\n\n    const CTORoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'CTO_ROUND'\n    })\n\n    const handleTechnicalRoundOneResult = event => {\n        const confirmed_interview_id = CTORoundData?.[0].id\n\n        setCTOScheduleInterviewResultOpen(false)\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n\n        const data = {\n            \"is_interview_completed\": ctoInterviewChecked,\n            // \"is_technical_interview_two_completed\": ctoInterviewChecked,\n            \"interview_feedback\": ctoRoundResult, \n\n            \"interview_recording_notes\": CTORoundData?.[0].interview_recording_notes\n        }\n\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // set initial values\n    useEffect(() => {\n        setCTOInterviewChecked(CTORoundData?.[0]?.interview_status === \"COMPLETED\")\n        setCTORoundResult(CTORoundData?.[0]?.interview_feedback)\n    }, [\n        CTORoundData?.[0]?.interview_status === \"COMPLETED\", \n        CTORoundData?.[0]?.interview_feedback,\n    ])\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n            variant=\"contained\" \n            size=\"small\" color=\"error\" \n            style={{width: \"150px\"}}\n            onClick={() => setCTOScheduleInterviewResultOpen(true)}\n            disabled={props?.jobApplicationData?.is_hr_interview_completed!==true}\n            >Interview Result</Button>\n\n            <Dialog open={ctoScheduleInterviewResultOpen} onClose={() => setCTOScheduleInterviewResultOpen(false)} maxWidth=\"md\">\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    CTO / Manager / HR Round Result\n                </Typography>\n                <DialogContent>\n                    <TableContainer>\n                        <Table>\n                            <TableHead>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                            </TableHead>\n                            <TableBody>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Strong Areas:</b></TableCell>\n                                    <TableCell>{CTORoundData?.[0]?.candidate_strong_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Weak Areas:</b></TableCell>\n                                    <TableCell>{CTORoundData?.[0]?.candidate_weak_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Skills Rating:</b></TableCell>\n                                    <TableCell>\n                                        {CTORoundData?.[0]?.skills_rating.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>\n                                            <Rating\n                                                name=\"hover-feedback\"\n                                                value={item.rating}\n                                                readOnly\n                                            />\n                                            </TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Training Areas:</b></TableCell>\n                                    <TableCell>\n                                        {CTORoundData?.[0]?.training_areas.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>{item.duration}</TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for BU:</b></TableCell>\n                                    <TableCell>{CTORoundData?.[0]?.fit_bu}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Project:</b></TableCell>\n                                    <TableCell>{CTORoundData?.[0]?.fit_project}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Level:</b></TableCell>\n                                    <TableCell>{CTORoundData?.[0]?.fit_level}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Interview Feedback:</b></TableCell>\n                                    <TableCell>{CTORoundData?.[0]?.interview_feedback}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Is candidate selected?:</b></TableCell>\n                                    <TableCell>\n                                    {CTORoundData?.[0]?.candidate_eligibility ? <b style={{color:\"green\"}}>Selected</b> : <b style={{color:\"red\"}}>Rejected</b>}\n                                    </TableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </DialogContent>\n            </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-two/TechnicalRoundTwoStatus.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/cto-round/CTORoundRecording.js",["1851","1852","1853"],"import axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Dialog, DialogContent, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nexport default function CTORoundRecording(props) {\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Interview Recording State\n    const [CTORoundRecording, setCTORoundRecording] = useState(\"\")\n\n    // Open Technical Interview Recording\n    const [openCTORoundRecording, setOpenCTORoundRecording] = useState(false)\n\n    const [ctoRoundRecordingNotes, setCTORoundRecordingNotes] = useState(\"\")\n\n    const CTORoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'CTO_ROUND'\n    })\n\n    const handleCTOInterviewRecording = () => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\"id\": CTORoundData?.[0]?.id}\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/interview-recording/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            setCTORoundRecording(response.data.data)\n            setOpenCTORoundRecording(true)\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const handleCTORoundRecordingNotes = event => {\n        const confirmed_interview_id = CTORoundData?.[0].id\n\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\n            \"is_interview_completed\":  CTORoundData?.[0].interview_status === \"COMPLETED\",\n            // \"is_technical_interview_two_completed\":  CTORoundData?.[0].interview_status === \"COMPLETED\",\n            \"interview_feedback\": CTORoundData?.[0].interview_feedback,\n\n            \"interview_recording_notes\": ctoRoundRecordingNotes\n        }\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Recording Notes Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 2000,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // set initial values\n    useEffect(() => {\n        setCTORoundRecordingNotes(CTORoundData?.[0]?.interview_recording_notes)\n    }, [\n        CTORoundData?.[0]?.interview_recording_notes,\n    ])\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n                variant=\"contained\" \n                size=\"small\" \n                color=\"error\" \n                style={{width: \"150px\"}}\n                onClick={handleCTOInterviewRecording}\n                disabled={(props?.jobApplicationData?.is_hr_interview_completed!==true)}>\n                Interview Recording\n            </Button>\n\n            <Dialog fullWidth maxWidth=\"lg\" open={openCTORoundRecording} onClose={() => setOpenCTORoundRecording(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    CTO / Manager / HR Interview Recording\n                </Typography>\n\n                {CTORoundRecording !== \"Not Available\" ? ( \n                <DialogContent>\n                <div>\n                    <table style={{width: \"100%\"}}>\n                        <tr>\n                            <td style={{width: \"70%\"}}>\n                            <iframe width=\"100%\" height=\"550\"\n                                src={CTORoundRecording}\n                            ></iframe>\n                            </td>\n                            <td style={{width: \"3%\"}}></td>\n                            <td>\n                            <TextField\n                                fullWidth\n                                label=\"Notes\"\n                                style={{ height: 500 }}\n                                multiline\n                                rows={19}\n                                maxRows={4}\n                                defaultValue={ctoRoundRecordingNotes}\n                                onChange={(event) => setCTORoundRecordingNotes(event.target.value)}\n                            />\n                            <Button \n                                variant=\"contained\" \n                                size=\"medium\" \n                                color=\"error\"\n                                style={{left: \"35%\"}}\n                                onClick={handleCTORoundRecordingNotes}\n                            >\n                                Submit Notes\n                            </Button>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n                </DialogContent>\n                ) : (\n                <DialogContent align=\"center\">\n                    <b>No Recordings Available! &nbsp; Please try again in sometime.</b>\n                </DialogContent>   \n                )}\n            </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/user/UserListToolbar.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/user/UserListHead.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-two/TechnicalRoundTwoRecording.js",["1854","1855","1856"],"import axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Dialog, DialogContent, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nexport default function TechnicalRoundTwoRecording(props) {\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Interview Recording State\n    const [technicalInterviewRecording, setTechnicalInterviewRecording] = useState(\"\")\n\n    // Open Technical Interview Recording\n    const [openTechnicalInterviewRecording, setOpenTechnicalInterviewRecording] = useState(false)\n\n    const [technicalInterviewRecordingNotes, setTechnicalInterviewRecordingNotes] = useState(\"\")\n\n    const TechnicalRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'TECHNICAL_ROUND_TWO'\n    })\n\n    const handleTechnicalInterviewRecording = () => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\"id\": TechnicalRoundData?.[0]?.id}\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/interview-recording/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            setTechnicalInterviewRecording(response.data.data)\n            setOpenTechnicalInterviewRecording(true)\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const handleTechnicalRoundOneRecordingNotes = event => {\n        const confirmed_interview_id = TechnicalRoundData?.[0].id\n\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\n            \"is_interview_completed\":  TechnicalRoundData?.[0].interview_status === \"COMPLETED\",\n            \"is_technical_interview_two_completed\":  TechnicalRoundData?.[0].interview_status === \"COMPLETED\",\n            \"interview_feedback\": TechnicalRoundData?.[0].interview_feedback,\n\n            \"interview_recording_notes\": technicalInterviewRecordingNotes\n        }\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Recording Notes Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 2000,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // set initial values\n    useEffect(() => {\n        setTechnicalInterviewRecordingNotes(TechnicalRoundData?.[0]?.interview_recording_notes)\n    }, [\n        TechnicalRoundData?.[0]?.interview_recording_notes,\n    ])\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n                variant=\"contained\" \n                size=\"small\" \n                color=\"error\" \n                style={{width: \"150px\"}}\n                onClick={handleTechnicalInterviewRecording}\n                disabled={(props?.jobApplicationData?.is_hr_interview_completed!==true)}>\n                Interview Recording\n            </Button>\n\n            <Dialog fullWidth maxWidth=\"lg\" open={openTechnicalInterviewRecording} onClose={() => setOpenTechnicalInterviewRecording(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Technical Round-2 Interview Recording\n                </Typography>\n\n                {technicalInterviewRecording !== \"Not Available\" ? ( \n                <DialogContent>\n                <div>\n                    <table style={{width: \"100%\"}}>\n                        <tr>\n                            <td style={{width: \"70%\"}}>\n                            <iframe width=\"100%\" height=\"550\"\n                                src={technicalInterviewRecording}\n                            ></iframe>\n                            </td>\n                            <td style={{width: \"3%\"}}></td>\n                            <td>\n                            <TextField\n                                fullWidth\n                                label=\"Notes\"\n                                style={{ height: 500 }}\n                                multiline\n                                rows={19}\n                                maxRows={4}\n                                defaultValue={technicalInterviewRecordingNotes}\n                                onChange={(event) => setTechnicalInterviewRecordingNotes(event.target.value)}\n                            />\n                            <Button \n                                variant=\"contained\" \n                                size=\"medium\" \n                                color=\"error\"\n                                style={{left: \"35%\"}}\n                                onClick={handleTechnicalRoundOneRecordingNotes}\n                            >\n                                Submit Notes\n                            </Button>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n                </DialogContent>\n                ) : (\n                <DialogContent align=\"center\">\n                    <b>No Recordings Available! &nbsp; Please try again in sometime.</b>\n                </DialogContent>   \n                )}\n            </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/cto-round/ScheduleCTORound.js",["1857","1858"],"import axios from 'axios';\nimport * as Yup from \"yup\";\nimport {useSnackbar} from 'notistack';\nimport { LoadingButton } from \"@mui/lab\";\nimport React, { useState, useEffect } from 'react';\nimport {useParams} from 'react-router-dom';\nimport { Button, Dialog, DialogContent, DialogActions, MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\nimport { Form, FormikProvider, useFormik } from \"formik\";\n\nexport default function ScheduleCTORound(props) {\n    const { id } = useParams();\n\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Schedule Interview Dialog\n    const [ctoScheduleInterviewOpen, setCTOScheduleInterviewOpen] = useState(false)\n\n    const CTORoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'CTO_ROUND'\n    })\n\n    const [employeeData, setEmployeeData] = useState([])\n\n    const getEmployeeData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setEmployeeData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    useEffect(() => {\n        getEmployeeData()\n    }, [])\n\n    const SelectEmployeeSchema = Yup.object().shape({\n        employee: Yup.string()\n          .required(\"Employee is required\"),\n        startDate: Yup.string()\n        .required(\"Interview start datetime is required\"),\n        duration: Yup.string()\n        .required(\"Interview duration is required\"),\n      });\n      const formik = useFormik({\n        initialValues: {\n            employee: '',\n            startDate: '',\n            duration: 60\n        },\n        validationSchema: SelectEmployeeSchema,\n        onSubmit: (formValues) => {\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            // Add meeting duration minuts and 5.30 Hrs to convert in Indian time\n            var endDatetime = new Date(formValues.startDate)\n            endDatetime.setHours(endDatetime.getHours()+5,endDatetime.getMinutes()+30+formValues.duration,0,0)\n\n            const data = {\n                employee_id: formValues.employee,\n                candidate_id: props.jobApplicationData.resume.candidate.id,\n                job_application_id: props.jobApplicationData.id,\n                start_date: formValues.startDate,\n                end_date: endDatetime.toISOString().slice(0, 19),\n                intv_round: \"CTO_ROUND\",\n                interview_status: \"CONFIRMED\"\n            }\n\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/confirmed-interviews/\", data, {headers})\n            .then(function (response) {\n                if (response.status === 200) {\n                    enqueueSnackbar(\"Interview has been scheduled !!\", {\n                        anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                      },\n                        variant: 'success',\n                        autoHideDuration: 1500,\n                      });\n                      setCTOScheduleInterviewOpen(false)\n                      window.location.reload(false);                    \n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n        }\n      });    \n\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n                variant=\"contained\" \n                size=\"small\" color=\"error\" \n                style={{width: \"150px\"}}\n                onClick={() => setCTOScheduleInterviewOpen(true)}\n                disabled={props?.jobApplicationData?.is_hr_interview_completed!==true}\n                >\n                Schedule Interview\n            </Button>\n\n            {/* ====================================================================================================== */}\n            {/* -------------------- Technical Schedule Interview Dialog -------------------- */}\n            {/* {CTORoundData?.length > 0 ? (\n                <Dialog open={ctoScheduleInterviewOpen} onClose={() => setCTOScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Technical Round 2\n                    </Typography>\n                    <DialogContent>\n                        Interview has already been scheduled. Below are the interview details:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interview Date:</b> <b style={{color: \"red\"}}>{CTORoundData?.[0]?.start_date.substring(0, 10)}</b>\n                        <br></br>\n                        <b>Interview Time:</b> <b style={{color: \"red\"}}>{CTORoundData?.[0]?.start_date.substring(11, 16)}</b> to <b style={{color: \"red\"}}>{CTORoundData?.[0]?.end_date.substring(11, 16)}</b>\n                        <br></br><br></br>\n                        <b>Interview Link:</b> <a href={CTORoundData?.[0]?.interview_moderator_link}>Click here to join</a>\n                    </DialogContent>\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            ) : (\n                <Dialog open={ctoScheduleInterviewOpen} onClose={() => setCTOScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Technical Round 2\n                    </Typography>\n\n                    {props?.jobApplicationData?.is_technical_interview_two_mail_sent ? (\n                        \n                    <DialogContent>\n                        <b>Awaiting for candidate's response.</b>\n                        <br></br> <br></br>\n                        An email has already been sent to the candidate asking him to choose interview slot!\n                    </DialogContent>\n                    ) : (\n                    <DialogContent>\n                        An email will be sent to the candidate asking him/her to choose a slot for the interview.\n                        <br></br> <br></br>\n                        Before pressing the \"Schedule Interview\" button, Please make sure employee has given slots for the Interview!\n                    </DialogContent>\n                    )}\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleScheduleInterview} disabled={props?.jobApplicationData?.is_technical_interview_two_mail_sent && true}>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            )}                             */}\n            {/* ====================================================================================================== */}\n\n            {CTORoundData?.length > 0 ? (\n                <Dialog open={ctoScheduleInterviewOpen} onClose={() => setCTOScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for CTO / Manager / HR Round\n                    </Typography>\n                    <DialogContent>\n                        Interview has already been scheduled. Below are the interview details:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interviewer:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {CTORoundData?.[0]?.employee_name} </b>\n                        <br></br>\n                        <b>Interview Date:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(CTORoundData?.[0]?.start_date).toLocaleDateString()} </b>\n                        <br></br>\n                        <b>Interview Time:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(CTORoundData?.[0]?.start_date).toLocaleTimeString().substring(0, 5)}\n                        </b> \n                            &nbsp; to &nbsp;\n                        <b style={{color: \"red\"}}>\n                            {new Date(CTORoundData?.[0]?.end_date).toLocaleTimeString().substring(0, 5)}\n                        </b>\n                        <br></br><br></br>\n                        <b>Interview Link:</b> <a href={CTORoundData?.[0]?.interview_moderator_link}>Click here to join</a>\n                    </DialogContent>\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            \n            ) : (\n            \n                <Dialog open={ctoScheduleInterviewOpen} onClose={() => setCTOScheduleInterviewOpen(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Schedule Interview for CTO / Manager / HR Round\n                </Typography>\n\n                <DialogContent>\n                    <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <Stack spacing={3}>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <TextField\n                                fullWidth\n                                select\n                                label=\"Select Employee\"\n                                {...getFieldProps(\"employee\")}\n                                error={Boolean(touched.employee && errors.employee)}\n                                helperText={touched.employee && errors.employee}\n                                >\n                                {employeeData.map((employee) => (\n                                <MenuItem key={employee.id} value={employee.id}>{employee.user.first_name + \" \" + employee.user.last_name}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <TextField\n                                fullWidth\n                                label=\"Interview Start Datetime\"\n                                type=\"datetime-local\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                {...getFieldProps(\"startDate\")}\n                                error={Boolean(touched.startDate && errors.startDate)}\n                                helperText={touched.startDate && errors.startDate}\n                            >\n                            </TextField>   \n\n                            <TextField\n                                fullWidth\n                                label=\"Interview Duration (In Minutes)\"\n                                type=\"number\"\n                                {...getFieldProps(\"duration\")}\n                                error={Boolean(touched.duration && errors.duration)}\n                                helperText={touched.duration && errors.duration}\n                            >\n                            </TextField>   \n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }}>\n                        <LoadingButton\n                            fullWidth\n                            sx={{ mt: 3}}\n                            size=\"medium\"\n                            color=\"error\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                        >\n                            Schedule Interview\n                        </LoadingButton>\n                        </Stack>\n                        </Stack>\n                    </Form>\n                    </FormikProvider>\n                </DialogContent>\n\n            </Dialog>\n            )}\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-two/TechnicalRoundTwoResult.js",["1859","1860","1861","1862","1863","1864","1865","1866"],"import axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport { styled } from '@mui/material/styles';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Checkbox, Dialog, DialogActions, DialogContent, Rating, Stack, Table, TableContainer, TableRow, TableHead, TextField, TableBody, TableCell, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nexport default function TechnicalRoundTwoResult(props) {\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Schedule Interview Result Dialog\n    const [technicalScheduleInterviewResultOpen, setTechnicalScheduleInterviewResultOpen] = useState(false)\n\n    // Mark Technical Interview as Completed flag state\n    const [technicalInterviewChecked, setTechnicalInterviewChecked] = React.useState();\n\n    const handleTechnicalInterviewCheckedChange = event =>{\n        setTechnicalInterviewChecked(event.target.checked);\n    };\n\n    const [technicalRoundResult, setTechnicalRoundResult] = useState(\"\")\n\n    const TechnicalRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'TECHNICAL_ROUND_TWO'\n    })\n\n    const handleTechnicalRoundOneResult = event => {\n        const confirmed_interview_id = TechnicalRoundData?.[0].id\n\n        setTechnicalScheduleInterviewResultOpen(false)\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n\n        const data = {\n            \"is_interview_completed\": technicalInterviewChecked,\n            \"is_technical_interview_two_completed\": technicalInterviewChecked,\n            \"interview_feedback\": technicalRoundResult, \n\n            \"interview_recording_notes\": TechnicalRoundData?.[0].interview_recording_notes\n        }\n\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // set initial values\n    useEffect(() => {\n        setTechnicalInterviewChecked(TechnicalRoundData?.[0]?.interview_status === \"COMPLETED\")\n        setTechnicalRoundResult(TechnicalRoundData?.[0]?.interview_feedback)\n    }, [\n        TechnicalRoundData?.[0]?.interview_status === \"COMPLETED\", \n        TechnicalRoundData?.[0]?.interview_feedback,\n    ])\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n            variant=\"contained\" \n            size=\"small\" color=\"error\" \n            style={{width: \"150px\"}}\n            onClick={() => setTechnicalScheduleInterviewResultOpen(true)}\n            disabled={props?.jobApplicationData?.is_hr_interview_completed!==true}\n            >Interview Result</Button>\n\n            <Dialog open={technicalScheduleInterviewResultOpen} onClose={() => setTechnicalScheduleInterviewResultOpen(false)} maxWidth=\"md\">\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Technical Round-2 Result\n                </Typography>\n                <DialogContent>\n                    <TableContainer>\n                        <Table>\n                            <TableHead>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                            </TableHead>\n                            <TableBody>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Strong Areas:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.candidate_strong_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Weak Areas:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.candidate_weak_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Skills Rating:</b></TableCell>\n                                    <TableCell>\n                                        {TechnicalRoundData?.[0]?.skills_rating.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>\n                                            <Rating\n                                                name=\"hover-feedback\"\n                                                value={item.rating}\n                                                readOnly\n                                            />\n                                            </TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Training Areas:</b></TableCell>\n                                    <TableCell>\n                                        {TechnicalRoundData?.[0]?.training_areas.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>{item.duration}</TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for BU:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.fit_bu}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Project:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.fit_project}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Level:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.fit_level}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Interview Feedback:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.interview_feedback}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Is candidate selected?:</b></TableCell>\n                                    <TableCell>\n                                    {TechnicalRoundData?.[0]?.candidate_eligibility ? <b style={{color:\"green\"}}>Selected</b> : <b style={{color:\"red\"}}>Rejected</b>}\n                                    </TableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </DialogContent>\n            </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-two/ScheduleTechnicalRoundTwo.js",["1867","1868"],"import axios from 'axios';\nimport * as Yup from \"yup\";\nimport {useSnackbar} from 'notistack';\nimport { LoadingButton } from \"@mui/lab\";\nimport React, { useState, useEffect } from 'react';\nimport {useParams} from 'react-router-dom';\nimport { Button, Dialog, DialogContent, DialogActions, MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\nimport { Form, FormikProvider, useFormik } from \"formik\";\n\nexport default function ScheduleTechnicalRoundTwo(props) {\n    const { id } = useParams();\n\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Schedule Interview Dialog\n    const [technicalScheduleInterviewOpen, setTechnicalScheduleInterviewOpen] = useState(false)\n\n    const TechnicalRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'TECHNICAL_ROUND_TWO'\n    })\n\n    const [employeeData, setEmployeeData] = useState([])\n\n    const getEmployeeData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setEmployeeData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    const TechnologyWiseEmployee = employeeData.filter(item => {\n        return item.interview_tech.id === props?.jobApplicationData?.requisition?.tech_stack?.id\n    })\n\n    useEffect(() => {\n        getEmployeeData()\n    }, [])\n\n    const handleScheduleInterview = event => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\"job_application_id\": id, \"interview_round\": \"Technical Round-2\"}\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/send-interview-slot-mail/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Mail has been sent to the candidate successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const SelectEmployeeSchema = Yup.object().shape({\n        employee: Yup.string()\n          .required(\"Employee is required\"),\n        startDate: Yup.string()\n        .required(\"Interview start datetime is required\"),\n        duration: Yup.string()\n        .required(\"Interview duration is required\"),\n      });\n      const formik = useFormik({\n        initialValues: {\n            employee: '',\n            startDate: '',\n            duration: 60\n        },\n        validationSchema: SelectEmployeeSchema,\n        onSubmit: (formValues) => {\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            // Add meeting duration minuts and 5.30 Hrs to convert in Indian time\n            var endDatetime = new Date(formValues.startDate)\n            endDatetime.setHours(endDatetime.getHours()+5,endDatetime.getMinutes()+30+formValues.duration,0,0)\n\n            const data = {\n                employee_id: formValues.employee,\n                candidate_id: props.jobApplicationData.resume.candidate.id,\n                job_application_id: props.jobApplicationData.id,\n                start_date: formValues.startDate,\n                end_date: endDatetime.toISOString().slice(0, 19),\n                intv_round: \"TECHNICAL_ROUND_TWO\",\n                interview_status: \"CONFIRMED\"\n            }\n\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/confirmed-interviews/\", data, {headers})\n            .then(function (response) {\n                if (response.status === 200) {\n                    enqueueSnackbar(\"Interview has been scheduled !!\", {\n                        anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                      },\n                        variant: 'success',\n                        autoHideDuration: 1500,\n                      });\n                      setTechnicalScheduleInterviewOpen(false)\n                      window.location.reload(false);                    \n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n        }\n      });    \n\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n                variant=\"contained\" \n                size=\"small\" color=\"error\" \n                style={{width: \"150px\"}}\n                onClick={() => setTechnicalScheduleInterviewOpen(true)}\n                disabled={props?.jobApplicationData?.is_hr_interview_completed!==true}\n                >\n                Schedule Interview\n            </Button>\n\n            {/* ====================================================================================================== */}\n            {/* -------------------- Technical Schedule Interview Dialog -------------------- */}\n            {/* {TechnicalRoundData?.length > 0 ? (\n                <Dialog open={technicalScheduleInterviewOpen} onClose={() => setTechnicalScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Technical Round 2\n                    </Typography>\n                    <DialogContent>\n                        Interview has already been scheduled. Below are the interview details:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interview Date:</b> <b style={{color: \"red\"}}>{TechnicalRoundData?.[0]?.start_date.substring(0, 10)}</b>\n                        <br></br>\n                        <b>Interview Time:</b> <b style={{color: \"red\"}}>{TechnicalRoundData?.[0]?.start_date.substring(11, 16)}</b> to <b style={{color: \"red\"}}>{TechnicalRoundData?.[0]?.end_date.substring(11, 16)}</b>\n                        <br></br><br></br>\n                        <b>Interview Link:</b> <a href={TechnicalRoundData?.[0]?.interview_moderator_link}>Click here to join</a>\n                    </DialogContent>\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            ) : (\n                <Dialog open={technicalScheduleInterviewOpen} onClose={() => setTechnicalScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Technical Round 2\n                    </Typography>\n\n                    {props?.jobApplicationData?.is_technical_interview_two_mail_sent ? (\n                        \n                    <DialogContent>\n                        <b>Awaiting for candidate's response.</b>\n                        <br></br> <br></br>\n                        An email has already been sent to the candidate asking him to choose interview slot!\n                    </DialogContent>\n                    ) : (\n                    <DialogContent>\n                        An email will be sent to the candidate asking him/her to choose a slot for the interview.\n                        <br></br> <br></br>\n                        Before pressing the \"Schedule Interview\" button, Please make sure employee has given slots for the Interview!\n                    </DialogContent>\n                    )}\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleScheduleInterview} disabled={props?.jobApplicationData?.is_technical_interview_two_mail_sent && true}>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            )}                             */}\n            {/* ====================================================================================================== */}\n\n            {TechnicalRoundData?.length > 0 ? (\n                <Dialog open={technicalScheduleInterviewOpen} onClose={() => setTechnicalScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Technical Round-2\n                    </Typography>\n                    <DialogContent>\n                        Interview has already been scheduled. Below are the interview details:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interviewer:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {TechnicalRoundData?.[0]?.employee_name} </b>\n                        <br></br>\n                        <b>Interview Date:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(TechnicalRoundData?.[0]?.start_date).toLocaleDateString()} </b>\n                        <br></br>\n                        <b>Interview Time:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(TechnicalRoundData?.[0]?.start_date).toLocaleTimeString().substring(0, 5)}\n                        </b> \n                            &nbsp; to &nbsp;\n                        <b style={{color: \"red\"}}>\n                            {new Date(TechnicalRoundData?.[0]?.end_date).toLocaleTimeString().substring(0, 5)}\n                        </b>\n                        <br></br><br></br>\n                        <b>Interview Link:</b> <a href={TechnicalRoundData?.[0]?.interview_moderator_link}>Click here to join</a>\n                    </DialogContent>\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            \n            ) : (\n            \n                <Dialog open={technicalScheduleInterviewOpen} onClose={() => setTechnicalScheduleInterviewOpen(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Schedule Interview for Technical Round-2\n                </Typography>\n\n                <DialogContent>\n                    <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <Stack spacing={3}>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <TextField\n                                fullWidth\n                                select\n                                label=\"Select Employee\"\n                                {...getFieldProps(\"employee\")}\n                                error={Boolean(touched.employee && errors.employee)}\n                                helperText={touched.employee && errors.employee}\n                                >\n                                {TechnologyWiseEmployee.map((employee) => (\n                                <MenuItem key={employee.id} value={employee.id}>{employee.user.first_name + \" \" + employee.user.last_name}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <TextField\n                                fullWidth\n                                label=\"Interview Start Datetime\"\n                                type=\"datetime-local\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                {...getFieldProps(\"startDate\")}\n                                error={Boolean(touched.startDate && errors.startDate)}\n                                helperText={touched.startDate && errors.startDate}\n                            >\n                            </TextField>   \n\n                            <TextField\n                                fullWidth\n                                label=\"Interview Duration (In Minutes)\"\n                                type=\"number\"\n                                {...getFieldProps(\"duration\")}\n                                error={Boolean(touched.duration && errors.duration)}\n                                helperText={touched.duration && errors.duration}\n                            >\n                            </TextField>   \n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }}>\n                        <LoadingButton\n                            fullWidth\n                            sx={{ mt: 3}}\n                            size=\"medium\"\n                            color=\"error\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                        >\n                            Schedule Interview\n                        </LoadingButton>\n                        </Stack>\n                        </Stack>\n                    </Form>\n                    </FormikProvider>\n                </DialogContent>\n\n            </Dialog>\n            )}\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-one/TechnicalRoundOneStatus.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/review-candidate/ReviewCandidateStatus.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-one/TechnicalRoundOneRecording.js",["1869","1870","1871"],"import axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Dialog, DialogContent, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nexport default function TechnicalRoundOneRecording(props) {\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Interview Recording State\n    const [technicalInterviewRecording, setTechnicalInterviewRecording] = useState(\"\")\n\n    // Open Technical Interview Recording\n    const [openTechnicalInterviewRecording, setOpenTechnicalInterviewRecording] = useState(false)\n\n    const [technicalInterviewRecordingNotes, setTechnicalInterviewRecordingNotes] = useState(\"\")\n\n    const TechnicalRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'TECHNICAL_ROUND_ONE'\n    })\n\n    const handleTechnicalInterviewRecording = () => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\"id\": TechnicalRoundData?.[0]?.id}\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/interview-recording/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            setTechnicalInterviewRecording(response.data.data)\n            setOpenTechnicalInterviewRecording(true)\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const handleTechnicalRoundOneRecordingNotes = event => {\n        const confirmed_interview_id = TechnicalRoundData?.[0].id\n\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\n            \"is_interview_completed\":  TechnicalRoundData?.[0].interview_status === \"COMPLETED\",\n            \"is_technical_interview_one_completed\":  TechnicalRoundData?.[0].interview_status === \"COMPLETED\",\n            \"interview_feedback\": TechnicalRoundData?.[0].interview_feedback,\n\n            \"interview_recording_notes\": technicalInterviewRecordingNotes\n        }\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Recording Notes Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // set initial values\n    useEffect(() => {\n        setTechnicalInterviewRecordingNotes(TechnicalRoundData?.[0]?.interview_recording_notes)\n    }, [\n        TechnicalRoundData?.[0]?.interview_recording_notes,\n    ])\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n                variant=\"contained\" \n                size=\"small\" \n                color=\"error\" \n                style={{width: \"150px\"}}\n                onClick={handleTechnicalInterviewRecording}\n                disabled={(props?.jobApplicationData?.is_hr_interview_completed!==true)}>\n                Interview Recording\n            </Button>\n\n            <Dialog fullWidth maxWidth=\"lg\" open={openTechnicalInterviewRecording} onClose={() => setOpenTechnicalInterviewRecording(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Technical Round-1 Interview Recording\n                </Typography>\n\n                {technicalInterviewRecording !== \"Not Available\" ? ( \n                <DialogContent>\n                <div>\n                    <table style={{width: \"100%\"}}>\n                        <tr>\n                            <td style={{width: \"70%\"}}>\n                            <iframe width=\"100%\" height=\"550\"\n                                src={technicalInterviewRecording}\n                            ></iframe>\n                            </td>\n                            <td style={{width: \"3%\"}}></td>\n                            <td>\n                            <TextField\n                                fullWidth\n                                label=\"Notes\"\n                                style={{ height: 500 }}\n                                multiline\n                                rows={19}\n                                maxRows={4}\n                                defaultValue={technicalInterviewRecordingNotes}\n                                onChange={(event) => setTechnicalInterviewRecordingNotes(event.target.value)}\n                            />\n                            <Button \n                                variant=\"contained\" \n                                size=\"medium\" \n                                color=\"error\"\n                                style={{left: \"35%\"}}\n                                onClick={handleTechnicalRoundOneRecordingNotes}\n                            >\n                                Submit Notes\n                            </Button>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n                </DialogContent>\n                ) : (\n                <DialogContent align=\"center\">\n                    <b>No Recordings Available! &nbsp; Please try again in sometime.</b>\n                </DialogContent>   \n                )}\n            </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/review-candidate/SendForReview.js",["1872"],"import axios from 'axios';\nimport * as Yup from \"yup\";\nimport {useSnackbar} from 'notistack';\nimport { LoadingButton } from \"@mui/lab\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { Button, Dialog, DialogContent, MenuItem, Stack, Typography, TextField } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nexport default function SendForReview(props) {\n    const { enqueueSnackbar} = useSnackbar();\n\n    // send for review dialog state\n    const [sendForReviewDialog, setSendForReviewDialog] = useState(false)\n\n    const [employeeData, setEmployeeData] = useState([])\n\n    const getEmployeeData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setEmployeeData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    const TechnologyWiseEmployee = employeeData.filter(item => {\n        return item.interview_tech.id === props?.jobApplicationData?.requisition?.tech_stack?.id\n    })\n\n    const SentForReview = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'REVIEW_CANDIDATE'\n    })\n\n\n    useEffect(() => {\n        getEmployeeData()\n    }, [])\n\n    const SelectEmployeeSchema = Yup.object().shape({\n        employee: Yup.string()\n          .required(\"Employee is required\"),\n        endDate: Yup.string()\n        .required(\"Employee is required\"),\n      });\n      const formik = useFormik({\n        initialValues: {\n            employee: '',\n            endDate: ''\n        },\n        validationSchema: SelectEmployeeSchema,\n        onSubmit: (formValues) => {\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            var startDatetime = new Date()\n            startDatetime.setHours(startDatetime.getHours()+5,startDatetime.getMinutes()+30,0,0)\n\n            const data = {\n                employee_id: formValues.employee,\n                candidate_id: props.jobApplicationData.resume.candidate.id,\n                job_application_id: props.jobApplicationData.id,\n                start_date: startDatetime.toISOString().slice(0, 19),\n                end_date: formValues.endDate,\n                intv_round: \"REVIEW_CANDIDATE\",\n                interview_status: \"CONFIRMED\"\n            }\n\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/confirmed-interviews/\", data, {headers})\n            .then(function (response) {\n                if (response.status === 200) {\n                    enqueueSnackbar(\"Application sent for review !!\", {\n                        anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                      },\n                        variant: 'success',\n                        autoHideDuration: 1500,\n                      });\n                      setSendForReviewDialog(false)\n                      window.location.reload(false);                    \n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n        }\n      });    \n\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n\n    return(\n        <Stack>\n            <Button \n            variant=\"contained\" \n            size=\"small\" \n            color=\"success\" \n            style={{width: \"150px\"}} \n            onClick={() => setSendForReviewDialog(true)}\n            disabled={props?.jobApplicationData?.is_hr_interview_completed!==true}\n            >Send For Review</Button>\n\n\n            {SentForReview?.length > 0 ? (\n            <Dialog open={sendForReviewDialog} onClose={() => setSendForReviewDialog(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Send for Technical Review\n                </Typography>\n\n                <DialogContent>\n                    Candidate details has already been sent to the technical person for review.\n                </DialogContent>\n\n                <DialogContent>\n                    <Stack spacing={3}>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <b>Employee: </b> &nbsp; {SentForReview[0]?.employee_name}\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <b>End Date: </b> &nbsp; {SentForReview[0]?.end_date?.substring(0, 10).split('-').reverse().join('/')}\n                        </Stack>\n                    </Stack>\n                </DialogContent>\n            </Dialog>\n\n            ) : (\n\n            <Dialog fullWidth open={sendForReviewDialog} onClose={() => setSendForReviewDialog(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Send for Technical Review\n                </Typography>\n\n                <DialogContent>\n                    <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <Stack spacing={3}>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <TextField\n                                fullWidth\n                                select\n                                label=\"Select Employee\"\n                                {...getFieldProps(\"employee\")}\n                                error={Boolean(touched.employee && errors.employee)}\n                                helperText={touched.employee && errors.employee}\n                                >\n                                {TechnologyWiseEmployee.map((employee) => (\n                                <MenuItem key={employee.id} value={employee.id}>{employee.user.first_name + \" \" + employee.user.last_name}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                        <TextField\n                            fullWidth\n                            label=\"Review End Date\"\n                            type=\"datetime-local\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            {...getFieldProps(\"endDate\")}\n                            error={Boolean(touched.endDate && errors.endDate)}\n                            helperText={touched.endDate && errors.endDate}\n                        >\n                        </TextField>   \n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }}>\n                        <LoadingButton\n                            fullWidth\n                            sx={{ mt: 3}}\n                            size=\"medium\"\n                            color=\"error\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                        >\n                            Send\n                        </LoadingButton>\n                        </Stack>\n                        </Stack>\n                    </Form>\n                    </FormikProvider>\n                </DialogContent>\n\n            </Dialog>                \n            )}\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/review-candidate/ReviewFeedback.js",["1873","1874","1875","1876","1877","1878","1879","1880"],"import React, { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Button, Checkbox, Dialog, DialogContent, Rating, Stack, Table, TableContainer, TableRow, TableHead, TableBody, TableCell, Typography, TextField } from '@mui/material';\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nexport default function ReviewFeedback(props) {\n\n    const confirmedInterviewData = props.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'REVIEW_CANDIDATE'\n    })\n\n    // technical review feedback dialog state\n    const [technicalReviewFeedbackDialog, setTechnicalReviewFeedbackDialog] = useState(false)\n    \n    // Mark Technical Review as Completed flag state\n    const [technicalReviewChecked, setTechnicalReviewChecked] = React.useState();\n\n    const handleTechnicalReviewCheckedChange = event =>{\n        setTechnicalReviewChecked(event.target.checked);\n    };\n\n    const [technicalReviewResult, setTechnicalReviewResult] = useState()\n\n    useEffect(() => {\n        setTechnicalReviewChecked(confirmedInterviewData?.[0]?.interview_status === \"COMPLETED\")\n        setTechnicalReviewResult(confirmedInterviewData?.[0]?.interview_feedback)\n    }, [\n        confirmedInterviewData?.[0]?.interview_status === \"COMPLETED\",\n        confirmedInterviewData?.[0]?.interview_feedback\n    ])\n    return(\n        <Stack>\n            <Button \n            variant=\"contained\" \n            size=\"small\" \n            color=\"success\" \n            style={{width: \"150px\"}} \n            onClick={() => setTechnicalReviewFeedbackDialog(true)}\n            disabled={props?.jobApplicationData?.is_hr_interview_completed!==true}\n            >Review Feedback</Button>\n\n            <Dialog open={technicalReviewFeedbackDialog} onClose={() => setTechnicalReviewFeedbackDialog(false)}>\n            <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                Technical Review Result\n            </Typography>\n            {/* <DialogContent>\n                Mark Technical Review as Completed:\n                <Checkbox checked={technicalReviewChecked} onChange={handleTechnicalReviewCheckedChange} required/>\n            </DialogContent>\n            <DialogContent>\n                Please give interview result below:\n            </DialogContent>\n            <DialogContent>\n            <TextField\n                fullWidth\n                label=\"Result\"\n                style={{ width: 500 }}\n                multiline\n                rows={6}\n                defaultValue={technicalReviewResult}\n                onChange={(event) => setTechnicalReviewResult(event.target.value)}\n            />\n            </DialogContent> */}\n            <DialogContent>\n            <TableContainer>\n                        <Table>\n                            <TableHead>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                            </TableHead>\n                            <TableBody>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Strong Areas:</b></TableCell>\n                                    <TableCell>{confirmedInterviewData?.[0]?.candidate_strong_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Weak Areas:</b></TableCell>\n                                    <TableCell>{confirmedInterviewData?.[0]?.candidate_weak_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Skills Rating:</b></TableCell>\n                                    <TableCell>\n                                        {confirmedInterviewData?.[0]?.skills_rating.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>\n                                            <Rating\n                                                name=\"hover-feedback\"\n                                                value={item.rating}\n                                                readOnly\n                                            />\n                                            </TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Training Areas:</b></TableCell>\n                                    <TableCell>\n                                        {confirmedInterviewData?.[0]?.training_areas.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>{item.duration}</TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for BU:</b></TableCell>\n                                    <TableCell>{confirmedInterviewData?.[0]?.fit_bu}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Project:</b></TableCell>\n                                    <TableCell>{confirmedInterviewData?.[0]?.fit_project}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Level:</b></TableCell>\n                                    <TableCell>{confirmedInterviewData?.[0]?.fit_level}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Interview Feedback:</b></TableCell>\n                                    <TableCell>{confirmedInterviewData?.[0]?.interview_feedback}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Interview Round Result:</b></TableCell>\n                                    <TableCell>\n                                    {confirmedInterviewData?.[0]?.candidate_eligibility ? <b style={{color:\"green\"}}>Selected</b> : <b style={{color:\"red\"}}>Rejected</b>}\n                                    </TableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n            </DialogContent>\n        </Dialog>\n    </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/initial-hr-call/InitialRoundStatus.js",["1881","1882","1883","1884","1885","1886","1887","1888","1889","1890","1891","1892","1893"],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, CardContent, Checkbox, Container, Dialog, DialogContent, DialogActions, Stack, Typography, TextField } from '@mui/material';\n\nexport default function InitialRoundStatus() {\n    return(\n        <div>\n        <br></br>\n        <b>Status:</b>&nbsp;<b style={{color: \"red\"}}>Pending</b>\n        </div>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/initial-hr-call/InitialRoundCallRecording.js",["1894","1895","1896","1897","1898","1899","1900","1901","1902","1903","1904","1905"],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, CardContent, Checkbox, Container, Dialog, DialogContent, DialogActions, Stack, Typography, TextField } from '@mui/material';\n\nexport default function InitialRoundCallRecording() {\n    return(\n        <Button variant=\"contained\" size=\"small\" color=\"error\">Call Recording</Button>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/initial-hr-call/InitialRoundFeedback.js",["1906","1907","1908","1909","1910"],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, CardContent, Checkbox, Container, Dialog, DialogContent, DialogActions, Stack, Typography, TextField } from '@mui/material';\n\nexport default function InitialRoundFeedback() {\n\n    // Initial call feedback dialog state\n    const [initialRoundFeedbackDialog, setInitialRoundFeedbackDialog] = useState(false)\n\n    // Is candidate elible for subsequent rounds state\n    const [isCandidateElible, setIsCandidateElible] = React.useState(\"\");\n    \n    const handleCandidateEliblilityCheckedChange = event =>{\n        setIsCandidateElible(event.target.checked);\n    };\n\n    // Initial round feedback notes state\n    const [initialRoundFeedbackNotes, setInitialRoundFeedbackNotes] = useState(\"\")\n\n    const handleInitialRoundResult = (event) => {\n\n    }\n\n    return(\n        <Stack>\n            <Button variant=\"contained\" size=\"small\" color=\"error\" onClick={() => setInitialRoundFeedbackDialog(true)}>Initial Call Feedback</Button>\n\n            <Dialog open={initialRoundFeedbackDialog} onClose={() => setInitialRoundFeedbackDialog(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Initial Round Feedback\n                </Typography>\n\n                <DialogContent align=\"center\">\n                    Is candidate eligible for the subsequent rounds ? :\n                    <Checkbox checked={isCandidateElible} onChange={handleCandidateEliblilityCheckedChange} required/>\n                </DialogContent>\n\n                <DialogContent align=\"center\">\n                    <TextField\n                        fullWidth\n                        label=\"Feedback\"\n                        style={{ height: 500, width: 500 }}\n                        multiline\n                        rows={19}\n                        defaultValue={initialRoundFeedbackNotes}\n                        onChange={(event) => setInitialRoundFeedbackNotes(event.target.value)}\n                    />\n                    <Button \n                        variant=\"contained\" \n                        size=\"medium\" \n                        color=\"error\"\n                        onClick={handleInitialRoundResult}\n                    >\n                        Submit Feedback\n                    </Button>\n                </DialogContent>\n\n            </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/initial-hr-call/InitialRoundCandidateForm.js",["1911","1912","1913","1914","1915","1916","1917","1918","1919","1920","1921","1922"],"import React, { useState, useEffect } from 'react';\nimport { Button, Card, CardContent, Checkbox, Container, Dialog, DialogContent, DialogActions, Stack, Typography, TextField } from '@mui/material';\n\nexport default function InitialRoundCandidateForm() {\n    return(\n        <Button variant=\"contained\" size=\"small\" color=\"error\">Candidate Form</Button>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/screening-round/ScreeningRoundStatus.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/screening-round/ScreeningRoundRecording.js",["1923","1924","1925","1926"],"import axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Dialog, DialogContent, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nexport default function ScreeningRoundRecording(props) {\n    const { enqueueSnackbar} = useSnackbar();\n    \n    // Open HR Interview Recording\n    const [openHrInterviewRecording, setOpenHrInterviewRecording] = useState(false)\n\n    // HR Interview Recording State\n    const [hrInterviewRecording, setHrInterviewRecording] = useState(\"\")\n    \n    const HrRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'SCREENING_ROUND'\n    })\n\n    const [hrInterviewRecordingNotes, setHrInterviewRecordingNotes] = useState(\"\")\n\n    const handleHrInterviewRecording = () => {\n        setOpenHrInterviewRecording(true)\n\n        if (props?.jobApplicationData?.resume?.candidate?.source?.source === 'HRPORTAL') {\n            setHrInterviewRecording(props?.jobApplicationData?.resume?.candidate?.initial_recording)\n        }\n        else {\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`,\n            }\n\n            const data = {\"id\": HrRoundData?.[0]?.id}\n\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/interview-recording/', data, {headers})\n            .then(function (response) {\n                if (response.status === 200) {\n                    setHrInterviewRecording(response.data.data)\n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n        }\n    }\n\n    const handleHrRoundResult = event => {\n        const confirmed_interview_id = props?.jobApplicationData?.interview_details?.[0]?.id\n\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\n            \"is_interview_completed\": HrRoundData?.[0].interview_status === \"COMPLETED\",\n            \"is_hr_interview_completed\": HrRoundData?.[0].interview_status === \"COMPLETED\",\n            \"interview_feedback\": HrRoundData?.[0].interview_feedback, \n\n            \"interview_recording_notes\": hrInterviewRecordingNotes\n        }\n\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // set initial values\n    useEffect(() => {\n        setHrInterviewRecordingNotes(HrRoundData?.[0]?.interview_recording_notes)\n    }, [\n        HrRoundData?.[0]?.interview_recording_notes,\n    ])\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n                variant=\"contained\" \n                size=\"small\" \n                color=\"error\"\n                style={{width: \"150px\"}}\n                // disabled={props?.jobApplicationData?.is_hr_interview_mail_sent!=true || HrRoundData?.length === 0}\n                disabled={HrRoundData?.length === 0}\n                onClick={handleHrInterviewRecording}\n                >\n                    Interview Recording\n            </Button>\n\n            <Dialog fullWidth maxWidth=\"lg\" open={openHrInterviewRecording} onClose={() => setOpenHrInterviewRecording(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Screening Round Interview Recording\n                </Typography>\n\n                {hrInterviewRecording !== \"Not Available\" ? ( \n                <DialogContent>\n                <div>\n                    <table style={{width: \"100%\"}}>\n                        <tr>\n                            <td style={{width: \"70%\"}}>\n                            <iframe width=\"100%\" height=\"550\"\n                                src={hrInterviewRecording}\n                            ></iframe>\n                            </td>\n                            <td style={{width: \"3%\"}}></td>\n\n                            {/* if candidate came from portal then only show the recording notes textfield */}\n\n                            {props?.jobApplicationData?.resume?.candidate?.source?.source != 'HRPORTAL' &&\n                            <td>\n                                <TextField\n                                    fullWidth\n                                    label=\"Notes\"\n                                    style={{ height: 500 }}\n                                    multiline\n                                    rows={19}\n                                    maxRows={4}\n                                    defaultValue={hrInterviewRecordingNotes}\n                                    onChange={(event) => setHrInterviewRecordingNotes(event.target.value)}\n                                />\n                                <Button \n                                    variant=\"contained\" \n                                    size=\"medium\" \n                                    color=\"error\"\n                                    style={{left: \"35%\"}}\n                                    onClick={handleHrRoundResult}\n                                >\n                                    Submit Notes\n                                </Button>\n                            </td>\n                            }\n                        </tr>\n                    </table>\n                </div>\n                </DialogContent>\n                ) : (\n                <DialogContent align=\"center\">\n                    <b>No Recordings Available! &nbsp; Please try again in sometime.</b>\n                </DialogContent>   \n                )}\n            </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/screening-round/ScreeningRoundResult.js",["1927","1928","1929"],"import axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Checkbox, Dialog, DialogContent, DialogActions, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nexport default function ScreeningRoundResult (props) {\n    const { enqueueSnackbar} = useSnackbar();\n\n    // HR Schedule Interview Result Dialog\n    const [hrScheduleInterviewResultOpen, setHrScheduleInterviewResultOpen] = useState(false)\n\n    // Mark HR Interview as Completed flag state\n    const [hrInterviewChecked, setHrInterviewChecked] = React.useState();\n\n    const handleHrInterviewCheckedChange = event =>{\n        setHrInterviewChecked(event.target.checked);\n    };\n\n    const HrRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'SCREENING_ROUND'\n    })\n\n    const [hrRoundResult, setHrRoundResult] = useState(\"\")\n\n    const handleHrRoundResult = event => {\n        const confirmed_interview_id = props?.jobApplicationData?.interview_details?.[0]?.id\n\n        setHrScheduleInterviewResultOpen(false)\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n        const data = {\n            \"is_interview_completed\": hrInterviewChecked,\n            \"is_hr_interview_completed\": hrInterviewChecked,\n            \"interview_feedback\": hrRoundResult, \n\n            \"interview_recording_notes\":  HrRoundData?.[0]?.interview_recording_notes\n        }\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // set initial values\n    useEffect(() => {\n        setHrInterviewChecked(HrRoundData?.[0]?.interview_status === \"COMPLETED\")\n        setHrRoundResult(HrRoundData?.[0]?.interview_feedback)\n    }, [\n        HrRoundData?.[0]?.interview_status === \"COMPLETED\", \n        HrRoundData?.[0]?.interview_feedback,\n    ])\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button variant=\"contained\"\n                size=\"small\"\n                color=\"error\"\n                style={{width: \"150px\"}}\n                onClick={() => setHrScheduleInterviewResultOpen(true)}\n                // disabled={props?.jobApplicationData?.resume?.candidate?.source?.source === 'HRPORTAL' || props?.jobApplicationData?.is_hr_interview_mail_sent!=true || HrRoundData?.length === 0}\n                disabled={props?.jobApplicationData?.resume?.candidate?.source?.source === 'HRPORTAL' || HrRoundData?.length === 0}\n                >\n                    Interview Result\n            </Button>\n                <Dialog open={hrScheduleInterviewResultOpen} onClose={() => setHrScheduleInterviewResultOpen(false)}>\n                        <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                            Screening Round Result\n                        </Typography>\n                        <DialogContent>\n                            Is candidate selected for the next round ?\n                            <Checkbox checked={hrInterviewChecked} onChange={handleHrInterviewCheckedChange} required/>\n                            {hrInterviewChecked ? <b style={{color:\"green\"}}>Selected</b> : <b style={{color:\"red\"}}>Rejected</b>}\n                        </DialogContent>\n                        <DialogContent>\n                            Please give interview result below:\n                        </DialogContent>\n                        <DialogContent>\n                        <TextField\n                            fullWidth\n                            label=\"Result\"\n                            style={{ width: 500 }}\n                            multiline\n                            rows={6}\n                            maxRows={4}\n                            defaultValue={hrRoundResult}\n                            onChange={(event) => setHrRoundResult(event.target.value)}\n                        />\n                        </DialogContent>\n                        <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                            <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleHrRoundResult}>Submit</Button>\n                        </DialogActions>\n                </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-one/TechnicalRoundOneResult.js",["1930","1931","1932","1933","1934","1935","1936","1937"],"import axios from 'axios';\nimport {useSnackbar} from 'notistack';\nimport { styled } from '@mui/material/styles';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Checkbox, Dialog, DialogActions, DialogContent, Rating, Stack, Table, TableContainer, TableRow, TableHead, TextField, TableBody, TableCell, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nexport default function TechnicalRoundOneResult(props) {\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Schedule Interview Result Dialog\n    const [technicalScheduleInterviewResultOpen, setTechnicalScheduleInterviewResultOpen] = useState(false)\n\n    // Mark Technical Interview as Completed flag state\n    const [technicalInterviewChecked, setTechnicalInterviewChecked] = React.useState();\n\n    const handleTechnicalInterviewCheckedChange = event =>{\n        setTechnicalInterviewChecked(event.target.checked);\n    };\n\n    const [technicalRoundResult, setTechnicalRoundResult] = useState(\"\")\n\n    const TechnicalRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'TECHNICAL_ROUND_ONE'\n    })\n\n    const handleTechnicalRoundOneResult = event => {\n        const confirmed_interview_id = TechnicalRoundData?.[0].id\n\n        setTechnicalScheduleInterviewResultOpen(false)\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n          }\n\n        const data = {\n            \"is_interview_completed\": technicalInterviewChecked,\n            \"is_technical_interview_one_completed\": technicalInterviewChecked,\n            \"interview_feedback\": technicalRoundResult, \n\n            \"interview_recording_notes\": TechnicalRoundData?.[0].interview_recording_notes\n        }\n\n        axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/confirmed-interviews/' + confirmed_interview_id + '/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Interview Result Submitted Successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    // set initial values\n    useEffect(() => {\n        setTechnicalInterviewChecked(TechnicalRoundData?.[0]?.interview_status === \"COMPLETED\")\n        setTechnicalRoundResult(TechnicalRoundData?.[0]?.interview_feedback)\n    }, [\n        TechnicalRoundData?.[0]?.interview_status === \"COMPLETED\", \n        TechnicalRoundData?.[0]?.interview_feedback,\n    ])\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n            variant=\"contained\" \n            size=\"small\" color=\"error\" \n            style={{width: \"150px\"}}\n            onClick={() => setTechnicalScheduleInterviewResultOpen(true)}\n            disabled={props?.jobApplicationData?.is_hr_interview_completed!==true}\n            >Interview Result</Button>\n\n            <Dialog open={technicalScheduleInterviewResultOpen} onClose={() => setTechnicalScheduleInterviewResultOpen(false)} maxWidth=\"md\">\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Technical Round-1 Result\n                </Typography>\n                <DialogContent>\n                    <TableContainer>\n                        <Table>\n                            <TableHead>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                            </TableHead>\n                            <TableBody>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Strong Areas:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.candidate_strong_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Candidate's Weak Areas:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.candidate_weak_areas}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Skills Rating:</b></TableCell>\n                                    <TableCell>\n                                        {TechnicalRoundData?.[0]?.skills_rating.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>\n                                            <Rating\n                                                name=\"hover-feedback\"\n                                                value={item.rating}\n                                                readOnly\n                                            />\n                                            </TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Training Areas:</b></TableCell>\n                                    <TableCell>\n                                        {TechnicalRoundData?.[0]?.training_areas.map(item => \n                                        <TableRow>\n                                            <TableCell padding=\"none\">{item.skill}:</TableCell>\n                                            <TableCell>{item.duration}</TableCell>\n                                        </TableRow>\n                                        )}\n                                    </TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for BU:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.fit_bu}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Project:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.fit_project}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Fit for Level:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.fit_level}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Interview Feedback:</b></TableCell>\n                                    <TableCell>{TechnicalRoundData?.[0]?.interview_feedback}</TableCell>\n                                </StyledTableRow>\n                                <StyledTableRow>\n                                    <TableCell><b>Is candidate selected?:</b></TableCell>\n                                    <TableCell>\n                                    {TechnicalRoundData?.[0]?.candidate_eligibility ? <b style={{color:\"green\"}}>Selected</b> : <b style={{color:\"red\"}}>Rejected</b>}\n                                    </TableCell>\n                                </StyledTableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </DialogContent>\n            </Dialog>\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/technical-round-one/ScheduleTechnicalRoundOne.js",["1938"],"import axios from 'axios';\nimport * as Yup from \"yup\";\nimport {useSnackbar} from 'notistack';\nimport { LoadingButton } from \"@mui/lab\";\nimport React, { useState, useEffect } from 'react';\nimport {useParams} from 'react-router-dom';\nimport { Button, Dialog, DialogContent, DialogActions, MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\nimport { Form, FormikProvider, useFormik } from \"formik\";\n\nexport default function ScheduleTechnicalRoundOne(props) {\n    const { id } = useParams();\n\n    const { enqueueSnackbar} = useSnackbar();\n\n    // Technical Schedule Interview Dialog\n    const [technicalScheduleInterviewOpen, setTechnicalScheduleInterviewOpen] = useState(false)\n\n    const TechnicalRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'TECHNICAL_ROUND_ONE'\n    })\n\n    const [employeeData, setEmployeeData] = useState([])\n\n    const getEmployeeData = () => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setEmployeeData(response.data.data)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n      };\n\n    const TechnologyWiseEmployee = employeeData.filter(item => {\n        return item.interview_tech.id === props?.jobApplicationData?.requisition?.tech_stack?.id\n    })\n\n    useEffect(() => {\n        getEmployeeData()\n    }, [])\n\n    const handleScheduleInterview = event => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\"job_application_id\": id, \"interview_round\": \"Technical Round-1\"}\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/send-interview-slot-mail/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Mail has been sent to the candidate successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const SelectEmployeeSchema = Yup.object().shape({\n        employee: Yup.string()\n          .required(\"Employee is required\"),\n        startDate: Yup.string()\n        .required(\"Interview start datetime is required\"),\n        duration: Yup.string()\n        .required(\"Interview duration is required\"),\n      });\n      const formik = useFormik({\n        initialValues: {\n            employee: '',\n            startDate: '',\n            duration: 60\n        },\n        validationSchema: SelectEmployeeSchema,\n        onSubmit: (formValues) => {\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            // Add meeting duration minuts and 5.30 Hrs to convert in Indian time\n            var endDatetime = new Date(formValues.startDate)\n            endDatetime.setHours(endDatetime.getHours()+5,endDatetime.getMinutes()+30+formValues.duration,0,0)\n\n            const data = {\n                employee_id: formValues.employee,\n                candidate_id: props.jobApplicationData.resume.candidate.id,\n                job_application_id: props.jobApplicationData.id,\n                start_date: formValues.startDate,\n                end_date: endDatetime.toISOString().slice(0, 19),\n                intv_round: \"TECHNICAL_ROUND_ONE\",\n                interview_status: \"CONFIRMED\"\n            }\n\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/confirmed-interviews/\", data, {headers})\n            .then(function (response) {\n                if (response.status === 200) {\n                    enqueueSnackbar(\"Interview has been scheduled !!\", {\n                        anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                      },\n                        variant: 'success',\n                        autoHideDuration: 1500,\n                      });\n                      setTechnicalScheduleInterviewOpen(false)\n                      window.location.reload(false);                    \n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n        }\n      });    \n\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button \n                variant=\"contained\" \n                size=\"small\" color=\"error\" \n                style={{width: \"150px\"}}\n                onClick={() => setTechnicalScheduleInterviewOpen(true)}\n                disabled={props?.jobApplicationData?.is_hr_interview_completed!==true}\n                >\n                Schedule Interview\n            </Button>\n\n            {/* ====================================================================================================== */}\n            {/* -------------------- Technical Schedule Interview Dialog -------------------- */}\n            {/* {TechnicalRoundData?.length > 0 ? (\n                <Dialog open={technicalScheduleInterviewOpen} onClose={() => setTechnicalScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Technical Round\n                    </Typography>\n                    <DialogContent>\n                        Interview has already been scheduled. Below are the interview details:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interview Date:</b> <b style={{color: \"red\"}}>{TechnicalRoundData?.[0]?.start_date.substring(0, 10)}</b>\n                        <br></br>\n                        <b>Interview Time:</b> <b style={{color: \"red\"}}>{TechnicalRoundData?.[0]?.start_date.substring(11, 16)}</b> to <b style={{color: \"red\"}}>{TechnicalRoundData?.[0]?.end_date.substring(11, 16)}</b>\n                        <br></br><br></br>\n                        <b>Interview Link:</b> <a href={TechnicalRoundData?.[0]?.interview_moderator_link}>Click here to join</a>\n                    </DialogContent>\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            ) : (\n                <Dialog open={technicalScheduleInterviewOpen} onClose={() => setTechnicalScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Technical Round\n                    </Typography>\n                    {props?.jobApplicationData?.is_technical_interview_one_mail_sent ? (\n                    <DialogContent>\n                        <b>Awaiting for candidate's response.</b>\n                        <br></br> <br></br>\n                        An email has already been sent to the candidate asking him to choose interview slot!\n                    </DialogContent>\n                    ) : (\n                    <DialogContent>\n                        An email will be sent to the candidate asking him/her to choose a slot for the interview.\n                        <br></br> <br></br>\n                        Before pressing the \"Schedule Interview\" button, Please make sure employee has given slots for the Interview!\n                    </DialogContent>\n                    )}\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleScheduleInterview} disabled={props?.jobApplicationData?.is_technical_interview_one_mail_sent && true}>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            )}                             */}\n            {/* =================================================================================================== */}\n\n            {TechnicalRoundData?.length > 0 ? (\n                <Dialog open={technicalScheduleInterviewOpen} onClose={() => setTechnicalScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Technical Round-1\n                    </Typography>\n                    <DialogContent>\n                        Interview has already been scheduled. Below are the interview details:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interviewer:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {TechnicalRoundData?.[0]?.employee_name} </b>\n                        <br></br>\n                        <b>Interview Date:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(TechnicalRoundData?.[0]?.start_date).toLocaleDateString()} </b>\n                        <br></br>\n                        <b>Interview Time:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(TechnicalRoundData?.[0]?.start_date).toLocaleTimeString().substring(0, 5)}\n                        </b> \n                            &nbsp; to &nbsp;\n                        <b style={{color: \"red\"}}>\n                            {new Date(TechnicalRoundData?.[0]?.end_date).toLocaleTimeString().substring(0, 5)}\n                        </b>\n                        <br></br><br></br>\n                        <b>Interview Link:</b> <a href={TechnicalRoundData?.[0]?.interview_moderator_link}>Click here to join</a>\n                    </DialogContent>\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            \n            ) : (\n            \n                <Dialog open={technicalScheduleInterviewOpen} onClose={() => setTechnicalScheduleInterviewOpen(false)}>\n                <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                    Schedule Interview for Technical Round-1\n                </Typography>\n\n                <DialogContent>\n                    <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <Stack spacing={3}>\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <TextField\n                                fullWidth\n                                select\n                                label=\"Select Employee\"\n                                {...getFieldProps(\"employee\")}\n                                error={Boolean(touched.employee && errors.employee)}\n                                helperText={touched.employee && errors.employee}\n                                >\n                                {TechnologyWiseEmployee.map((employee) => (\n                                <MenuItem key={employee.id} value={employee.id}>{employee.user.first_name + \" \" + employee.user.last_name}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                            <TextField\n                                fullWidth\n                                label=\"Interview Start Datetime\"\n                                type=\"datetime-local\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                {...getFieldProps(\"startDate\")}\n                                error={Boolean(touched.startDate && errors.startDate)}\n                                helperText={touched.startDate && errors.startDate}\n                            >\n                            </TextField>   \n\n                            <TextField\n                                fullWidth\n                                label=\"Interview Duration (In Minutes)\"\n                                type=\"number\"\n                                {...getFieldProps(\"duration\")}\n                                error={Boolean(touched.duration && errors.duration)}\n                                helperText={touched.duration && errors.duration}\n                            >\n                            </TextField>   \n                        </Stack>\n\n                        <Stack direction={{ xs: \"column\", sm: \"row\" }}>\n                        <LoadingButton\n                            fullWidth\n                            sx={{ mt: 3}}\n                            size=\"medium\"\n                            color=\"error\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                        >\n                            Schedule Interview\n                        </LoadingButton>\n                        </Stack>\n                        </Stack>\n                    </Form>\n                    </FormikProvider>\n                </DialogContent>\n\n            </Dialog>\n            )}    \n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/candidate-timeline/screening-round/ScheduleScreeningRound.js",["1939","1940","1941"],"import axios from 'axios';\nimport * as Yup from \"yup\";\nimport {useSnackbar} from 'notistack';\nimport { LoadingButton } from \"@mui/lab\";\nimport React, { useState, useEffect } from 'react';\nimport {useParams} from 'react-router-dom';\nimport { Button, Dialog, DialogContent, DialogActions, MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport * as constants from 'src/utils/constants';\nimport { Form, FormikProvider, useFormik } from \"formik\";\n\nexport default function ScheduleScreeningRound(props) {\n    const { id } = useParams();\n\n    const { enqueueSnackbar} = useSnackbar();\n\n    // HR Schedule Interview Dialog\n    const [hrScheduleInterviewOpen, setHrScheduleInterviewOpen] = useState(false)\n\n    const HrRoundData = props?.jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'SCREENING_ROUND'\n    })\n\n    const [employeeData, setEmployeeData] = useState([])\n\n    const getEmployeeData = (data) => {\n        axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/employee', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n        .then((response) => {\n            setEmployeeData(response.data.data)\n\n            let defaultEmployee = response.data.data.filter(item => {\n                return item.user.pk === data\n            })\n            handleChange(\"employee\")(`${defaultEmployee[0].id}`)\n        })\n        .catch((e) => console.log('something went wrong :(', e));\n    };\n\n    const TechnologyWiseEmployee = employeeData.filter(item => {\n        return item.interview_tech.id === props?.jobApplicationData?.requisition?.tech_stack?.id\n    })\n\n    useEffect(() => {\n        getEmployeeData(props?.jobApplicationData?.drm_user?.user?.pk)\n    }, [props?.jobApplicationData?.drm_user?.user?.pk])\n\n    const handleScheduleInterview = event => {\n        const headers = {\n            'Authorization': `Token ${localStorage.getItem('authToken')}`,\n        }\n\n        const data = {\"job_application_id\": id}\n\n        axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/send-interview-slot-mail/', data, {headers})\n        .then(function (response) {\n          if (response.status === 200) {\n            enqueueSnackbar(\"Mail has been sent to the candidate successfully !!\", {\n              anchorOrigin: {\n                              vertical: 'top',\n                              horizontal: 'right',\n                            },\n              variant: 'success',\n              autoHideDuration: 1500,\n            });\n            window.location.reload(false);\n          }\n        })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n    }\n\n    const ScheduleScreeningRoundSchema = Yup.object().shape({\n        employee: Yup.string()\n          .required(\"Employee is required\"),\n        startDate: Yup.string()\n        .required(\"Interview start datetime is required\"),\n        duration: Yup.string()\n        .required(\"Interview duration is required\"),\n      });\n      const formik = useFormik({\n        initialValues: {\n            employee: '',\n            startDate: '',\n            duration: 60\n        },\n        validationSchema: ScheduleScreeningRoundSchema,\n        onSubmit: (formValues) => {\n            const headers = {\n                'Authorization': `Token ${localStorage.getItem('authToken')}`\n            }\n\n            // Add meeting duration minuts and 5.30 Hrs to convert in Indian time\n            var endDatetime = new Date(formValues.startDate)\n            endDatetime.setHours(endDatetime.getHours()+5,endDatetime.getMinutes()+30+formValues.duration,0,0)\n\n            const data = {\n                employee_id: formValues.employee,\n                candidate_id: props.jobApplicationData.resume.candidate.id,\n                job_application_id: props.jobApplicationData.id,\n                start_date: formValues.startDate,\n                end_date: endDatetime.toISOString().slice(0, 19),\n                intv_round: \"SCREENING_ROUND\",\n                interview_status: \"CONFIRMED\"\n            }\n\n            axios.post(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/confirmed-interviews/\", data, {headers})\n            .then(function (response) {\n                if (response.status === 200) {\n                    enqueueSnackbar(\"Interview has been scheduled !!\", {\n                        anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'right',\n                                      },\n                        variant: 'success',\n                        autoHideDuration: 1500,\n                      });\n                      setHrScheduleInterviewOpen(false)\n                      window.location.reload(false);                    \n                }\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n        }\n    });  \n\n    const { errors, touched, handleChange, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n    return (\n        <Stack direction={{ xs: \"column\", sm: \"row\" }} justifyContent=\"right\">\n            <Button variant=\"contained\"\n                size=\"small\"\n                color=\"error\"\n                style={{width: \"150px\"}}\n                onClick={() => setHrScheduleInterviewOpen(true)}\n                disabled={props?.jobApplicationData?.resume?.candidate?.source?.source === 'HRPORTAL'}\n            >\n                Schedule Interview\n            </Button>\n            \n            {/* ============================================================================================================== */}\n            {/* -------------------- HR Schedule Interview Dialog -------------------- */}\n            {/* {HrRoundData?.length > 0 ? (\n                props?.jobApplicationData?.is_hr_interview_completed ? (\n                <Dialog fullWidth open={hrScheduleInterviewOpen} onClose={() => setHrScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for HR Round\n                    </Typography>\n                    <DialogContent>\n                        Interview has been completed on:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interview Date:</b> <b style={{color: \"red\"}}>{HrRoundData[0]?.start_date.substring(0, 10)?.split('-').reverse().join('/')}</b>\n                        <br></br>\n                        <b>Interview Time:</b> <b style={{color: \"red\"}}>{HrRoundData[0]?.start_date.substring(11, 16)}</b> to <b style={{color: \"red\"}}>{props?.jobApplicationData?.interview_details[0]?.end_date.substring(11, 16)}</b>\n                    </DialogContent>\n                </Dialog>\n                ) : (\n                <Dialog open={hrScheduleInterviewOpen} onClose={() => setHrScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for HR Round\n                    </Typography>\n                    <DialogContent>\n                        Interview has already been scheduled. Below are the interview details:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interview Date:</b> <b style={{color: \"red\"}}>{props?.jobApplicationData?.interview_details[0]?.start_date.substring(0, 10)}</b>\n                        <br></br>\n                        <b>Interview Time:</b> <b style={{color: \"red\"}}>{props?.jobApplicationData?.interview_details[0]?.start_date.substring(11, 16)}</b> to <b style={{color: \"red\"}}>{props?.jobApplicationData?.interview_details[0]?.end_date.substring(11, 16)}</b>\n                        <br></br><br></br>\n                        <b>Interview Link:</b> <a href={props?.jobApplicationData?.interview_details[0]?.interview_moderator_link}>Click here to join</a>\n                    </DialogContent>\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            )) : (\n                <Dialog open={hrScheduleInterviewOpen} onClose={() => setHrScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for HR Round\n                    </Typography>\n                    {props?.jobApplicationData?.is_hr_interview_mail_sent ? (\n                    <DialogContent>\n                        <b>Awaiting for candidate's response.</b>\n                        <br></br> <br></br>\n                        An email has already been sent to the candidate asking him to choose interview slot!\n                    </DialogContent>\n                    ) : (\n                    <DialogContent>\n                        An email will be sent to the candidate asking him/her to choose a slot for the interview.\n                        <br></br> <br></br>\n                        Before pressing the \"Schedule Interview\" button, Please make sure you have given slots for the Interview!\n                    </DialogContent>\n                    )}\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleScheduleInterview} disabled={props?.jobApplicationData?.is_hr_interview_mail_sent && true}>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            )} */}\n            {/* =========================================================================================================== */}\n\n            {HrRoundData?.length > 0 ? (\n                props?.jobApplicationData?.is_hr_interview_completed ? (\n                <Dialog fullWidth open={hrScheduleInterviewOpen} onClose={() => setHrScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Screening Round\n                    </Typography>\n                    <DialogContent>\n                        Interview has been completed on:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interview Date:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(HrRoundData?.[0]?.start_date).toLocaleDateString()} </b>\n                        <br></br>\n                        <b>Interview Time:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(HrRoundData?.[0]?.start_date).toLocaleTimeString().substring(0, 5)}\n                        </b> \n                            &nbsp; to &nbsp;\n                        <b style={{color: \"red\"}}>\n                            {new Date(HrRoundData?.[0]?.end_date).toLocaleTimeString().substring(0, 5)}\n                        </b>\n                        <br></br><br></br>\n                        <b>Interviewer:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {HrRoundData?.[0]?.employee_name} </b>\n                        <br></br>\n                    </DialogContent>\n                </Dialog>\n                ) : (\n                <Dialog open={hrScheduleInterviewOpen} onClose={() => setHrScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Screening Round\n                    </Typography>\n                    <DialogContent>\n                        Interview has already been scheduled. Below are the interview details:\n                    </DialogContent>\n                    <DialogContent>\n                        <b>Interviewer:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {HrRoundData?.[0]?.employee_name} </b>\n                        <br></br>\n                        <b>Interview Date:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(HrRoundData?.[0]?.start_date).toLocaleDateString()} </b>\n                        <br></br>\n                        <b>Interview Time:</b>&nbsp; <b style={{color: \"red\"}}>\n                            {new Date(HrRoundData?.[0]?.start_date).toLocaleTimeString().substring(0, 5)}\n                        </b> \n                            &nbsp; to &nbsp;\n                        <b style={{color: \"red\"}}>\n                            {new Date(HrRoundData?.[0]?.end_date).toLocaleTimeString().substring(0, 5)}\n                        </b>\n                        <br></br><br></br>\n                        <b>Interview Link:</b> <a href={HrRoundData?.[0]?.interview_moderator_link} target=\"_blank\">Click here to join</a>\n                    </DialogContent>\n                    <DialogActions style={{justifyContent: \"center\", paddingTop: '15px', paddingBottom: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" disabled>Schedule Interview</Button>\n                    </DialogActions>\n                </Dialog>\n            )) : (\n                <Dialog open={hrScheduleInterviewOpen} onClose={() => setHrScheduleInterviewOpen(false)}>\n                    <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, mb:2, ml: 2, mr: 2}}>\n                        Schedule Interview for Screening Round\n                    </Typography>\n\n                    <DialogContent>\n                        <FormikProvider value={formik}>\n                        <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                            <Stack spacing={3}>\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                <TextField\n                                    fullWidth\n                                    select\n                                    label=\"Select Employee\"\n                                    {...getFieldProps(\"employee\")}\n                                    error={Boolean(touched.employee && errors.employee)}\n                                    helperText={touched.employee && errors.employee}\n                                    >\n                                    {TechnologyWiseEmployee.map((employee) => (\n                                    <MenuItem key={employee.id} value={employee.id}>{employee.user.first_name + \" \" + employee.user.last_name}</MenuItem>\n                                    ))}\n                                </TextField>\n                            </Stack>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Interview Start Datetime\"\n                                    type=\"datetime-local\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    {...getFieldProps(\"startDate\")}\n                                    error={Boolean(touched.startDate && errors.startDate)}\n                                    helperText={touched.startDate && errors.startDate}\n                                >\n                                </TextField>   \n\n                                <TextField\n                                    fullWidth\n                                    label=\"Interview Duration (In Minutes)\"\n                                    type=\"number\"\n                                    {...getFieldProps(\"duration\")}\n                                    error={Boolean(touched.duration && errors.duration)}\n                                    helperText={touched.duration && errors.duration}\n                                >\n                                </TextField>   \n                            </Stack>\n\n                            <Stack direction={{ xs: \"column\", sm: \"row\" }}>\n                            <LoadingButton\n                                fullWidth\n                                sx={{ mt: 3}}\n                                size=\"medium\"\n                                color=\"error\"\n                                type=\"submit\"\n                                variant=\"contained\"\n                                loading={isSubmitting}\n                            >\n                                Schedule Interview\n                            </LoadingButton>\n                            </Stack>\n                            </Stack>\n                        </Form>\n                        </FormikProvider>\n                    </DialogContent>\n\n\n                    {/* <DialogActions style={{justifyContent: \"center\", paddingTop: '15px'}}>\n                        <Button variant=\"contained\" color=\"error\" size=\"medium\" onClick={handleScheduleInterview} disabled={props?.jobApplicationData?.is_hr_interview_mail_sent && true}>Schedule Interview</Button>\n                    </DialogActions> */}\n                </Dialog>\n            )}\n        </Stack>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/JobListToolbar.js",["1942","1943","1944","1945","1946","1947","1948","1949","1950","1951","1952","1953","1954","1955","1956","1957","1958","1959","1960","1961","1962","1963","1964"],"import React from 'react';\nimport { useState, } from 'react';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport searchFill from '@iconify/icons-eva/search-fill';\nimport trash2Fill from '@iconify/icons-eva/trash-2-fill';\nimport roundFilterList from '@iconify/icons-ic/round-filter-list';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport {Container, Stack, TextField, Checkbox} from '@mui/material';\nimport { Formik, Form, FormikProvider, Field, useFormik } from \"formik\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Link as RouterLink, useNavigate} from 'react-router-dom';\nimport * as Yup from \"yup\";\nimport axios from 'axios';\nimport {useSnackbar} from 'notistack';\n// material\nimport { styled } from '@mui/material/styles';\nimport {\n  Box,\n  Button,\n  Toolbar,\n  Tooltip,\n  IconButton,\n  Typography,\n  OutlinedInput,\n  InputAdornment\n} from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Toolbar)(({ theme }) => ({\n  height: 96,\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: theme.spacing(0, 1, 0, 3)\n}));\n\nconst SearchStyle = styled(OutlinedInput)(({ theme }) => ({\n  width: 240,\n  transition: theme.transitions.create(['box-shadow', 'width'], {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shorter\n  }),\n  '&.Mui-focused': { width: 320, boxShadow: theme.customShadows.z8 },\n  '& fieldset': {\n    borderWidth: `1px !important`,\n    borderColor: `${theme.palette.grey[500_32]} !important`\n  }\n}));\n\n// ----------------------------------------------------------------------\n\nJobListToolbar.propTypes = {\n  numSelected: PropTypes.number,\n  filterName: PropTypes.string,\n  onFilterName: PropTypes.func\n};\n\nexport default function JobListToolbar({ numSelected, filterName, onFilterName }) {\n  return (\n    <RootStyle\n      sx={{\n        ...(numSelected > 0 && {\n          color: 'primary.main',\n          bgcolor: 'primary.lighter'\n        })\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography component=\"div\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <SearchStyle\n          value={filterName}\n          onChange={onFilterName}\n          placeholder=\"Search Job...\"\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <Box component={Icon} icon={searchFill} sx={{ color: 'text.disabled' }} />\n            </InputAdornment>\n          }\n        />\n      )}\n\n      {/* {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <Icon icon={trash2Fill} />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <Icon icon={trash2Fill} />\n          </IconButton>\n        </Tooltip>\n      )}   */}\n    </RootStyle>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/JobListHead.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/create-jobs/JobMoreMenu.js",["1965","1966","1967","1968","1969","1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980"],"import { Icon } from '@iconify/react';\nimport Popup from 'reactjs-popup';\nimport { useRef } from 'react';\nimport React, { useEffect } from 'react';\nimport { useState, } from 'react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport { Formik, Form, FormikProvider, Field, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from 'axios';\nimport { LoadingButton } from \"@mui/lab\";\n// material\nimport { Button, Dialog, DialogContent, Menu, MenuItem, IconButton, ListItemIcon, ListItemText, Container, Stack, TextField, Checkbox, Typography } from '@mui/material';\nimport {useSnackbar} from 'notistack';\nimport { Modal } from 'react-bootstrap';\nimport * as constants from 'src/utils/constants';\n\n// ----------------------------------------------------------------------\nconst experience = [\n  {\n    exp: \"0.00\"\n  },\n  {\n    exp: \"0.06\"\n  },\n  {\n    exp: \"1.00\"\n  },\n  {\n    exp: \"1.05\"\n  },\n  {\n    exp: \"2.00\"\n  },\n  {\n    exp: \"2.05\"\n  },\n  {\n    exp: \"3.00\"\n  },\n  {\n    exp: \"3.05\"\n  },\n  {\n    exp: \"4.00\"\n  },\n  {\n    exp: \"4.05\"\n  },\n  {\n    exp: \"5.00\"\n  },\n]\nexport default function JobMoreMenu(props) {\n  const { enqueueSnackbar} = useSnackbar();\n  const ref = useRef(null);\n\n  // popup open state\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => {\n    setShow(true);\n    setIsOpen(false);\n  }\n\n  // menu open state\n  const [isOpen, setIsOpen] = useState(false);\n\n  // job state\n  const [job, setJob]  = useState([]);\n\n  // job state\n  const [jobData, setJobData]  = useState({\n    jobName: props.jobName,\n    jobCategory: props.jobCategory,\n    jobLocation: props.jobLocation,\n    jobMaxExp: props. jobMaxExp,\n    jobMinExp: props.jobMinExp,\n    jobSkills: props.jobSkills,\n    jobRequirements: props.jobRequirements,\n    jobResponsibility: props.jobResponsibility,\n    jobDescription: props.jobDescription,\n    jobTechnology: props.jobTechnology,\n    jobPrimaryTechnology: props.jobPrimaryTechnology,\n    jobOpenings: props.jobOpenings,\n    jobActive: props.jobActive\n  });\n\n  // const technologies = []\n  // const locations = []\n\n  // jobData.jobTechnology.forEach(technology => {\n  //   technologies.push(technology.technology_name)\n  // });\n\n  const [categoryData, setCategoryData] = useState([])\n  const getCategory = () => {\n  const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-category/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n  .then((response) => {\n    setCategoryData(response.data.data)\n  })\n  .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const [officeLocationData, setOfficeLocationData] = useState([])\n  const getOfficeLocation = () => {\n    const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/office-locations/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n    .then((response) => {\n      setOfficeLocationData(response.data.data)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  const [technologyData, setTechnologyData] = useState([])\n  const getTechnology = () => {\n  const apiInstance = axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/technology/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n  .then((response) => {\n      setTechnologyData(response.data.data)\n  })\n  .catch((e) => console.log('something went wrong :(', e));\n};\n\n  useEffect(() => {\n    getCategory()\n    getOfficeLocation()\n    getTechnology()\n  }, [])\n\n  const [officeLocationState, setOfficeLocationState] = React.useState({\n    location: props.jobLocation.map(location => location.id)\n  });\n\n  const handleOfficeLocationChange = event => {\n    setOfficeLocationState(officeLocationState => ({\n      ...officeLocationState,\n      [event.target.name]:\n        event.target.type === \"checkbox\"\n          ? event.target.checked\n          : event.target.value\n    }));\n  };\n\n\n  const [technologyState, setTechnologyState] = React.useState({\n    technology: props.jobTechnology.map(jobtech => jobtech.id)\n  });\n\n  const handleTechnologyChange = event => {\n    setTechnologyState(technologyState => ({\n      ...technologyState,\n      [event.target.name]:\n        event.target.type === \"checkbox\"\n          ? event.target.checked\n          : event.target.value\n    }));\n  };\n\n  // is_active flag state\n  const [checked, setChecked] = React.useState(jobData.jobActive);\n  const handleIsActiveChange = event =>{\n    setChecked(event.target.checked);\n  };\n\n  const EditJobSchema = Yup.object().shape({\n    // job: Yup.string()\n    //   .min(2, \"Too Short!\")\n    //   .max(50, \"Too Long!\")\n    //   .required(\"Job is required\"),\n  });\n  const formik = useFormik({\n    initialValues: {\n      job_name: '',\n      is_active: '',\n    },\n    validationSchema: EditJobSchema,\n    onSubmit: (formValues) => {\n\n    const data = {job_name: jobData.jobName, job_cat_id: jobData.jobCategory, \n      primary_technology: jobData.jobPrimaryTechnology, technology_id: technologyState.technology, \n      location_id: officeLocationState.location, min_exp: jobData.jobMinExp, max_exp: jobData.jobMaxExp, \n      skills: jobData.jobSkills, requirements: jobData.jobRequirements, responsibility: jobData.jobResponsibility,\n      description: jobData.jobDescription, total_openings: jobData.jobOpenings, is_active: checked};\n\n    const headers = {\n      'Authorization': `Token ${localStorage.getItem('authToken')}`,\n    }\n\n    axios.put(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + \"/api/v1/jobs/\" + props.id + '/', data, {headers})\n        .then(function (response) {\n              if (response.status == 200) {\n                enqueueSnackbar(\"Job updated successfully !!\", {\n                  anchorOrigin: {\n                                  vertical: 'top',\n                                  horizontal: 'right',\n                                },\n                  variant: 'success',\n                  autoHideDuration: 1500,\n                });\n                // navigate('/resumeX/app', {replace: true});\n                window.location.reload(false);\n              }\n            })\n        .catch(error => {\n            console.error('There was an error!', error);\n        });\n      // setOpenFilter(false);\n    }\n  });\n\n  const handleDeleteChange = event =>{\n    setIsOpen(false);\n    const apiInstance = axios.delete(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/jobs/' + props.id, {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n    .then(function (response) {\n      if (response.status == 204) {\n        enqueueSnackbar(\"Job deleted successfully !!\", {\n          anchorOrigin: {\n                          vertical: 'top',\n                          horizontal: 'right',\n                        },\n          variant: 'success',\n          autoHideDuration: 1500,\n        });\n        // navigate('/resumeX/app', {replace: true});\n        window.location.reload(false);\n      }\n    })\n    .catch(error => {\n        console.error('There was an error!', error);\n    });\n  }\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setSubmitting } = formik;\n\n  return (\n    <>\n      <IconButton ref={ref} onClick={() => setIsOpen(true)}>\n        <Icon icon={moreVerticalFill} width={20} height={20} />\n      </IconButton>\n\n      <Dialog open={show} onClose={handleClose} maxWidth=\"md\" fullWidth>\n          <Typography align=\"center\" variant=\"h6\" sx={{ mt: 2, ml: 2, mr: 2}}>\n              Edit Job\n          </Typography>\n          <DialogContent  sx={{ mt: 2 }}>\n          <FormikProvider value={formik}>\n          <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Stack spacing={3}>\n              <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                  {/* --------------------- Job ID--------------------- */}\n                  <TextField\n                  fullWidth\n                  label=\"Job ID\"\n                  defaultValue={props.id}\n                  onChange={(event) => setJob(event.target.value)}\n                  />\n\n                  {/* --------------------- Job Name --------------------- */}\n                  <TextField\n                  fullWidth\n                  label=\"Job Name\"\n                  defaultValue={jobData.jobName}\n                  onChange={(event) => {\n                    jobData.jobName = event.target.value;\n                    setJobData(jobData);\n                  }}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                  {/* --------------------- Job Category --------------------- */}\n                  <TextField\n                  fullWidth\n                  select\n                  defaultValue={jobData.jobCategory}\n                  label=\"Job Category\"\n                  onChange={(event) => {\n                    jobData.jobCategory = event.target.value;\n                    setJobData(jobData);\n                  }}\n                  >\n                  {categoryData.map((category) => (\n                    <MenuItem key={category.id} value={category.id}>\n                      {category.job_category_name}\n                    </MenuItem>\n                  ))}\n                  </TextField>\n\n                  {/* --------------------- Job Location --------------------- */}\n                  <TextField\n                    fullWidth\n                    required\n                    select\n                    label=\"Office Location\"\n                    multiple\n                    // required\n                    value= {officeLocationState.location}\n                    {...getFieldProps(\"location\")}\n                    SelectProps={{\n                      multiple: true,\n                      value: officeLocationState.location,\n                      onChange: handleOfficeLocationChange\n                    }}\n                  >\n                    {officeLocationData.map((location) => (\n                      <MenuItem key={location.id} value={location.id}>{location.office_location}</MenuItem>\n                    ))}\n                  </TextField>\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                {/* --------------------- Primary Technology --------------------- */}\n                <TextField\n                  fullWidth\n                  select\n                  defaultValue={jobData.jobPrimaryTechnology}\n                  label=\"Primary Technology\"\n                  onChange={(event) => {\n                    jobData.jobPrimaryTechnology = event.target.value;\n                    setJobData(jobData);\n                  }}\n                  >\n                  {technologyData.map((technology) => (\n                    <MenuItem key={technology.id} value={technology.id}>\n                      {technology.technology_name}\n                    </MenuItem>\n                  ))}\n                  </TextField>\n\n                  {/* --------------------- Job Technology --------------------- */}\n                  <TextField\n                    fullWidth\n                    required\n                    select\n                    label=\"Technology\"\n                    multiple\n                    value= {technologyState.technology}\n                    {...getFieldProps(\"technology\")}\n                    SelectProps={{\n                      multiple: true,\n                      value: technologyState.technology,\n                      onChange: handleTechnologyChange\n                    }}\n                  >\n                    {technologyData.map((technology) => (\n                      <MenuItem key={technology.id} value={technology.id}>\n                        {technology.technology_name}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                {/* --------------------- Total Openings --------------------- */}\n                <TextField\n                  fullWidth\n                  label=\"Total Openings\"\n                  defaultValue={jobData.jobOpenings}\n                  onChange={(event) => {\n                    jobData.jobOpenings = event.target.value;\n                    setJobData(jobData);\n                  }}\n                  />\n\n                  {/* --------------------- Minimum Experience --------------------- */}\n                  <TextField\n                  fullWidth\n                  select\n                  defaultValue={jobData.jobMinExp}\n                  label=\"Minimum Experience Required\"\n                  onChange={(event) => {\n                    jobData.jobMinExp = event.target.value;\n                    setJobData(jobData);\n                  }}\n                  >\n                  {experience.map((option) => (\n                    <MenuItem key={option.exp} value={option.exp}>\n                      {option.exp}\n                    </MenuItem>\n                  ))}\n                  </TextField>\n\n                {/* --------------------- Maximum Experience --------------------- */}\n                <TextField\n                  fullWidth\n                  select\n                  defaultValue={jobData.jobMaxExp}\n                  label=\"Maximum Experience Required\"\n                  onChange={(event) => {\n                    jobData.jobMaxExp = event.target.value;\n                    setJobData(jobData);\n                  }}\n                  >\n                  {experience.map((option) => (\n                    <MenuItem key={option.exp} value={option.exp}>\n                      {option.exp}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                \n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                  {/* --------------------- Job Skills --------------------- */}\n                  <TextField\n                    fullWidth\n                    label=\"Skills\"\n                    multiline\n                    rows={4}\n                    maxRows={4}\n                    defaultValue={jobData.jobSkills}\n                    onChange={(event) => {\n                      jobData.jobSkills = event.target.value;\n                      setJobData(jobData);\n                    }}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                  {/* --------------------- Job Requirements --------------------- */}\n                  <TextField\n                    fullWidth\n                    label=\"Requirements\"\n                    multiline\n                    rows={4}\n                    maxRows={4}\n                    defaultValue={jobData.jobRequirements}\n                    onChange={(event) => {\n                      jobData.jobRequirements = event.target.value;\n                      setJobData(jobData);\n                    }}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                  {/* --------------------- Job Responsibilities --------------------- */}\n                  <TextField\n                    fullWidth\n                    label=\"Responsibilities\"\n                    multiline\n                    rows={4}\n                    maxRows={4}\n                    defaultValue={jobData.jobResponsibility}\n                    onChange={(event) => {\n                      jobData.jobResponsibility = event.target.value;\n                      setJobData(jobData);\n                    }}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                  {/* --------------------- Job Description --------------------- */}\n                  <TextField\n                    fullWidth\n                    label=\"Description\"\n                    multiline\n                    rows={4}\n                    maxRows={4}\n                    defaultValue={jobData.jobDescription}\n                    onChange={(event) => {\n                      jobData.jobDescription = event.target.value;\n                      setJobData(jobData);\n                    }}\n                  />\n                </Stack>\n                  \n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2} justifyContent=\"center\">\n                  {/* --------------------- active --------------------- */}\n                  <Typography>\n                  <Checkbox checked={checked} onChange={handleIsActiveChange}/>\n                    Active\n                  </Typography>\n                </Stack>\n\n              <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2} justifyContent=\"center\">\n\n              <Button fullWidth variant=\"contained\" color=\"error\" size=\"large\" onClick={handleClose}>Cancel</Button>\n              <LoadingButton\n                  fullWidth\n                  size=\"large\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                  loading={isSubmitting}\n                  onClick\n              >\n                  Update Job\n              </LoadingButton>\n              </Stack>\n              </Stack>\n              </Form>\n          </FormikProvider>\n        </DialogContent>\n      </Dialog>\n\n      <Menu\n        open={isOpen}\n        anchorEl={ref.current}\n        onClose={() => setIsOpen(false)}\n        PaperProps={{\n          sx: { width: 200, maxWidth: '100%' }\n        }}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <MenuItem sx={{ color: 'text.secondary' }} onClick={handleDeleteChange}>\n          <ListItemIcon>\n            <Icon icon={trash2Outline} width={24} height={24} />\n          </ListItemIcon>\n          <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n        </MenuItem>\n\n        <MenuItem sx={{ color: 'text.secondary' }} onClick={handleShow}>\n          <ListItemIcon>\n            <Icon icon={editFill} width={24} height={24} />\n          </ListItemIcon>\n          <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\n        </MenuItem>\n      </Menu>\n    </>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppWeeklySales.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppWebsiteVisits.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppTrafficBySite.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppTasks.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/PrintButton.js",["1981"],"import React from \"react\";\nimport {  Button, Typography } from '@mui/material';\n\nfunction PrintButton({ refsToPrint }) {\n  \n  //--------------------Functions---------------------------------\n\n  const deepCloneWithStyles = (node) => {\n    const style = document.defaultView.getComputedStyle(node, null);\n    const clone = node.cloneNode(false);\n    if (clone.style && style.cssText) clone.style.cssText = style.cssText;\n    for (let child of node.childNodes) {\n      if (child.nodeType === 1) clone.appendChild(deepCloneWithStyles(child));\n      else clone.appendChild(child.cloneNode(false));\n    }\n    return clone;\n  };\n\n  const printFunction = () => {\n    const printWindow = window.open(\"\", \"\", \"height=400,width=800\");\n    printWindow.document.write(\n      \"<html><head><title>Page Title</title></head><body id='print-body'>\"\n    );\n    const body = printWindow.document.getElementById(\"print-body\");\n    refsToPrint.map((ref) => {\n      const clone = deepCloneWithStyles(ref.current);\n      return body.appendChild(clone);\n    });\n    printWindow.document.write(\"</body></html>\");\n    printWindow.document.close();\n    printWindow.print();\n  }; \n\n\n  return <Button \n                 style={{float: \"right\" ,fontWeight: \"bold\", padding: \"10px\", borderRadius: \"10px\", color: \"white\", backgroundColor: \"#00AB55\", margin: \"10px\", fontSize: \"medium\"}} \n                 onClick={printFunction}> Generate PDF \n        </Button>;\n}\n\nexport default PrintButton;","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/interviews/SlotPicker.js",["1982","1983"],"import { React, useState } from 'react';\n\n// datepicker imports\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./SlotPicker.css\";\n\n// datetime imports\nimport setHours from 'date-fns/setHours'\nimport setMinutes from 'date-fns/setMinutes'\n\nimport { useSnackbar } from \"notistack\";\n\n\nexport default function SlotPicker(props) {\n\n    const [startDate, setStartDate] = useState()\n    const [newTimeSlots, setNewTimeSlots] = useState([])\n    const [btnDisable, setBtnDisable] = useState(true)\n    const { enqueueSnackbar } = useSnackbar();\n\n    var finalDateArray = []\n\n\n    function handleChange(date) {\n        let res = mergedTimeArray.filter(element => element.getDate() === date.getDate())\n\n        if (res !== null) {\n            setNewTimeSlots(res)\n        }\n        setStartDate(date)\n        setBtnDisable(false)\n    }\n\n    function onFormSubmit(e) {\n        e.preventDefault();\n        let userSelectedDate = startDate.toISOString().split('.')[0] + 'Z'\n        let employeeData = props?.eventsData.filter(x => {\n            if (x.start === userSelectedDate) {\n                return x\n            }\n        })\n\n        if (employeeData.length !== 0) {\n            props.setEventInfo(employeeData);\n            props.setOpen(true)\n            }\n        else {\n            var startDtTz = startDate.toISOString().split('T')[0]\n          \n            let eData = props?.eventsData.filter(y => {\n                if (startDtTz >= y.startRecur && startDtTz <= y.endRecur) {\n                    return y\n                }\n            }\n            )\n\n            var endDtTz = eData[0]?.endTz.split('T')[1]\n            var newEndDt = startDtTz + 'T' + endDtTz\n\n            if (eData.length !== 0) {\n                eData[0].start = startDate\n                eData[0].end = newEndDt\n\n                props.setEventInfo(eData);\n                props.setOpen(true)\n            }\n            else {\n                enqueueSnackbar(\"No Slots Are Available For The Given Time !\", {\n                    anchorOrigin: {\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                    },\n                    variant: \"error\",\n                    autoHideDuration: 1500,\n                });\n            }\n        }\n    }\n\n\n\n    let includeDateList = props?.eventsData.map(dateObj => {\n        if (dateObj?.startRecur) {\n            let val = new Date(dateObj.startTz)\n            let end_val = new Date(dateObj.endTz)\n\n            for (var arr = [], dt = new Date(val); dt < end_val; dt.setDate(dt.getDate() + 1)) {\n                arr.push(new Date(dt));\n                finalDateArray.push(new Date(dt));\n            }\n            return (val)\n        }\n        else {\n            let val = new Date(dateObj.start)\n            return (val)\n        }\n    })\n\n    const mergedDateArray = includeDateList.concat(finalDateArray)\n\n    let new_time_arr = []\n\n    let includeTimeList = props?.eventsData.map(dateObj => {\n        if (dateObj?.startRecur) {\n\n            let start_val = new Date(dateObj.startTz)\n            let end_val = new Date(dateObj.endTz)\n\n            let firstTimeEle = setHours(setMinutes(new Date(start_val),\n                new Date(start_val).getMinutes()),\n                new Date(start_val).getHours()\n            )\n\n            for (var time_arr = [], tm = start_val; tm < end_val; tm.setDate(tm.getDate() + 1)) {\n                let val = setHours(setMinutes(new Date(tm),\n                    new Date(tm).getMinutes()),\n                    new Date(tm).getHours()\n                )\n\n                time_arr.push(new Date(val));\n                new_time_arr.push(new Date(val));\n            }\n\n            return firstTimeEle\n        }\n        else {\n            let val = setHours(setMinutes(new Date(dateObj.start), new Date(dateObj.start).getMinutes()),\n                new Date(dateObj.start).getHours())\n\n            return (val)\n        }\n    })\n\n    const mergedTimeArray = includeTimeList.concat(new_time_arr)\n\n\n    const highlightSlotsDates = [\n        {\n            \"react-datepicker__day--highlighted-custom-2\": mergedDateArray\n        }\n    ]\n\n    return (\n\n        <div style={{ margin: 50, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n\n            <form onSubmit={onFormSubmit}>\n                <div className=\"form-group\" style={{ display: 'flex'}}>\n                    <div>\n                    <DatePicker\n                        placeholderText=\"Select Date-Time For Interview\"\n                        formatWeekDay={nameOfDay => nameOfDay.substring(0,3)}\n                        selected={startDate}\n                        onChange={handleChange}\n                        includeDates={mergedDateArray}\n                        includeTimes={newTimeSlots}\n                        highlightDates={highlightSlotsDates}\n                        disabledKeyboardNavigation\n                        showTimeSelect\n                        forceShowMonthNavigation\n                        timeFormat=\"HH:mm\"\n                        timeCaption=\"Slots\"\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\n                        onKeyDown={(e) => {\n                            e.preventDefault();\n                        }}\n                    />\n                    </div>\n                    \n                    <div>\n                    <button className=\"btn btn-success\" style={{ width: 140, height: \"3rem\", borderRadius: \"0px 20px 20px 0px\"}} disabled={btnDisable}> Book Slot </button>\n                    </div>\n                </div>\n            </form>\n\n        </div>\n\n    )\n}\n\n","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/interviews/JobApplications.js",["1984","1985"],"import React from 'react'\n// material\nimport { Grid, Button, Container, Stack, Typography } from \"@mui/material\";\nimport Page from '../../Page';\n// card\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nexport default function JobApplications(props) {\n    if (!props.noApplications) {\n        return (\n            <Page title=\"Interview Slots | ResumeX\">\n                <Container>\n                    <Stack alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\n                        <Typography variant=\"h4\" gutterBottom>\n                            Interview Details\n                        </Typography>\n                        <Typography sx={{ color: \"text.secondary\" }}>\n                            Here are your all details for job interview ! :)\n                        </Typography>\n                        <div style={{ margin: 40 }}>\n                            <Card sx={{ maxWidth: 1000 }} variant=\"outlined\">\n\n                                <CardHeader\n                                    title={props.interviewObj?.job_application?.job?.job_name}\n                                    subheader={\n                                        new Date(props.interviewObj?.job_application?.created).toLocaleDateString() + \"\\t\" +\n                                        new Date(props.interviewObj?.job_application?.created).toLocaleTimeString()\n                                    }\n                                />\n                                <CardContent>\n                                    <h6> Interview Round: </h6>\n                                    <Typography variant=\"body1\" color=\"error.main\">\n                                        <b>{props.interviewObj?.interview_round?.round_name}</b>\n                                    </Typography>\n                                </CardContent>\n                                <CardContent>\n                                    <h6> Job Description: </h6>\n                                    <Typography variant=\"body1\">\n                                        {props.interviewObj?.job_application?.requisition?.job_description}\n                                    </Typography>\n                                </CardContent>\n                                <CardContent>\n                                    <h6> Responsibilities: </h6>\n                                    <Typography paragraph>\n                                        {props.interviewObj?.job_application?.requisition?.responsibilities}\n                                    </Typography>\n                                    <h6> Must have technologies: </h6>\n                                    <Typography paragraph>\n                                        {props.interviewObj?.job_application?.requisition?.primary_technology?.map((obj, index) => (index ? ', ': '') + obj.technology_name)}\n                                    </Typography>\n                                    <h6> Good to have technologies: </h6>\n                                    <Typography paragraph>\n                                        {props.interviewObj?.job_application?.requisition?.other_technology?.map((obj, index) => (index ? ', ': '') + obj.technology_name)}\n                                    </Typography>\n                                    <h6> Preferred Locations: </h6>\n                                    <Typography paragraph>\n                                        {props.interviewObj?.candidate?.preferred_location.map((obj, index) => (index? ', ': '')+ obj.office_location)}\n                                    </Typography>\n                                    <h6> Current Location: </h6>\n                                    <Typography paragraph>\n                                        {props.interviewObj?.candidate?.current_location} <br />\n                                    </Typography>\n                                    <h6> Notice Period: </h6>\n                                    <Typography paragraph>\n                                        {props.interviewObj?.candidate?.notice_period?.notice_period} Months\n                                    </Typography>\n                                    <h6> Interview Details: </h6>\n                                    <Typography paragraph>\n                                        Interview Date: <b style={{color: \"red\"}}>{new Date(props.interviewObj?.start_date).toLocaleDateString()}</b> <br />\n                                        Interview Time: <b style={{color: \"red\"}}>{new Date(props.interviewObj?.start_date).toLocaleTimeString()}</b> to <b style={{color: \"red\"}}>{new Date(props.interviewObj?.end_date).toLocaleTimeString()}</b> <br />\n                                        <br></br>\n                                        Interview Link: <a href={props.interviewObj?.interview_attendee_link}>Click here to join the interview</a>\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </div>\n                    </Stack>\n                </Container>\n            </Page >\n        );\n    }\n    else {\n        return (\n            <Page title=\"Interview Slots | ResumeX\">\n                <Container>\n                    <Stack alignItems=\"center\" justifyContent=\"space-between\" mb={5}>\n                        <Typography variant=\"h4\" gutterBottom>\n                            No Details Found !! \n                        </Typography>\n                        <Typography sx={{ color: \"text.secondary\" }}>\n                            You have not applied for any job ! :(\n                        </Typography>\n                    </Stack>\n                </Container>\n            </Page >\n        )\n    }\n}\n\n\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/ListCandOnboardEngagement.js",["1986","1987"],"import { useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n\n// MUI Table\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\n// MUI Elements\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from \"@mui/material\";\n\n// MUI Icons\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EmergencyRecordingOutlinedIcon from '@mui/icons-material/EmergencyRecordingOutlined';\nimport CopyAllIcon from '@mui/icons-material/CopyAll';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport DownloadingIcon from '@mui/icons-material/Downloading';\n\n// Third-Party Components\nimport { format } from 'date-fns'\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { useSnackbar } from 'notistack';\nimport axios from 'axios';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\n\n\nexport default function OnboardEngagementList({tableContent}) {\n    const { enqueueSnackbar } = useSnackbar();\n    const navigate = useNavigate();\n    const [copyStatus, setCopyStatus] = useState(false)\n    const userInfo = UserInfo()\n\n    const handleDelete = (obj_id) => {\n        const hrToken = localStorage.getItem(\"authToken\");\n\n        apiInstance({\n            method: \"delete\",\n            url: \"onboard-engagements/\" + parseInt(obj_id) + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n        .then(function (response) {\n            enqueueSnackbar(response.data.message, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'success',\n                autoHideDuration: 2000,\n            });\n            navigate(\"/resumeX/candidates\", { replace: true });\n        })\n        .catch(function (error) {\n            enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'error',\n                autoHideDuration: 2000,\n            });\n        });\n    }\n\n    const getRecordingLink = (objectID) => {\n        const hrToken = localStorage.getItem(\"authToken\");\n\n        apiInstance({\n            method: \"post\",\n            url: \"/onboard-engagements/get_recording_link/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: {\n                \"id\": objectID\n            }\n        })\n        .then(function (response) {\n            enqueueSnackbar(response.data.message, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'success',\n                autoHideDuration: 2000,\n            });\n            navigate(\"/resumeX/candidates\", { replace: true });\n        })\n        .catch(function (error) {\n            enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'error',\n                autoHideDuration: 2000,\n            });\n        });\n    }\n\n    const getScheduleDateTime = (scheduleDT) => {\n        var new_scheduleDT = new Date(scheduleDT)\n        var format_scheduleDT = format(new_scheduleDT, \"PPpp\")\n        return format_scheduleDT\n    }\n    \n    return (\n        <TableContainer component={Paper}>\n\n            {/* <<<-------- Copy Status Dialog Box -------->>> */}\n                        \n            <Dialog open={copyStatus} onClose={() => setCopyStatus(false)}>\n                <DialogTitle \n                    style={{textAlign: \"center\", paddingBottom: \"40px\"}}>\n                        Attendee Link\n                </DialogTitle>\n                <DialogContent style={{textAlign: \"center\"}}>\n                    <DialogContentText>\n                        Attendee Link Copied Successfully!\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions style={{justifyContent: \"center\"}}>\n                    <Button size=\"large\" \n                            autoFocus \n                            onClick={() => setCopyStatus(false)}>\n                        OK\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            {/* <<<-------- Table -------->>> */}\n\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n\n                {/* <<<-------- Table Column Titles -------->>> */}\n\n                <TableHead>\n                    <TableRow>\n                        <TableCell> Call With </TableCell>\n                        <TableCell> Details of Call </TableCell>\n                        <TableCell> Mode </TableCell>\n                        <TableCell> IM </TableCell>\n                        <TableCell> Date </TableCell>\n                        <TableCell> Moderator Link </TableCell>\n                        <TableCell> Attendee Link </TableCell>\n                        <TableCell> Recording </TableCell>\n                        {userInfo?.role !== 'BU_HEAD' ?\n                            <TableCell> Action </TableCell> \n                        : null}\n                    </TableRow>\n                </TableHead>\n\n                {/* <<<-------- Table Data -------->>> */}\n\n                <TableBody>                                 \n\n                {tableContent?.candidateData?.onboard_engagements?.map((row, i) => (\n                    <TableRow\n                        key={row?.id}\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }} >\n\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row?.call_with}\n                        </TableCell>\n\n                        <TableCell>  {row?.agenda} </TableCell>\n\n                        <TableCell> {row?.mode} </TableCell>\n\n                        <TableCell> {row?.im ? row?.im : \"-\"} </TableCell>\n\n                        <TableCell> \n                            {getScheduleDateTime(row?.schedule_dt)} \n                        </TableCell>\n\n                        <TableCell>\n                            {row?.mod_link ?\n                                <Button color=\"info\" \n                                        variant=\"outlined\"    \n                                        fontSize='small' \n                                        size=\"small\"\n                                        href={row?.mod_link}\n                                        target=\"_blank\"\n                                        startIcon={<OpenInNewIcon/>} >\n                                    Join As Moderator \n                                </Button>\n                            : \"-\" } \n                        </TableCell>\n\n                        <TableCell>  \n                            {row?.attendee_link ? \n                                <CopyToClipboard text={row?.attendee_link}\n                                    onCopy={() => setCopyStatus(true)} >\n                                    \n                                    <Button color=\"info\" \n                                            variant=\"outlined\"    \n                                            fontSize=\"small\" \n                                            size=\"small\"\n                                            startIcon={<CopyAllIcon/>} >\n                                        Copy Link\n                                    </Button>\n\n                                </CopyToClipboard>                          \n                            : \"-\" }\n                        </TableCell>\n\n                        <TableCell>\n                            {row?.mode === \"BBB\" ?\n                                row?.recording_link ?\n                                <Button color=\"primary\" \n                                        href={row.recording_link}\n                                        target=\"_blank\">\n                                    <EmergencyRecordingOutlinedIcon          fontSize=\"medium\"/> \n                                </Button> :  \n                                <Button color=\"primary\" \n                                        variant=\"outlined\"    \n                                        fontSize=\"small\" \n                                        size=\"small\"\n                                        startIcon={<DownloadingIcon/>} \n                                        onClick={() => getRecordingLink(row.id)}>\n                                    Get Recording\n                                </Button> \n                            : \"-\" }\n                        </TableCell>\n                    \n                    {userInfo?.role !== 'BU_HEAD' ?\n                        <TableCell>\n                            <Button color=\"error\" \n                                onClick={() => handleDelete(row.id)}\n                            >\n                                <DeleteIcon  fontSize=\"medium\"  />\n                            </Button>\n                        </TableCell>  : null }         \n\n                    </TableRow> \n                  ))}\n\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/interviews/CandidateCalendar.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppNewUsers.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppOrderTimeline.js",["1988","1989","1990","1991","1992"],"import faker from 'faker';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n// material\nimport { Card, Typography, CardHeader, CardContent } from '@mui/material';\nimport {\n  Timeline,\n  TimelineItem,\n  TimelineContent,\n  TimelineConnector,\n  TimelineSeparator,\n  TimelineDot\n} from '@mui/lab';\n// utils\nimport { fDateTime } from '../../../utils/formatTime';\n\n// ----------------------------------------------------------------------\n\nconst TIMELINES = [\n  {\n    title: 'Registration',\n    time: \"2022-02-15T14:28:00.291196+05:30\",\n    type: 'task1'\n  },\n  {\n    title: 'Applied for the job',\n    time: faker.date.past(),\n    type: 'task2'\n  },\n  {\n    title: 'Interview Round 1',\n    time: faker.date.past(),\n    type: 'task3'\n  },\n  {\n    title: 'Interview Round 2',\n    time: faker.date.past(),\n    type: 'task4'\n  },\n  {\n    title: 'Hr Round',\n    time: faker.date.past(),\n    type: 'task5'\n  }\n];\n\n// ----------------------------------------------------------------------\n\nOrderItem.propTypes = {\n  item: PropTypes.object,\n  isLast: PropTypes.bool\n};\n\nfunction OrderItem({ item, isLast }) {\n  const [taskOne, setTaskOne] = useState('success.main')\n  const [taskTwo, setTaskTwo] = useState('success.main')\n  const [taskThree, setTaskThree] = useState('success.main')\n  const [taskFour, setTaskFour] = useState('grey.main')\n  const [taskFive, setTaskFive] = useState('grey.main')\n  const { type, title, time } = item;\n  return (\n    <TimelineItem>\n      <TimelineSeparator>\n        <TimelineDot\n          sx={{\n            bgcolor:\n            (type === 'task1' && taskOne) ||\n            (type === 'task2' && taskTwo) ||\n            (type === 'task3' && taskThree) ||\n            (type === 'task4' && taskFour) ||\n            (type === 'task5' && taskFive) ||\n              'error.main'\n          }}\n        />\n        {isLast ? null : <TimelineConnector />}\n      </TimelineSeparator>\n      <TimelineContent>\n        <Typography variant=\"subtitle2\">{title}</Typography>\n        <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\n          {fDateTime(time)}\n        </Typography>\n      </TimelineContent>\n    </TimelineItem>\n  );\n}\n\nexport default function AppOrderTimeline() {\n  return (\n    <Card\n      sx={{\n        '& .MuiTimelineItem-missingOppositeContent:before': {\n          display: 'none'\n        }\n      }}\n    >\n      <CardHeader title=\"Candidate Timeline\" />\n      <CardContent>\n        <Timeline>\n          {TIMELINES.map((item, index) => (\n            <OrderItem key={item.title} item={item} isLast={index === TIMELINES.length - 1} />\n          ))}\n        </Timeline>\n      </CardContent>\n    </Card>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppNewsUpdate.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppItemOrders.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppCurrentVisits.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppCurrentSubject.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppConversionRates.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/EmployeeDashboard/app/AppBugReports.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/UserListToolbar.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/UserMoreMenu.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/user/UserListHead.js",[],"/home/raj/Desktop/resumeX/resumeX/src/utils/formatTime.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/charts/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandInterview.js",["1993","1994","1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport * as React from 'react';\nimport CandRequiredDetails from './StepperForms/RequiredDetails';\nimport CandOfferDetails from './StepperForms/OfferDetails';\nimport CandOnboardingDetails from './StepperForms/OnboardingDetails';\n\n\n\nconst steps = ['Required Details', 'Offer Details', 'Onboarding Details'];\n\nexport default function InterviewStepper(candData) {\n    const [activeStep, setActiveStep] = useState(0);\n\n    const isStepOptional = (step) => {\n        return step === 1;\n    };\n\n    const handleNext = () => {       \n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    }; \n\n    const handleBtnClick = () => {\n        if(activeStep === steps.length - 1){\n            handleReset()\n        }\n        else{\n            handleNext()\n        }\n    }\n       \n    const CalculateAge = () => {\n        let today = new Date()\n        let birthdate = new Date(candData?.candidateData?.dob)           \n        let curr_year = today.getFullYear()\n        let born_year = birthdate.getFullYear()\n        let age = curr_year - born_year\n\n        return age\n    }\n\n    function renderStepContent(step) {\n        switch (step) {\n          case 1:\n            let result = CalculateAge()            \n            return  <CandRequiredDetails candData={candData} candAge={result}/>;\n\n          case 2:\n            return <CandOfferDetails candData={candData} />;\n\n          case 3:\n            return <CandOnboardingDetails candData={candData} />;\n           \n          default:\n            return <div>Not Found</div>;\n        }\n      }\n\n  \n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n            <Box sx={{ width: '100%', mt:3}}>\n                    <Stepper activeStep={activeStep} alternativeLabel>\n                        {steps.map((label, index) => {\n                        const stepProps = {};\n                        const labelProps = {};\n\n                        return (\n                            <Step key={label} {...stepProps}>\n                            <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n                        );\n                        })}\n\n                    </Stepper>\n\n                    <React.Fragment>\n                        {renderStepContent(activeStep+1)}\n                            \n                        <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n                        <Box sx={{ flex: '1 1 auto' }} />\n                            <Button\n                            size=\"large\"\n                            variant=\"outlined\"\n                            color=\"secondary\"\n                            disabled={activeStep === 0}\n                            onClick={handleBack}\n                            sx={{ mr:1, font:50 }}\n                            >\n                            Back\n                            </Button>\n                       \n                            <Button \n                            size=\"large\"\n                            variant=\"outlined\"\n                            color=\"secondary\"                            \n                            onClick={handleBtnClick}\n                             >\n                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                            </Button>\n                        </Box>\n                    </React.Fragment>\n                </Box>           \n          \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandJobApp.js",["2015","2016","2017","2018","2019","2020","2021","2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\n\n\nexport default function EditCandidateJobApplication(candidateData) {\n    return (\n        <Page title=\"Candidates\">\n            <Container>\n                <Card sx={{ mt: 2 }} variant=\"outlined\">\n                    <CardContent>\n                        <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                            Job Application\n                        </Typography>\n                    </CardContent>\n\n                    {candidateData?.candidateData?.job_application?.map((data) =>\n                        <CardContent>\n                            <b style={{ color: data.is_candidate_selected ? \"green\" : \"red\" }}>\n                                <Link key={data.id}  to={\"/resumeX/job-application/edit/\" + data.id} color=\"#207306\" component={RouterLink}>\n                                    {\"/resumeX/job-application/edit/\" + data.id}\n                                </Link>\n                            &nbsp;&nbsp;&nbsp;&nbsp; {data.is_candidate_selected ? ( \"selected\" ) : (\n                                data.is_interviewed ? 'Rejected' : 'In Process'\n                                )}<br></br>\n                            </b>\n                        </CardContent>\n                    )}\n                </Card>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandDocuments.js",["2033","2034","2035","2036","2037","2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem, Tooltip, Fade\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport { CenterFocusStrong } from '@mui/icons-material';\nimport BasicTable from './ListCandDocuments';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n\nexport default function EditCandidateDocuments(candData) {\n    const { enqueueSnackbar } = useSnackbar();\n    const hrToken = localStorage.getItem(\"authToken\");\n    const navigate = useNavigate();\n\n    const [recordFile, setRecordFile] = useState(null);\n    const [resumeFile, setResumeFile] = useState(null);\n    const [photoIDFile, setPhotoIDFile] = useState(null);\n    const [offerLetterDoc, setOfferLetterDoc] = useState(null);\n    const [payslipDoc, setPaySlipDoc] = useState([]);\n    const [disableValue, setDisableValue] = useState(false)\n\n    const setOtherValues = () => \n    {\n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n            \n        if (user_role === 'BU_HEAD')\n        { setDisableValue(true)  }\n\n        else{ setDisableValue(false) }\n    }\n\n    useEffect(() => {\n        setOtherValues();\n    }, [])\n\n    const handleRecordingUpload = (event) => {\n        const recordingFile = event.target.files[0]\n        formik.setFieldValue(\"Recording\", recordingFile);\n        setRecordFile(recordingFile)\n    };\n\n    const handleResumeUpload = (event) => {\n        const rexFile = event.target.files[0]\n        formik.setFieldValue(\"Resume\", rexFile);\n        setResumeFile(rexFile)\n    };\n\n    const handlePhotoIDUpload = (event) => {\n        const IDFile = event.target.files[0]\n        formik.setFieldValue(\"PhotoID\", IDFile);\n        setPhotoIDFile(IDFile)\n    };\n\n    const handleOfferLetterUpload = (event) => {\n        const offerLetterDoc = event.target.files[0]\n        formik.setFieldValue(\"OfferLetter\", offerLetterDoc);\n        setOfferLetterDoc(offerLetterDoc)\n    };\n\n    const handlePaySlipUpload = (event) => {\n        const paySlipFiles = event.target.files\n\n        let slipsArray = [];\n\n        for (var i = 0; i < paySlipFiles.length; i++) {            \n            slipsArray.push(paySlipFiles[i]);\n        }\n\n        formik.setFieldValue(\"Payslip\", slipsArray);\n\n        setPaySlipDoc(paySlipFiles)\n    };\n\n    const callCandidateUpdateDocuments = async (formValues) => {\n\n        var cand_id = candData?.candidateData?.id\n        var bodyFormData = new FormData();\n\n        if (recordFile != null)\n        {\n            bodyFormData.append(\"recording_file\", recordFile);\n        }\n\n        if (photoIDFile != null) {\n            bodyFormData.append(\"photo_id_file\", photoIDFile);\n        }\n\n        if (resumeFile != null){\n            bodyFormData.append(\"resume_file\", resumeFile);\n        } \n\n        if (offerLetterDoc != null){\n            bodyFormData.append(\"offer_letter_file\", offerLetterDoc);\n        } \n\n        if (payslipDoc.length != 0){\n            for (let i = 0 ; i < payslipDoc.length ; i++) {\n                    bodyFormData.append(\"payslip_files\", payslipDoc[i]);\n                }\n        } \n        \n        await apiInstance({\n            method: \"put\",\n            url: \"candidate-viewset/\" + cand_id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n                'Content-Type': \"multipart/form-data\",\n            },\n            data: bodyFormData,\n        })\n            .then(async function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(0);\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n\n            });\n    }\n\n\n    const CandidateSchema = Yup.object().shape({\n        Recording: Yup.mixed().nullable(),\n        PhotoID: Yup.mixed(),\n        Payslip: Yup.array()\n            .min(3, \"3 payslips are required.\")\n            .max(3, \"Only 3 files can be uploaded\"),\n        OfferLetter: Yup.mixed(),\n        Resume: Yup.mixed(),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            Recording: '',\n            PhotoID: '',\n            Payslip: '',\n            OfferLetter: '',\n            Resume: '',\n        },\n        validationSchema: CandidateSchema,\n        onSubmit: (values) => {\n            // call create candidate API\n            callCandidateUpdateDocuments(values)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting } = formik;\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2 }} variant=\"outlined\">\n                            <CardContent>\n                                <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Documents\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <InputLabel\n                                            id=\"recording-upload-label\"\n                                            style={{ width: \"25%\", padding: \"8px 0\" }}\n                                        >\n                                            Initial Recording\n                                        </InputLabel>\n\n                                        <input\n                                            halfwidth\n                                            id=\"Recording\"\n                                            name=\"Recording\"\n                                            className=\"form-control\"\n                                            type=\"file\"\n                                            accept='.mp3,.mp4'\n                                            onChange={handleRecordingUpload}\n\n                                        />\n\n                                        <ErrorMessage name=\"Recording\">\n                                            {(msg) => <span\n                                                style={{ width: \"25%\", color: \"#FF4842\", fontSize: \"12px\", textAlign: \"left\" }}>\n                                                {msg}\n                                            </span>}\n                                        </ErrorMessage>\n\n                                        <InputLabel\n                                            id=\"photo-id-upload-label\"\n                                            style={{ width: \"15%\", padding: \"8px 0\" }}\n                                        >\n                                            Photo ID\n                                        </InputLabel>\n\n                                        <input\n                                            halfwidth\n                                            id=\"PhotoID\"\n                                            name=\"PhotoID\"\n                                            className=\"form-control\"\n                                            type=\"file\"\n                                            accept=\".jpg\"\n                                            onChange={handlePhotoIDUpload}\n                                        />\n\n                                        <ErrorMessage name=\"PhotoID\">\n                                            {(msg) => <span\n                                                style={{ width: \"25%\", color: \"#FF4842\", fontSize: \"12px\", textAlign: \"left\" }}>\n                                                {msg}\n                                            </span>}\n                                        </ErrorMessage>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <InputLabel\n                                            id=\"payslip-upload-label\"\n                                            style={{ width: \"25%\", padding: \"8px 0\" }}\n                                        >\n                                            3 Months Payslips\n                                        </InputLabel>\n\n                                        <input\n                                            halfwidth\n                                            id=\"Payslip\"\n                                            name=\"Payslip\"\n                                            className=\"form-control\"\n                                            type=\"file\"\n                                            multiple\n                                            accept=\".pdf\"\n                                            onChange={handlePaySlipUpload}\n\n                                        />\n\n                                        <ErrorMessage name=\"Payslip\">\n                                            {(msg) => <span\n                                                style={{ width: \"25%\", color: \"#FF4842\", fontSize: \"12px\", textAlign: \"left\" }}>\n                                                {msg}\n                                            </span>}\n                                        </ErrorMessage>\n\n                                        <InputLabel\n                                            id=\"offer-letter-upload-label\"\n                                            style={{ width: \"15%\", padding: \"8px 0\" }}\n                                        >\n                                            Offer Letter\n                                        </InputLabel>\n\n                                        <input\n                                            halfwidth\n                                            id=\"OfferLetter\"\n                                            name=\"OfferLetter\"\n                                            className=\"form-control\"\n                                            type=\"file\"\n                                            accept=\".pdf\"                                           \n                                            onChange={handleOfferLetterUpload}\n                                        />\n\n                                        <ErrorMessage name=\"OfferLetter\">\n                                            {(msg) => <span\n                                                style={{ width: \"25%\", color: \"#FF4842\", fontSize: \"12px\", textAlign: \"left\" }}>\n                                                {msg}\n                                            </span>}\n                                        </ErrorMessage>\n\n                                    </Stack>\n\n                                    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} >\n\n                                        <InputLabel\n                                            id=\"resume-upload-label\"\n                                            style={{ width: \"12%\", padding: \"4px 0\" }}\n                                        >\n                                            Resume\n                                        </InputLabel>\n\n                                        <input\n                                            halfwidth\n                                            id=\"Resume\"\n                                            name=\"Resume\"\n                                            className=\"form-control\"\n                                            type=\"file\"\n                                            accept=\".pdf\"                                           \n                                            onChange={handleResumeUpload}\n                                        />\n\n                                        <ErrorMessage name=\"Resume\">\n                                            {(msg) => <span\n                                                style={{ width: \"15%\", color: \"#FF4842\", \n                                                         fontSize: \"12px\", textAlign: \"center\" \n                                                        }}>\n                                                {msg}\n                                            </span>}\n                                        </ErrorMessage>\n\n                                    </Stack>\n\n                                </Stack>\n\n\n                                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n\n                                <LoadingButton\n                                    fullWidth\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    loading={isSubmitting}\n                                    disabled={disableValue}\n                                >\n                                    Upload Documents\n                                </LoadingButton>\n\n                            </CardContent>\n                        </Card>\n                    </Form>\n                </FormikProvider>\n\n                <Card sx={{ mt: 2 }} variant=\"outlined\">\n                    <CardContent>\n                        <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                            Documents List\n                        </Typography>\n                    </CardContent>\n\n                    <CardContent>\n                        <BasicTable tableContent={candData} />                        \n                    </CardContent>\n                </Card>\n\n            </Container >\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/resume-parser/ResumeCards.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandPerDetails.js",["2049","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useLocation, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n\nexport default function EditCandidatePersonalDetails(candData) {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const location = useLocation();\n\n    const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n\n    const [statusData, setstatusData] = useState([]);\n\n    const [sourceData, setsourceData] = useState([]);\n\n    const [TechData, setTechData] = useState([]);\n\n    const [locData, setlocData] = useState([]);\n\n    const [preferLocData, setpreferlocData] = useState([]);\n\n    const [currencyData, setCurrencyData] = useState([]);\n\n    const [noticePeriodData, setNoticePeriodData] = useState([]);\n\n    const InitialTechList = candData?.candidateData?.technology?.map((obj) => obj.id);\n\n    const PreferLocList = candData?.candidateData?.preferred_location?.map((obj) => obj.id)\n\n    const [disableValue, setDisableValue] = useState(false)\n\n    const [statusDisable, setStatusDisable] = useState(false)\n\n    const  user = JSON.parse(localStorage.getItem(\"user\"))\n\n    const  user_role = user.role.role_name\n\n    const [backUrl, setBackUrl] = useState(\"/resumeX/candidates\") \n\n    useEffect(() => {\n        getStatusList();\n        getSourceList();\n        getTechList();\n        getLocationsList();\n        getCurrencyList();\n        getNoticePeriodList();\n        setOtherValues();\n    }, [])\n\n    const setOtherValues = () => {           \n        if (user_role === 'BU_HEAD')\n        { \n            setDisableValue(true)  \n        }\n        else if (user_role === 'OnBoarding_HR')\n        {\n            let back_value = location.state.fromPage\n            let newBackPath = \"/resumeX/\" + back_value\n            setDisableValue(true)\n            setStatusDisable(false)\n            setBackUrl(newBackPath)\n        }\n        else\n        { \n            setDisableValue(false) \n        }\n        \n    }\n\n    const getStatusList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"candidate-status/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const statusData = getStatusArray(response.data.data)\n                setstatusData(statusData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const getSourceList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"candidate-source/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const sourceData = getSourceArray(response.data.data)\n                setsourceData(sourceData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const getTechList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"technology/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const techListData = getTechArray(response.data.data)\n                setTechData(techListData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n    }\n\n    const getLocationsList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"office-locations/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const locData = getLocArray(response.data.data)\n                setlocData(locData)\n                setpreferlocData(locData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const getCurrencyList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"currency/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const currData = getCurrencyArray(response.data.data)\n                setCurrencyData(currData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const getNoticePeriodList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"notice-period/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const noticeData = getNoticePeriodArray(response.data.data)\n                setNoticePeriodData(noticeData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const getStatusArray = (statusData) =>\n        statusData.map((statusObj) => ({\n            pk: statusObj.id,\n            statusName: statusObj.status\n        }));\n\n    const getSourceArray = (sourceData) =>\n        sourceData.map((sourceObj) => ({\n            pk: sourceObj.id,\n            sourceName: sourceObj.source\n        }));\n\n    const getTechArray = (technoData) =>\n        technoData.map((technoObj) => ({\n            pk: technoObj.id,\n            technologyName: technoObj.technology_name\n        }));\n\n    const getLocArray = (locData) =>\n        locData.map((locObj) => ({\n            pk: locObj.id,\n            office_loc: locObj.office_location,\n            loc_status: locObj.is_active,\n        }));\n\n    const getCurrencyArray = (curData) =>\n        curData.map((currObj) => ({\n            pk: currObj.id,\n            curr_name: currObj.curr_name,\n            curr_status: currObj.is_active,\n        }));\n\n    const getNoticePeriodArray = (NPData) =>\n        NPData.map((NPObj) => ({\n            pk: NPObj.id,\n            notice_period: NPObj.notice_period\n        }));\n\n    const calculateExpHike = e => {   \n        let present_ctc = values.CurrentCtc\n        let demand_ctc = e.target.value\n\n        let hike = ((demand_ctc*100)/present_ctc)- 100\n\n        let final_hike = (present_ctc > 0 && demand_ctc > 0) ? hike : 0\n        \n        setFieldValue(\"Exp_Hike\", Math.round(final_hike))\n    }\n\n    const callUpdateCandidate = (formValues) => {\n        var cand_id = candData?.candidateData?.id\n\n        var apiData = {\n            \"first_name\": formValues.FirstName,\n            \"last_name\": formValues.LastName,\n            \"email\": formValues.Email,\n            \"total_experience\": formValues.TotalExp,\n            \"notice_period_id\": formValues.NoticePeriod,\n            \"current_location\": formValues.CurrentLocation.toUpperCase(),\n            \"last_company\": formValues.LastCompany,\n            \"current_ctc\": formValues.CurrentCtc,\n            \"expected_ctc\": formValues.ExpectedCtc,\n            \"last_serving_date\": formValues.LastServingDate,\n            \"status_id\": formValues.Status,\n            \"source_id\": formValues.Source,\n            \"technology_id\": formValues.Technology,\n            \"dob\": formValues.BirthDate,\n            \"gender\": formValues.Gender,\n            \"currency_id\": formValues.Currency,\n            \"profile_link\": formValues.ProfileLink,\n            \"comments\": formValues.Comments,\n            \"last_company\": formValues.LastCompany,\n            \"gateway_location\": formValues.ForLocation,\n            \"prefer_loc_id\": formValues.preferLoc,\n            // \"join_date\": formValues.JoinDate,\n            \"exp_hike\": formValues.Exp_Hike,\n            \"referred_by\": formValues.Referred_By\n        }\n\n        apiInstance({\n            method: \"put\",\n            url: \"candidate-viewset/\" + cand_id + '/',\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiData,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(0);\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n\n            });\n    }\n\n\n    const CandidateSchema = Yup.object().shape({\n        FirstName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed.\")\n            .required(\"First name required\"),\n        LastName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed.\")\n            .required(\"Last name required\"),\n        CurrentLocation: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed.\")\n            .required(\"Current Location required\"),\n        preferLoc: Yup.array()\n            .min(1, \"Prefer Location is required\"),\n        Email: Yup.string()\n            .email(\"Email must be a valid email address\")\n            .required(\"Email is required\"),\n        TotalExp: Yup.string()\n            .matches(/^[0-9]{1,2}[.][0-9]{1}$/, \"Invalid Input\")\n            .required(\"Total Experience required\"),\n        NoticePeriod: Yup.string()\n            .required(\"Notice Period required\"),\n        LastServingDate: Yup.date()\n            .required(\"Last serving date is required\"),\n        CurrentCtc: Yup.number()\n            .required(\"Current CTC Is required\"),\n        ExpectedCtc: Yup.number()\n            .required(\"Expected CTC Is required\"),\n        Status: Yup.string()\n            .required(\"Status is required.\"),\n        Source: Yup.string()\n            .required(\"Source is required.\"),\n        Gender: Yup.string()\n            .required(\"Gender is required.\"),\n        LastCompany: Yup.string()\n            .required(\"Last company name is required.\"),\n        ForLocation: Yup.string(),\n        Technology: Yup.array()\n            .min(1, \"Technology is required\"),\n        Currency: Yup.string()\n            .required(\"Currency is required.\"),\n        BirthDate: Yup.date()\n            .required('Birthdate is required.'),\n        Referred_By: Yup.string(),\n        Exp_Hike: Yup.string(),\n    });\n\n\n    const formik = useFormik({\n        initialValues: {\n            FirstName: candData?.candidateData?.user?.first_name ?? '',\n            LastName: candData?.candidateData?.user?.last_name ?? '',\n            CurrentLocation: candData?.candidateData?.current_location ?? '',\n            Email: candData?.candidateData?.user?.email ?? '',\n            TotalExp: candData?.candidateData?.total_experience ?? '',\n            NoticePeriod: candData?.candidateData?.notice_period?.id ?? '',\n            Mobile_no: candData?.candidateData?.user?.mobile ?? '',\n            CurrentCtc: candData?.candidateData?.current_ctc ?? '',\n            ExpectedCtc: candData?.candidateData?.expected_ctc ?? '',\n            LastServingDate: candData?.candidateData?.last_serving_date ?? '',\n            Status: candData?.candidateData?.status?.id ?? '',\n            Source: candData?.candidateData?.source?.id ?? '',\n            Gender: candData?.candidateData?.gender ?? '',\n            LastCompany: candData?.candidateData?.last_company ?? '',\n            Technology: InitialTechList ?? [],\n            Currency: candData?.candidateData?.currency?.id ?? '',\n            ForLocation: candData?.candidateData?.gateway_location ?? '',\n            Comments: candData?.candidateData?.comments ?? '',\n            ProfileLink: candData?.candidateData?.profile_link ?? '',\n            Requisition: candData?.candidateData?.requisition?.requisite_number ?? '',\n            BuGroup: candData?.candidateData?.requisition?.bu_group ?? '',\n            Role: candData?.candidateData?.requisition?.department ?? '',\n            BirthDate: candData?.candidateData?.dob ?? '',\n            preferLoc: PreferLocList ?? [],\n            Referred_By: candData?.candidateData?.referred_by ?? '',\n            Exp_Hike: candData?.candidateData?.exp_hike ?? ''\n        },\n        enableReinitialize: true,\n        validationSchema: CandidateSchema,\n        onSubmit: (values) => {\n            callUpdateCandidate(values)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, handleChange, selectedOption, setFieldValue } = formik;\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2 }} variant=\"outlined\">\n                            <CardContent sx={{mt:3}}>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Requisition\"\n                                            type=\"string\"\n                                            label=\"Requisition\"\n                                            disabled\n                                            required\n                                            variant=\"standard\"\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('Requisition')}\n                                        />\n\n\n                                        <TextField\n                                            fullWidth\n                                            id='BuGroup'\n                                            label=\"BU\"\n                                            disabled\n                                            required\n                                            variant=\"standard\"\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('BuGroup')}\n                                        />\n\n                                        <TextField\n                                            fullWidth\n                                            id='Role'\n                                            label=\"Role\"\n                                            disabled\n                                            required\n                                            variant=\"standard\"\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('Role')}\n                                        />\n                                    </Stack>\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n                                <Typography variant=\"h6\" align=\"center\" color=\"text.secondary\" fontStyle=\"italic\" gutterBottom>\n                                    Candidate Details\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"First Name\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('FirstName')}\n\n                                            error={Boolean(touched.FirstName && errors.FirstName)}\n                                            helperText={touched.FirstName && errors.FirstName}\n\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Last Name\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('LastName')}\n\n                                            error={Boolean(touched.LastName && errors.LastName)}\n                                            helperText={touched.LastName && errors.LastName}\n                                        >\n                                        </TextField>\n\n                                        {<TextField\n                                            fullWidth\n                                            label=\"Email\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('Email')}\n\n                                            error={Boolean(touched.Email && errors.Email)}\n                                            helperText={touched.Email && errors.Email}\n\n                                        >\n                                        </TextField>}\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Mobile\"\n                                            disabled\n                                            required\n\n                                            {...getFieldProps('Mobile_no')}\n                                        /> \n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            name=\"BirthDate\"\n                                            label=\"BirthDate\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type=\"date\"\n                                            required\n                                            disabled={disableValue}\n\n                                            style={{ width: '50%' }}\n\n                                            {...getFieldProps('BirthDate')}\n\n                                            error={Boolean(touched.BirthDate && errors.BirthDate)}\n                                            helperText={touched.BirthDate && errors.BirthDate}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                        label=\"Current Location \"\n                                        required\n                                        style={{ width: '35%' }}\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('CurrentLocation')}\n\n                                        error={Boolean(touched.CurrentLocation && errors.CurrentLocation)}\n                                        helperText={touched.CurrentLocation && errors.CurrentLocation}\n                                        >\n                                        </TextField>\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                            <Stack\n                                                direction={{ xs: \"column\", sm: \"row\" }}\n                                                spacing={3}\n                                                style={{ padding: \"14px 0\" }}\n                                            >\n                                                <div id=\"gender-radio-group\" style={{ color: '#637381' }}> Gender </div>\n                                                <label>\n                                                    <Field type=\"radio\" name=\"Gender\" \n                                                    value=\"MALE\" \n                                                    disabled={disableValue} />\n                                                &nbsp; Male\n                                                </label>\n\n                                                <label>\n                                                    <Field type=\"radio\" name=\"Gender\" value=\"FEMALE\" \n                                                    disabled={disableValue} />\n                                                &nbsp; Female\n                                                </label>\n                                            </Stack>\n                                            <ErrorMessage name=\"Gender\">\n                                                {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"14px\" }}>{msg}</span>}\n                                            </ErrorMessage>\n                                        </div>                                  \n                                    </Stack>\n\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n                                <Typography variant=\"h6\" align=\"center\" color=\"text.secondary\" fontStyle=\"italic\" gutterBottom>\n                                    Work Information\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Total Experience\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('TotalExp')}\n\n                                            error={Boolean(touched.TotalExp && errors.TotalExp)}\n                                            helperText={touched.TotalExp && errors.TotalExp}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Last Company Name\"\n                                            placeholder=\"Ex:- Capegemini\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('LastCompany')}\n\n                                            error={Boolean(touched.LastCompany && errors.LastCompany)}\n                                            helperText={touched.LastCompany && errors.LastCompany}\n                                        >\n                                        </TextField>\n\n                                        {TechData.length > 0 ?\n                                        <TextField\n                                            fullWidth\n                                            id=\"Technology\"\n                                            label=\"Technology/Skills\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            SelectProps={{\n                                                multiple: true,\n                                                value: formik.values.Technology,\n                                                onChange: (selectedOption) => handleChange(\"Technology\")(selectedOption),\n                                                MenuProps: {\n                                                    style: {\n                                                        maxHeight: 200,\n                                                    },\n                                                }\n\n                                            }}\n\n                                            {...getFieldProps(\"Technology\")}\n\n                                            error={Boolean(touched.Technology && errors.Technology)}\n                                            helperText={touched.Technology && errors.Technology}\n\n                                        >\n                                            {TechData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.technologyName}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField> : null}\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Notice Period\"\n                                            placeholder=\"0\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('NoticePeriod')}\n\n                                            error={Boolean(touched.NoticePeriod && errors.NoticePeriod)}\n                                            helperText={touched.NoticePeriod && errors.NoticePeriod}\n                                        >\n\n                                            {noticePeriodData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.notice_period}\n                                                </MenuItem>\n                                            ))}\n\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Last Serving Date\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type=\"date\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('LastServingDate')}\n\n                                            error={Boolean(touched.LastServingDate && errors.LastServingDate)}\n                                            helperText={touched.LastServingDate && errors.LastServingDate}\n                                        >\n                                        </TextField>\n                                        \n                                        <TextField\n                                            fullWidth\n                                            label=\"Current CTC\"\n                                            placeholder=\"450000.00\"\n                                            type=\"number\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('CurrentCtc')}\n\n                                            error={Boolean(touched.CurrentCtc && errors.CurrentCtc)}\n                                            helperText={touched.CurrentCtc && errors.CurrentCtc}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Expected CTC\"\n                                            placeholder=\"550000.00\"\n                                            type=\"number\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('ExpectedCtc')}\n\n                                            onInput={calculateExpHike}\n\n                                            error={Boolean(touched.ExpectedCtc && errors.ExpectedCtc)}\n                                            helperText={touched.ExpectedCtc && errors.ExpectedCtc}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Expected Hike (in %)\"\n                                            disabled\n\n                                            {...getFieldProps('Exp_Hike')}\n\n                                            error={Boolean(touched.Exp_Hike && errors.Exp_Hike)}\n                                            helperText={touched.Exp_Hike && errors.Exp_Hike}\n                                        >\n                                        </TextField>\n                                    </Stack>\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n                                <Typography variant=\"h6\" align=\"center\" color=\"text.secondary\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Additional Information\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent>                            \n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Currency\"\n                                            type=\"string\"\n                                            label=\"Currency\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"Currency\")}\n\n                                            error={Boolean(touched.Currency && errors.Currency)}\n                                            helperText={touched.Currency && errors.Currency}\n                                        >\n\n                                            {currencyData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.curr_name}\n                                                </MenuItem>\n                                            ))}\n\n                                        </TextField>\n\n                                        {preferLocData.length > 0 ?\n                                        <TextField\n                                        fullWidth\n                                        id=\"PreferLoc\"\n                                        label=\"Prefer Location\"\n                                        select\n                                        disabled={disableValue}\n\n                                        SelectProps={{\n                                            multiple: true,\n                                            value: formik.values.preferLoc,\n                                            onChange: (selectedOption) => handleChange(\"preferLoc\")(selectedOption),\n                                            MenuProps: {\n                                                style: {\n                                                    maxHeight: 200,\n                                                },\n                                            }\n\n                                        }}\n\n                                        {...getFieldProps(\"preferLoc\")}\n\n                                        error={Boolean(touched.preferLoc && errors.preferLoc)}\n                                        helperText={touched.preferLoc && errors.preferLoc}\n                                        >\n                                        {preferLocData.map((option) => (\n                                            <MenuItem key={option.pk} value={option.pk}>\n                                            {option.office_loc}\n                                            </MenuItem>\n                                        ))}\n                                        </TextField> : null }\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"ForLocation\"\n                                            type=\"string\"\n                                            label=\"Work Location\"\n                                            select\n                                            disabled={disableValue}\n\n                                            SelectProps={{\n                                                value: formik.values.ForLocation,\n                                                onChange: (selectedOption) => handleChange(\"ForLocation\")(selectedOption),\n                                                MenuProps: {\n                                                    style: {\n                                                        maxHeight: 200,\n                                                    },\n                                                }\n                                            }}\n\n                                            {...getFieldProps(\"ForLocation\")}\n\n                                            error={Boolean(touched.ForLocation && errors.ForLocation)}\n                                            helperText={touched.ForLocation && errors.ForLocation}\n                                        >\n\n                                            <MenuItem key=\"CH-1A\" value=\"CH-1A\"> CH-1A </MenuItem>\n                                            <MenuItem key=\"CH-1B\" value=\"CH-1B\"> CH-1B </MenuItem>\n                                            <MenuItem key=\"CH-2\" value=\"CH-2\"> CH-2 </MenuItem>\n                                            <MenuItem key=\"CH-3\" value=\"CH-3\"> CH-3 </MenuItem>\n                                            <MenuItem key=\"CH-4\" value=\"CH-4\"> CH-4 </MenuItem>\n                                            <MenuItem key=\"CH-5\" value=\"CH-5\"> CH-5 </MenuItem>\n                                            <MenuItem key=\"CH-6\" value=\"CH-6\"> CH-6 </MenuItem>\n                                            <MenuItem key=\"CH-8\" value=\"CH-8\"> CH-8 </MenuItem>\n                                            <MenuItem key=\"CH-9\" value=\"CH-9\"> CH-9 </MenuItem>\n\n\n                                            {locData.map((option) => (\n                                                option.office_loc != 'Ahmedabad' ?\n                                                    < MenuItem key={option.office_loc} value={option.office_loc} >\n                                                        {option.office_loc}\n                                                    </ MenuItem> : \"\"\n                                            ))}\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Referred By\"\n                                            type=\"string\"\n                                            disabled={disableValue}\n                                            {...getFieldProps('Referred_By')}\n\n                                            error={Boolean(touched.Referred_By && errors.Referred_By)}\n                                            helperText={touched.Referred_By && errors.Referred_By}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Status\"\n                                            type=\"string\"\n                                            label=\"Status\"\n                                            select\n                                            required\n                                            disabled={user_role === 'OnBoarding_HR' ? statusDisable : disableValue}\n\n                                            SelectProps={{\n                                                value: formik.values.Status,\n                                                onChange: (selectedOption) => handleChange(\"Status\")(selectedOption),\n                                                MenuProps: {\n                                                    style: {\n                                                        maxHeight: 200,\n                                                    },\n                                                }\n                                            }}\n\n                                            {...getFieldProps(\"Status\")}\n\n                                            error={Boolean(touched.Status && errors.Status)}\n                                            helperText={touched.Status && errors.Status}\n                                        >\n\n                                            {statusData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.statusName}\n                                                </MenuItem>\n                                            ))}\n\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Source\"\n                                            type=\"string\"\n                                            label=\"Source\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"Source\")}\n\n                                            error={Boolean(touched.Source && errors.Source)}\n                                            helperText={touched.Source && errors.Source}\n                                        >\n\n                                            {sourceData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.sourceName}\n                                                </MenuItem>\n                                            ))}\n\n\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            id=\"ProfileLink\"\n                                            label=\"Profile Link\"\n                                            multiline\n                                            rows={4}\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"ProfileLink\")}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"Comments\"\n                                            label=\"Comments\"\n                                            multiline\n                                            disabled={disableValue}\n                                            rows={4}\n\n                                            {...getFieldProps(\"Comments\")}\n                                        >\n                                        </TextField>\n                                    </Stack>\n                                </Stack>\n                            </CardContent>                               \n                        </Card>\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n\n                        <LoadingButton\n                            fullWidth\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            disabled={user_role === 'OnBoarding_HR' ? statusDisable : disableValue}\n                        >\n                            Update Profile\n                        </LoadingButton>\n\n                    </Form>\n                </FormikProvider>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/joinees/JoineesList.js",["2062","2063","2064","2065","2066","2067","2068","2069","2070"],"import Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport {\n    TableRow,\n    TableCell,\n    TableFooter\n  } from \"@mui/material\";\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        iconActive: {\n                display: 'none',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function JoineesList(data) {\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: \"none\",\n        filter: false,\n        print: false,\n        download: false,\n        responsive: \"standard\",\n        fixedHeader: true,\n        fixedSelectColumn: false,\n        viewColumns: false,\n        customFooter: (\n            count,\n            page,\n            rowsPerPage,\n            changeRowsPerPage,\n            changePage\n          ) => {\n            return(\n                <TableFooter>\n                <TableRow>\n                  <TableCell> <b> Total Joinees: &nbsp; {count} </b></TableCell>\n                </TableRow>\n              </TableFooter>\n            );\n          },\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Candidate Name\",\n            options: {\n                filter: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    return (\n                        // <a href={`/resumeX/candidates/edit/${rowClickData}`} style={{textDecoration: 'none', color: '#00AB55', fontWeight: 'bold'}}>{value}</a>\n                        <RouterLink \n                                to={`/resumeX/candidates/edit/${value.uid}`} state={{fromPage: \"app\"}}  \n                                style={{textDecoration: 'none', \n                                color: '#00AB55', fontWeight: 'bold'}} > \n                            {value.name}\n                        </RouterLink>\n                    )\n                },\n            }\n        },\n        {\n            name: \"Email\",\n            options: {\n                filter: true,\n            }\n        }, \n        {\n            name: \"Mobile\",\n            options: {\n                filter: true,\n            }\n        },   \n        {\n            name: \"Joining Date\",\n            options: {\n                filter: true,\n            }\n        },  \n        {\n            name: \"Status\",\n            options: {\n                filter: true,\n            }\n        },\n             \n    ];\n\n    return (\n        <Page title=\"Dashboard | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n            <ThemeProvider theme={theme}>\n                <MUIDataTable\n                    data={data.data?.map(data => {\n                        return [\n                            data.pk,\n                            {name: data.Name, uid: data.pk},\n                            data.Email,\n                            data.Mobile,\n                            data.Doj,\n                            data.Status,\n                        ]\n                    })}\n                    columns={columns}\n                    options={options}\n                />\n            </ThemeProvider>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/EditCandHRAnalysis.js",["2071","2072","2073","2074","2075","2076","2077","2078","2079","2080","2081","2082"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem, Tooltip, Fade\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport { apiInstance } from 'src/utils/apiAuth';\n\n\nexport default function EditCandidateHRAnalysis(candData) {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n       \n    const [degreeData, setDegreeData] = useState([]);\n\n    const [ratingsData, setRatingsData] = useState([]);\n\n    const [disableValue, setDisableValue] = useState(false)\n  \n    useEffect(() => {\n        getNoticePeriodList();\n        getNonVerbalCuesList();\n        setOtherValues();\n    }, [])\n\n    const getNoticePeriodList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"education-degree/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const degreeObjects = getDegreeArray(response.data.data)\n                setDegreeData(degreeObjects)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const getNonVerbalCuesList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"non-verbal-cues/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const ratingObjects = getRatingsArray(response.data.data)\n                setRatingsData(ratingObjects)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n    \n    const getDegreeArray = (degreeObjects) =>\n        degreeObjects.map((obj) => ({\n            pk: obj.id,\n            degree_name: obj.degree_name\n        }));\n\n    \n    const getRatingsArray = (ratingObjects) =>\n        ratingObjects.map((obj) => ({\n            pk: obj.id,\n            rating_name: obj.rating_name,\n            sort_order: obj.sort_order,\n            is_active: obj.is_active,\n        }));\n\n    const updateCandHRAnalysis = (formValues) => {\n        var cand_id = candData?.candidateData?.hr_analysis?.candidate?.id ?? candData?.candidateData?.id\n\n        var apiData = {\n            \"candidate_id\": cand_id,\n            \"education_gap\": formValues.EduGap,\n            \"undergraduation\": formValues.UG,\n            \"higher_education_id\": formValues.HE,\n            \"highest_edu_score\": formValues.HighScore,\n            \"job_change_cnt\": formValues.JobChangeCnt,\n            \"avg_stay\": formValues.AvgStay,\n            \"job_change_cause\": formValues.ChangeReason,\n            \"exp_gap\": formValues.ExpGap,\n            \"long_stay\": parseInt(formValues.LongStay),\n            \"countries_visited\": formValues.CountryVisit,\n            \"onsite_prefer\": formValues.OnsitePrefer,\n            \"native_place\": formValues.NativePlace,\n            \"family_info\": formValues.FamilyInfo,\n            \"parents_profession\": formValues.ParentProfession,\n            \"marital_status\": formValues.MaritalStatus,\n            \"scratch_projects\": parseInt(formValues.ScratchPojects),\n            \"client_communication\": formValues.ClientCom,\n            \"project_location\": formValues.ProjectLoc,\n            \"long_pro_details\": formValues.LongProDetails,\n            \"project_role\": formValues.ProjectRR,\n            \"project_tools\": formValues.ProjectTools,\n            \"understand_capability\": formValues.UnderstandingAbility,\n            \"comm_skills\": formValues.CommSkills,\n            \"grammatical_errors\": formValues.GrammaticalMistakes,\n            \"conversation_skills\": formValues.CoversationSkills,\n            \"eye_contact_id\":formValues.EyeContact,\n            \"facial_id\": formValues.FacialExpressions,\n            \"posture_id\":formValues.Posture,\n            \"dressing_id\":formValues.Dressing,\n        }\n\n        apiInstance({\n            method: \"put\",\n            url: \"candidate-initial-analysis/\" + cand_id + '/',\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiData,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(0);\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n            });\n\n    }\n\n    const setOtherValues = () => \n    {\n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n            \n        if (user_role === 'BU_HEAD')\n        { setDisableValue(true)  }\n\n        else{ setDisableValue(false) }\n    }\n\n    const eye_title = <span>\n    <Typography color=\"inherit\">  Inappropriate:    </Typography>\n    <em>{\"No expression, no smile, no acknowledgement of what is being talked about.\"} </em> \n    <Typography color=\"inherit\"> Below Expectations: </Typography>\n    <em> {\"Minor intermittent nods, no expressions, no smile.\"} </em>\n    <Typography color=\"inherit\"> Meets Expectations: </Typography>\n    <em> {\"Decent constant smile, expressions while talking.\"}  </em>\n    <Typography color=\"inherit\"> Above Expectations: </Typography>\n    <em> {\"Lively expressions, vivacious, constant divine smile, giving a continuous positive vibe (wow effect).\"} </em>\n    </span>\n\n    const facial_title = <span>\n    <Typography color=\"inherit\"> Inappropriate: </Typography>\n    <em>{\"Doesn\\'t maintain eye-contact at all, looks down continuously OR will have constant stare at you.\"} </em> \n    <Typography color=\"inherit\"> Below Expectations: </Typography>\n    <em> {\"Maintains eye-contact when questions are asked, but does not maintain eye contact continuously during the answers.\"} </em>\n    <Typography color=\"inherit\"> Meets Expectations:  </Typography>\n    <em> {\"Starts off with minimum eye-contact but gradually increases the eye-contact by looking at you when answering.\"}  </em>\n    <Typography color=\"inherit\"> Above Expectations: </Typography>\n    <em> {\"Maintains healthy eye-contact during both questions and answers, looks away to think and then maintain eye contact again when answering.\"} \n    </em>\n    </span>\n\n    const posture_title = <span>\n    <Typography color=\"inherit\"> Inappropriate: </Typography>\n    <em>{\"Lean and relaxed shoulders, hands folded or beneath the seat area. Crosses the leg over the other.\"} </em> \n    <Typography color=\"inherit\"> Below Expectations: </Typography>\n    <em> {\"Keeps hands on the table during interview. Fidgets or moves the body continuously while sitting.\"} </em>\n    <Typography color=\"inherit\"> Meets Expectations: </Typography>\n    <em> {\"Decent constant smile, expressions while talking.\"} </em>\n    <Typography color=\"inherit\"> Above Expectations: </Typography>\n    <em> {\"Firm shoulders, few hand movements describing the answers, straight legs.\"} </em>\n    </span>\n\n    const dressing_title = <span>\n    <Typography color=\"inherit\">  Inappropriate: </Typography>\n    <em>{\"Casual, t-shirt, torn clothes, informal dresses.\"} </em> \n    <Typography color=\"inherit\"> Below Expectations: </Typography>\n    <em> {\"Creased shirt or top with jeans.\"} </em>\n    <Typography color=\"inherit\"> Meets Expectations: </Typography>\n    <em> {\"Semi-formal clothes, checkered shirt or top with formal pants, formal shoes.\"} </em>\n    <Typography color=\"inherit\"> Above Expectations: </Typography>\n    <em> {\"Formal clothes, shoes, ironed shirt, pants.\"} </em>\n    </span>\n\n    const CandidateSchema = Yup.object().shape({\n        EduGap: Yup.string()\n            .required(\"Education gap information is required\"),\n        UG: Yup.string()\n            .required(\"Undergraduation detail is required\"),\n        HighScore: Yup.string()\n            .required(\"High Score detail is required\"),\n        HE: Yup.string()\n            .required(\"Higher Education detail is required\"),\n        JobChangeCnt: Yup.number()\n            .min(0, \"Invalid Value\"),\n        AvgStay: Yup.number()\n            .min(0, \"Invalid Value\"),\n        ChangeReason: Yup.string()\n            .required(\"Job Change Reason is required\"),\n        ExpGap: Yup.string()\n            .required(\"Experience Gap detail is required\"),\n        LongStay: Yup.number()\n            .min(0, \"Invalid Value\"),\n        CountryVisit: Yup.string()\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this current location\"),\n        OnsitePrefer: Yup.string()\n            .required(\"Onsite visit preference is required\"),\n        NativePlace: Yup.string(),\n        ParentProfession: Yup.string()\n            .required(\"Parents profession information is required\"),\n        MaritalStatus: Yup.string()\n            .required(\"Marital status information is required\"),\n        FamilyInfo: Yup.string(),\n        ScratchPojects: Yup.number()\n            .min(0, \"Invalid Value\"),\n        ClientCom: Yup.string()\n            .required(\"Client communication information is required\"),\n        ProjectLoc: Yup.string(),\n        LongProDetails: Yup.string(),\n        ProjectRR: Yup.string()\n            .required(\"Project role & responsibilities information is required\"),\n        ProjectTools: Yup.string(),\n        UnderstandingAbility: Yup.string()\n            .required(\"Above information is required\"),\n        CommSkills: Yup.string()\n            .required(\"Above information is required\"),\n        GrammaticalMistakes: Yup.string()\n            .required(\"Above information is required\"),\n        CoversationSkills: Yup.string()\n            .required(\"Above information is required\"),\n        EyeContact: Yup.string(),\n        FacialExpressions: Yup.string(),\n        Posture: Yup.string(),\n        Dressing: Yup.string(),\n\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            CandID: candData?.candidateData?.hr_analysis?.candidate?.id ?? candData?.candidateData?.id,\n            FirstName: candData?.candidateData?.hr_analysis?.candidate?.first_name ?? candData?.candidateData?.user?.first_name,\n            LastName: candData?.candidateData?.hr_analysis?.candidate?.last_name ?? candData?.candidateData?.user?.last_name,\n            EduGap: candData?.candidateData?.hr_analysis?.education_gap ?? '',\n            UG: candData?.candidateData?.hr_analysis?.undergraduation ?? '',\n            HighScore: candData?.candidateData?.hr_analysis?.highest_edu_score ?? '',\n            HE: candData?.candidateData?.hr_analysis?.higher_education?.id ?? '',\n            JobChangeCnt: candData?.candidateData?.hr_analysis?.job_change_cnt ?? '',\n            AvgStay: candData?.candidateData?.hr_analysis?.avg_stay ?? '',\n            ChangeReason: candData?.candidateData?.hr_analysis?.job_change_cause ?? '',\n            ExpGap: candData?.candidateData?.hr_analysis?.exp_gap ?? '',\n            LongStay: candData?.candidateData?.hr_analysis?.long_stay ?? '',\n            CountryVisit: candData?.candidateData?.hr_analysis?.countries_visited ?? '',\n            OnsitePrefer: candData?.candidateData?.hr_analysis?.onsite_prefer ?? '',\n            NativePlace: candData?.candidateData?.hr_analysis?.native_place ?? '',\n            ParentProfession: candData?.candidateData?.hr_analysis?.parents_profession ?? '',\n            MaritalStatus: candData?.candidateData?.hr_analysis?.marital_status ?? '',\n            FamilyInfo: candData?.candidateData?.hr_analysis?.family_info ?? '',\n            ScratchPojects: candData?.candidateData?.hr_analysis?.scratch_projects ?? '',\n            ClientCom: candData?.candidateData?.hr_analysis?.client_communication ?? '',\n            ProjectLoc: candData?.candidateData?.hr_analysis?.project_location ?? '',\n            LongProDetails: candData?.candidateData?.hr_analysis?.long_pro_details ?? '',\n            ProjectRR: candData?.candidateData?.hr_analysis?.project_role ?? '',\n            ProjectTools: candData?.candidateData?.hr_analysis?.project_tools ?? '',\n            UnderstandingAbility: candData?.candidateData?.hr_analysis?.understand_capability ?? '',\n            CommSkills: candData?.candidateData?.hr_analysis?.comm_skills ?? '',\n            GrammaticalMistakes: candData?.candidateData?.hr_analysis?.grammatical_errors ?? '',\n            CoversationSkills: candData?.candidateData?.hr_analysis?.conversation_skills ?? '',\n            EyeContact: candData?.candidateData?.hr_analysis?.eye_contact?.id ?? '',\n            FacialExpressions: candData?.candidateData?.hr_analysis?.facial_expression?.id ?? '',\n            Posture: candData?.candidateData?.hr_analysis?.posture?.id ?? '',\n            Dressing:candData?.candidateData?.hr_analysis?.dressing?.id ?? '',\n        },\n        enableReinitialize: true,\n        validationSchema: CandidateSchema,\n        onSubmit: (values) => {\n            updateCandHRAnalysis(values)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, } = formik;\n\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2 }} variant=\"outlined\">\n                            <CardContent>\n                                <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Education brief check\n                                </Typography>\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"CandID\"\n                                            type=\"string\"\n                                            label=\"Candidate ID\"\n                                            disabled\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('CandID')}\n                                        />\n\n\n                                        <TextField\n                                            fullWidth\n                                            id='FirstName'\n                                            label=\"First Name\"\n                                            disabled\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('FirstName')}\n                                        />\n\n                                        <TextField\n                                            fullWidth\n                                            id='LastName'\n                                            label=\"Last Name\"\n                                            disabled\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('LastName')}\n                                        />\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Education Gap\"\n                                            type=\"string\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('EduGap')}\n\n                                            error={Boolean(touched.EduGap && errors.EduGap)}\n                                            helperText={touched.EduGap && errors.EduGap}\n\n                                        >\n                                            <MenuItem key=\"YES\" value=\"YES\">\n                                                YES\n                                            </MenuItem>\n                                            <MenuItem key=\"NO\" value=\"NO\">\n                                                NO\n                                            </MenuItem>\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"undergraduation\"\n                                            type=\"string\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('UG')}\n\n                                            error={Boolean(touched.UG && errors.UG)}\n                                            helperText={touched.UG && errors.UG}\n                                        >\n\n                                            <MenuItem key=\"12\" value=\"12\">\n                                                12\n                                            </MenuItem>\n                                            <MenuItem key=\"DIPLOMA\" value=\"DIPLOMA\">\n                                                DIPLOMA\n                                            </MenuItem>\n\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Highest Education Score\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('HighScore')}\n\n                                            error={Boolean(touched.HighScore && errors.HighScore)}\n                                            helperText={touched.HighScore && errors.HighScore}\n                                        >\n                                            <MenuItem key=\"> 75%\" value=\"> 75%\">\n                                                {'>'} 75%\n                                            </MenuItem>\n                                            <MenuItem key=\"60% - 75%\" value=\"60% - 75%\">\n                                                60% - 75%\n                                            </MenuItem>\n                                            <MenuItem key=\"< 60%\" value=\"< 60%\">\n                                                {'<'} 60%\n                                            </MenuItem>\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"higher_education\"\n                                            type=\"string\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('HE')}\n\n                                            error={Boolean(touched.HE && errors.HE)}\n                                            helperText={touched.HE && errors.HE}\n                                        >\n                                            {degreeData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.degree_name}\n                                                </MenuItem>\n                                            ))}\n\n                                        </TextField>\n                                    </Stack>\n\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n                                <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Experience Analysis\n                                </Typography>\n\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"No Of Job Change\"\n                                            type=\"int\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('JobChangeCnt')}\n\n                                            error={Boolean(touched.JobChangeCnt && errors.JobChangeCnt)}\n                                            helperText={touched.JobChangeCnt && errors.JobChangeCnt}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Average Stay\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('AvgStay')}\n\n                                            error={Boolean(touched.AvgStay && errors.AvgStay)}\n                                            helperText={touched.AvgStay && errors.AvgStay}\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Job Change Reason\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('ChangeReason')}\n\n                                            error={Boolean(touched.ChangeReason && errors.ChangeReason)}\n                                            helperText={touched.ChangeReason && errors.ChangeReason}\n                                        >\n                                            <MenuItem key=\"VAGUE\" value=\"VAGUE\">\n                                                VAGUE\n                                            </MenuItem>\n                                            <MenuItem key=\"MONEY\" value=\"MONEY\">\n                                                MONEY\n                                            </MenuItem>\n                                            <MenuItem key=\"VALID\" value=\"VALID\">\n                                                VALID\n                                            </MenuItem>\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Gap In Experience\"\n                                            type=\"string\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('ExpGap')}\n\n                                            error={Boolean(touched.ExpGap && errors.ExpGap)}\n                                            helperText={touched.ExpGap && errors.ExpGap}\n                                        >\n\n                                            <MenuItem key=\"YES\" value=\"YES\">\n                                                YES\n                                            </MenuItem>\n                                            <MenuItem key=\"NO\" value=\"NO\">\n                                                NO\n                                            </MenuItem>\n\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Longest Stay in a company (Years)\"\n                                            type=\"number\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('LongStay')}\n\n                                            error={Boolean(touched.LongStay && errors.LongStay)}\n                                            helperText={touched.LongStay && errors.LongStay}\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Countries Visited\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('CountryVisit')}\n\n                                            error={Boolean(touched.CountryVisit && errors.CountryVisit)}\n                                            helperText={touched.CountryVisit && errors.CountryVisit}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Open to Onsite\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('OnsitePrefer')}\n\n                                            error={Boolean(touched.OnsitePrefer && errors.OnsitePrefer)}\n                                            helperText={touched.OnsitePrefer && errors.OnsitePrefer}\n                                        >\n\n                                            <MenuItem key=\"SHORT TERM\" value=\"SHORT TERM\">\n                                                SHORT TERM\n                                            </MenuItem>\n                                            <MenuItem key=\"LONG TERM\" value=\"LONG TERM\">\n                                                LONG TERM\n                                            </MenuItem>\n                                            <MenuItem key=\"NO\" value=\"NO\">\n                                                NO\n                                            </MenuItem>\n\n                                        </TextField>\n\n                                    </Stack>\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n\n                                <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Demographics\n                                </Typography>\n\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Native Place\"\n                                            type=\"string\"\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('NativePlace')}\n\n                                            error={Boolean(touched.NativePlace && errors.NativePlace)}\n                                            helperText={touched.NativePlace && errors.NativePlace}\n                                        >\n\n                                        </TextField>\n                                        <Tooltip\n                                            title=\"Prefer-1 : Doctor/CA/GOVT Job/Teacher/Defence Prefer-2 : Pvt Job/Farmer\"\n                                            placement=\"top-start\"\n                                            TransitionComponent={Fade}\n                                            TransitionProps={{ timeout: 100 }}\n                                            arrow\n                                        >\n                                            <TextField\n                                                fullWidth\n                                                name=\"ParentProff\"\n                                                label=\"Parent's Profession\"\n                                                type=\"string\"\n                                                select\n                                                required\n                                                disabled={disableValue}\n\n                                                {...getFieldProps('ParentProfession')}\n\n                                                error={Boolean(touched.ParentProfession && errors.ParentProfession)}\n                                                helperText={touched.ParentProfession && errors.ParentProfession}\n                                            >\n\n                                                <MenuItem key=\"PREFER 1\" value=\"PREFER 1\">\n                                                    PREFER 1\n                                                </MenuItem>\n                                                <MenuItem key=\"PREFER 2\" value=\"PREFER 2\">\n                                                    PREFER 2\n                                                </MenuItem>\n                                                <MenuItem key=\"OTHER\" value=\"OTHER\">\n                                                    OTHER\n                                                </MenuItem>\n\n                                            </TextField>\n                                        </Tooltip>\n\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Marital Status\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('MaritalStatus')}\n\n                                            error={Boolean(touched.MaritalStatus && errors.MaritalStatus)}\n                                            helperText={touched.MaritalStatus && errors.MaritalStatus}\n                                        >\n\n                                            <MenuItem key=\"SINGLE\" value=\"SINGLE\">\n                                                SINGLE\n                                            </MenuItem>\n                                            <MenuItem key=\"MARRIED\" value=\"MARRIED\">\n                                                MARRIED\n                                            </MenuItem>\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"FamilyInfo\"\n                                            label=\"Family Info. (Parents Occupation and Details)\"\n                                            multiline\n                                            rows={4}\n                                            disabled={disableValue}\n\n                                            {...getFieldProps(\"FamilyInfo\")}\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n\n                                <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Communication Details\n                                </Typography>\n\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"UnderstandingAbility\"\n                                            type=\"string\"\n                                            label=\"Is the person capable of understanding questions and responding appropriately ?\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('UnderstandingAbility')}\n\n                                            error={Boolean(touched.UnderstandingAbility && errors.UnderstandingAbility)}\n                                            helperText={touched.UnderstandingAbility && errors.UnderstandingAbility}\n                                        >\n\n                                            <MenuItem key=\"YES\" value=\"YES\">\n                                                YES\n                                            </MenuItem>\n                                            <MenuItem key=\"NO\" value=\"NO\">\n                                                NO\n                                            </MenuItem>\n\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"CommSkills\"\n                                            type=\"string\"\n                                            label=\"Is the person using the correct voice modulation, \n                                                  speaking with confidence and energy, and are you explaining clearly ?\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('CommSkills')}\n\n                                            error={Boolean(touched.CommSkills && errors.CommSkills)}\n                                            helperText={touched.CommSkills && errors.CommSkills}\n                                        >\n\n                                            <MenuItem key=\"YES\" value=\"YES\">\n                                                YES\n                                            </MenuItem>\n                                            <MenuItem key=\"NO\" value=\"NO\">\n                                                NO\n                                            </MenuItem>\n\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"GrammaticalMistakes\"\n                                            type=\"string\"\n                                            label=\"Making the fewest grammatical errors ?\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('GrammaticalMistakes')}\n\n                                            error={Boolean(touched.GrammaticalMistakes && errors.GrammaticalMistakes)}\n                                            helperText={touched.GrammaticalMistakes && errors.GrammaticalMistakes}\n                                        >\n\n                                            <MenuItem key=\"LEAST\" value=\"LEAST\">\n                                                LEAST\n                                            </MenuItem>\n                                            <MenuItem key=\"MODERATE\" value=\"MODERATE\">\n                                                MODERATE\n                                            </MenuItem>\n                                            <MenuItem key=\"TOO MANY\" value=\"TOO MANY\">\n                                                TOO MANY\n                                            </MenuItem>\n\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"CoversationSkills\"\n                                            type=\"string\"\n                                            label=\"Is the person able to have a conversation with someone other than work related ? Able to connect ?\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('CoversationSkills')}\n\n                                            error={Boolean(touched.CoversationSkills && errors.CoversationSkills)}\n                                            helperText={touched.CoversationSkills && errors.CoversationSkills}\n                                        >\n\n                                            <MenuItem key=\"YES\" value=\"YES\">\n                                                YES\n                                            </MenuItem>\n                                            <MenuItem key=\"NO\" value=\"NO\">\n                                                NO\n                                            </MenuItem>\n\n                                        </TextField>\n\n                                    </Stack>\n\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n\n                                <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Project Details(for Tech)\n                                </Typography>\n\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"ScratchPojects\"\n                                            type=\"number\"\n                                            label=\"Number of projects from scratch\"\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('ScratchPojects')}\n                                        />\n\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"ClientCom\"\n                                            type=\"string\"\n                                            label=\"Client communication\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('ClientCom')}\n\n                                            error={Boolean(touched.ClientCom && errors.ClientCom)}\n                                            helperText={touched.ClientCom && errors.ClientCom}\n                                        >\n\n                                            <MenuItem key=\"CHAT\" value=\"CHAT\">\n                                                CHAT\n                                            </MenuItem>\n                                            <MenuItem key=\"EMAIL\" value=\"EMAIL\">\n                                                EMAIL\n                                            </MenuItem>\n                                            <MenuItem key=\"HIGHLY INVOLVED\" value=\"HIGHLY INVOLVED\">\n                                                HIGHLY INVOLVED\n                                            </MenuItem>\n                                            <MenuItem key=\"NOT INVOLVED\" value=\"NOT INVOLVED\">\n                                                NOT INVOLVED\n                                            </MenuItem>\n\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            id='ProjectLoc'\n                                            label=\"Working on projects from which countries\"\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('ProjectLoc')}\n                                        />\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"LongProDetails\"\n                                            type=\"string\"\n                                            label=\"Longest project details\"\n                                            multiline\n                                            rows={2}\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('LongProDetails')}\n                                        />\n\n\n                                        <TextField\n                                            fullWidth\n                                            id='ProjectRR'\n                                            label=\"Roles &amp; responsibility in project\"\n                                            required\n                                            multiline\n                                            rows={2}\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('ProjectRR')}\n\n                                            error={Boolean(touched.ProjectRR && errors.ProjectRR)}\n                                            helperText={touched.ProjectRR && errors.ProjectRR}\n                                        />\n\n                                        <TextField\n                                            fullWidth\n                                            id='ProjectTools'\n                                            label=\"Tools used in the Project\"\n                                            multiline\n                                            rows={2}\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('ProjectTools')}\n                                        />\n\n                                    </Stack>\n\n                                </Stack>\n                            </CardContent>\n\n                            <CardContent>\n\n                                <Typography variant=\"h6\" color=\"#aaaa55\" align=\"center\" fontStyle=\"italic\" gutterBottom>\n                                    Non Verbal Cues\n                                </Typography>\n\n                            </CardContent>\n\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <Tooltip\n                                            title={eye_title}\n                                            placement=\"top-start\"\n                                            TransitionComponent={Fade}\n                                            TransitionProps={{ timeout: 50 }}\n                                            arrow\n                                        >\n\n                                        <TextField\n                                            fullWidth\n                                            id=\"eye-contact\"\n                                            type=\"string\"\n                                            label=\"Eye Contact\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n\n                                            {...getFieldProps('EyeContact')}\n\n                                            error={Boolean(touched.EyeContact && errors.EyeContact)}\n                                            helperText={touched.EyeContact && errors.EyeContact}\n                                        >\n                                            {ratingsData.map((option) => (\n                                                <MenuItem key={option.pk} value={option.pk}>\n                                                    {option.rating_name}\n                                                </MenuItem>\n                                            ))}\n\n                                        </TextField>\n\n                                        </Tooltip>\n\n                                        <Tooltip\n                                            title={facial_title}\n                                            placement=\"top-start\"\n                                            TransitionComponent={Fade}\n                                            TransitionProps={{ timeout: 50 }}\n                                            arrow\n                                        >\n                                            <TextField\n                                                fullWidth\n                                                id=\"facial-expressions\"\n                                                type=\"string\"\n                                                label=\"Facial Expressions\"\n                                                select\n                                                required\n                                                disabled={disableValue}\n\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n\n                                                {...getFieldProps('FacialExpressions')}\n\n                                                error={Boolean(touched.FacialExpressions && errors.FacialExpressions)}\n                                                helperText={touched.FacialExpressions && errors.FacialExpressions}\n                                            >\n                                            \n                                                {ratingsData.map((option) => (\n                                                    <MenuItem key={option.pk} value={option.pk}>\n                                                        {option.rating_name}\n                                                    </MenuItem>\n                                                ))}\n\n                                            </TextField>\n                                        </Tooltip>\n\n                                        <Tooltip\n                                            title={posture_title}\n                                            placement=\"top-start\"\n                                            TransitionComponent={Fade}\n                                            TransitionProps={{ timeout: 50 }}\n                                            arrow\n                                        >\n                                            <TextField\n                                                fullWidth\n                                                id='posture'\n                                                label=\"Posture\"\n                                                select\n                                                required\n                                                disabled={disableValue}\n\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n\n                                                {...getFieldProps('Posture')}\n\n                                                error={Boolean(touched.Posture && errors.Posture)}\n                                                helperText={touched.Posture && errors.Posture}\n                                            >\n\n                                                {ratingsData.map((option) => (\n                                                    <MenuItem key={option.pk} value={option.pk}>\n                                                        {option.rating_name}\n                                                    </MenuItem>\n                                                ))}\n\n                                            </TextField>\n                                        </Tooltip>\n\n                                        <Tooltip\n                                            title={dressing_title}\n                                            placement=\"top-start\"\n                                            TransitionComponent={Fade}\n                                            TransitionProps={{ timeout: 50 }}\n                                            arrow\n                                        >\n\n                                            <TextField\n                                                fullWidth\n                                                id='dressing'\n                                                label=\"Dressing\"\n                                                select\n                                                required\n                                                disabled={disableValue}\n\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n\n                                                {...getFieldProps('Dressing')}\n\n                                                error={Boolean(touched.Dressing && errors.Dressing)}\n                                                helperText={touched.Dressing && errors.Dressing}\n                                            >\n                                            \n                                                {ratingsData.map((option) => (\n                                                    <MenuItem key={option.pk} value={option.pk}>\n                                                        {option.rating_name}\n                                                    </MenuItem>\n                                                ))}\n\n                                            </TextField>\n\n                                        </Tooltip>\n\n                                    </Stack>\n                                </Stack>\n                            </CardContent>\n\n                        </Card>\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }} />\n\n                        <LoadingButton\n                            fullWidth\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            disabled={disableValue}\n                        >\n                            Update Profile\n                       </LoadingButton>\n\n                    </Form>\n                </FormikProvider>\n            </Container >\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppCandidatesInterviewed.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppCandidatesSelected.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppJobApplications.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppJobListed.js",[],"/home/raj/Desktop/resumeX/resumeX/src/layouts/AuthLayout.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/jobs/JobApplyForm.js",["2083","2084","2085","2086","2087","2088"],"import React, { useEffect, useState } from \"react\";\nimport * as Yup from \"yup\";\nimport Page from \"../../../components/Page\";\nimport { useFormik, Form, FormikProvider, ErrorMessage, } from \"formik\";\nimport { useNavigate } from \"react-router-dom\";\n// material\nimport { Button, Typography, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Stack, TextField, MenuItem, InputLabel, Select, OutlinedInput, Container } from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\n\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport { apiInstance } from \"src/utils/apiAuth\";\n\n// ----------------------------------------------------------------------\n\nexport default function JobApplyForm() {\n\n  var techListData;\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  //Get Technology List\n\n  const [TechData, setTechData] = useState([]);\n\n  const getTechArray = (technoData) =>\n  technoData.map((technoObj) => ({\n      pk: technoObj.id,\n      technologyName: technoObj.technology_name\n  }));\n\n  const getTechList = () => {\n    apiInstance({\n        method: \"get\",\n        url: \"technology/\",\n        headers: {\n          Authorization: \"token \" + localStorage.getItem('candidateToken'),\n        }\n    })\n        .then(function (response) {\n            techListData = getTechArray(response.data.data)\n            setTechData(techListData)\n        })\n        .catch(function (error) {\n            enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'error',\n                autoHideDuration: 2000,\n            });\n\n        });\n}\n\n\n  // dialog open/close state\n  const [confirmOpen, setConfirmOpen] = React.useState(false)\n\n  const candToken = localStorage.getItem(\"candidateToken\");\n\n  const navigate = useNavigate();\n\n  const expReg = /^[0-9]{1,2}$/;\n\n  const months = [\n    {\n      value: '00',\n      label: '0',\n    },\n    {\n      value: '01',\n      label: '1',\n    },\n    {\n      value: '02',\n      label: '2',\n    },\n    {\n      value: '03',\n      label: '3',\n    },\n    {\n      value: '04',\n      label: '4',\n    },\n    {\n      value: '05',\n      label: '5',\n    },\n    {\n      value: '06',\n      label: '6',\n    },\n    {\n      value: '07',\n      label: '7',\n    },\n    {\n      value: '08',\n      label: '8',\n    },\n    {\n      value: '09',\n      label: '9',\n    },\n    {\n      value: '10',\n      label: '10',\n    },\n    {\n      value: '11',\n      label: '11',\n    },\n  ];\n\n  const [locData, setlocData] = useState([]);\n\n  const [file, setFile] = useState(null);\n\n  const [noticePeriodData, setNoticePeriodData] = useState([]);\n\n  useEffect(() => {\n    getLocationsList();\n    getNoticePeriodList();\n    getTechList();\n  }, [])\n\n  const handleFileUpload= (event) => {\n    const resumeFile=event.target.files[0]\n    formik.setFieldValue(\"resume\", resumeFile);\n    setFile(resumeFile)\n  };\n\n  const getLocationsList = () => {\n\n    apiInstance({\n      method: \"get\",\n      url: \"office-locations/\",\n      headers: {\n        Authorization: \"token \" + localStorage.getItem('candidateToken'),\n      }\n    })\n      .then(function (response) {\n          const locData = getDataArray(response.data.data)\n          setlocData(locData)          \n      })\n      .catch(function (error) {\n        enqueueSnackbar('Something went wrong. Please try after sometime.', {\n          anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n            variant: 'error',\n            autoHideDuration: 2000,  \n          });\n  \n      });\n\n  }\n\n  const getNoticePeriodList = () => {\n\n    apiInstance({\n        method: \"get\",\n        url: \"notice-period/\",\n        headers: {\n            Authorization: \"token \" + localStorage.getItem('candidateToken'),\n        }\n    })\n        .then(function (response) {\n            const noticeData = getNoticePeriodArray(response.data.data)\n            setNoticePeriodData(noticeData)\n        })\n        .catch(function (error) {\n            enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'error',\n                autoHideDuration: 2000,\n            });\n        });\n}\n\n  const getDataArray = (locData) =>\n  locData.map((locObj) => ({\n      pk: locObj.id,\n      office_loc: locObj.office_location,\n      loc_status: locObj.is_active,\n    }));\n\n  \n  const getNoticePeriodArray = (NPData) =>\n    NPData.map((NPObj) => ({\n        pk: NPObj.id,\n        notice_period: NPObj.notice_period\n    }));\n\n\n  const JobApplyFormSchema = Yup.object().shape({\n    TotalExp: Yup.string()\n    .matches(/^[0-9]{1,2}[.][0-9]{1}$/, \"Invalid Input\")\n    .required(\"Total Experience required\"),\n    noticePeriod: Yup.string()\n                     .required(\"Notice period is required\"),\n    currentLoc: Yup.string()\n                   .required(\"Current location is required\"),\n    resume: Yup.mixed()\n               .required(\"Resume is required\"),\n    Technology: Yup.array()\n              .min(1, \"Technology is required\"),\n    preferLoc: Yup.array()\n                  .min(1, \"Prefer Location is required\"),\n    CurrentCtc: Yup.number()\n                  .required(\"Current CTC Is required\"),\n    ExpectedCtc: Yup.number()\n                  .required(\"Expected CTC Is required\"),    \n  });\n\n\n  const callCandidateJobApplyAPI = async (candJobReq) => {\n    var bodyFormData = new FormData();\n\n    bodyFormData.append('resume_file', file);\n    bodyFormData.append(\"job_id\", localStorage.getItem(\"SelectedJobID\"));\n    bodyFormData.append(\"current_ctc\", candJobReq.CurrentCtc);\n    bodyFormData.append(\"expected_ctc\", candJobReq.ExpectedCtc);\n    bodyFormData.append(\"total_experience\", candJobReq.TotalExp);\n    bodyFormData.append(\"technology_id\", candJobReq.Technology);\n    bodyFormData.append(\"current_location\", candJobReq.currentLoc);\n    bodyFormData.append(\"preferred_location_id\", candJobReq.preferLoc);\n    bodyFormData.append(\"notice_period\", candJobReq.noticePeriod);  \n    \n    await apiInstance({\n      method: \"post\",\n      url: \"job-application/\",\n      headers: {\n        Authorization: \"token \" + candToken,\n        'Content-Type': \"multipart/form-data\"\n      },\n      data: bodyFormData,\n    })\n      .then(async function (response) {\n        if (response.status === 200) {\n          enqueueSnackbar(\"Details Sent Successfully !\", {\n            anchorOrigin: {\n              vertical: \"top\",\n              horizontal: \"right\",\n            },\n            variant: \"success\",\n            autoHideDuration: 1500,\n          });\n\n          let JobAppDetails = response.data.data;\n          localStorage.setItem(\"thisJobAppJobName\", JobAppDetails?.requisition?.job_name)\n          localStorage.setItem(\"thisJobAppSkills\", JobAppDetails?.requisition?.tech_stack?.tech_stack_name)\n          localStorage.setItem(\"thisJobAppExp\", JobAppDetails?.requisition?.experience)\n          localStorage.setItem(\"thisJobAppLoc\", JobAppDetails?.requisition?.office_location)\n          \n          \n          localStorage.setItem(\"candIsInterviewed\", true)\n          navigate(\"/dashboard/jobs/openings/\", { replace: true });\n          setConfirmOpen(true)\n        }\n      })\n      .catch(function (error) {\n        enqueueSnackbar(\"Something went wrong. Please try after sometime. \", {\n          anchorOrigin: {\n            vertical: \"top\",\n            horizontal: \"right\",\n          },\n          variant: \"error\",\n          autoHideDuration: 2000,\n        });\n\n        setSubmitting(false);\n      });\n  };\n\n  const calculateExpHike = e => {   \n    let present_ctc = values.CurrentCtc\n    let demand_ctc = e.target.value\n\n    let hike = ((demand_ctc*100)/present_ctc)- 100\n    \n    setFieldValue(\"Exp_Hike\", Math.round(hike))\n}\n  \n  const formik = useFormik({\n    initialValues: {\n      TotalExp: \"\",\n      noticePeriod: \"\",\n      currentLoc: \"\",\n      Technology: [],\n      resume: \"\",\n      preferLoc: [],\n      CurrentCtc: '',\n      ExpectedCtc: '',\n    },\n\n    validationSchema: JobApplyFormSchema,\n\n    onSubmit: (formValues) => {\n      callCandidateJobApplyAPI(formValues);\n    },\n\n  });\n\n  const { errors, touched, values, setFieldValue,  handleSubmit, isSubmitting,  getFieldProps,setSubmitting, handleChange } = formik;\n\n  return (\n    <Page>\n      <Container>\n      <Typography variant=\"h6\" sx={{ mb: 3 }} align=\"center\"> Job Apply Form: {localStorage.getItem(\"SelectedJobName\")} </Typography>\n        <Dialog open={confirmOpen} onClose={() => setConfirmOpen(false)}>\n        <DialogTitle>\n            Job Applied Successfully !\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Your application has been submitted.<br></br>\n              Our HR team will verify and contact you for further discussion.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button size=\"large\" autoFocus href=\"/dashboard/app\">\n              OK\n            </Button>\n          </DialogActions>\n        </Dialog>\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={1.8}>\n          <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n            <TextField\n              fullWidth\n              required\n              label=\"Total Experience\"\n              placeholder=\"Ex: 1.6 - 1 year 6 months, 0.0 - Fresher\"\n\n              {...getFieldProps('TotalExp')}\n\n              error={Boolean(touched.TotalExp && errors.TotalExp)}\n              helperText={touched.TotalExp && errors.TotalExp}\n            >\n            </TextField>\n            \n            <TextField\n                fullWidth\n                required\n                id=\"NoticePeriod\"\n                type=\"number\"\n                label=\"Notice Period\"\n                select\n\n                {...getFieldProps(\"noticePeriod\")}\n\n                error={Boolean(touched.noticePeriod && errors.noticePeriod)}\n                helperText={touched.noticePeriod && errors.noticePeriod}\n              >\n              {noticePeriodData.map((option) => (\n                  <MenuItem key={option.pk} value={option.pk}>\n                      {option.notice_period}\n                  </MenuItem>\n              ))}\n              </TextField>\n          </Stack>\n\n          <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n            <TextField\n              fullWidth\n              required\n              label=\"Current Location\"\n              {...getFieldProps(\"currentLoc\")}\n              error={Boolean(touched.currentLoc && errors.currentLoc)}\n              helperText={touched.currentLoc && errors.currentLoc}\n            />\n\n            <TextField\n              fullWidth\n              required\n              id=\"PreferLoc\"\n              label=\"Prefer Location\"\n              select\n\n              SelectProps={{\n                multiple: true,\n                value: formik.values.preferLoc,\n                onChange: (selectedOption) => handleChange(\"preferLoc\")(selectedOption),\n\n            }}\n              {...getFieldProps(\"preferLoc\")}\n              error={Boolean(touched.preferLoc && errors.preferLoc)}\n              helperText={touched.preferLoc && errors.preferLoc}\n            >\n              {locData.map((option) => (\n                <MenuItem key={option.pk} value={option.pk}>\n                  {option.office_loc}\n                </MenuItem>\n              ))}\n            </TextField>\n          </Stack>\n\n          <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n            <TextField\n              fullWidth\n              required\n              label=\"Current CTC\"\n              placeholder=\"450000\"\n              type=\"number\"\n\n              {...getFieldProps('CurrentCtc')}\n\n              error={Boolean(touched.CurrentCtc && errors.CurrentCtc)}\n              helperText={touched.CurrentCtc && errors.CurrentCtc}\n          >\n          </TextField>\n\n          <TextField\n              fullWidth\n              required\n              label=\"Expected CTC\"\n              placeholder=\"550000\"\n              type=\"number\"\n\n              onInput={calculateExpHike}\n\n              {...getFieldProps('ExpectedCtc')}\n\n              error={Boolean(touched.ExpectedCtc && errors.ExpectedCtc)}\n              helperText={touched.ExpectedCtc && errors.ExpectedCtc}\n          >\n          </TextField>\n\n          {/* <TextField\n              fullWidth\n              label=\"Expected Hike (in %)\"\n              disabled\n              InputLabelProps={{ shrink: true, }}\n\n              {...getFieldProps('Exp_Hike')}\n\n              error={Boolean(touched.Exp_Hike && errors.Exp_Hike)}\n              helperText={touched.Exp_Hike && errors.Exp_Hike}\n          >\n          </TextField> */}\n        </Stack>\n\n          <TextField\n            fullWidth\n            required\n            id=\"Technology\"\n            label=\"Technology\"\n            select\n\n            SelectProps={{\n                multiple: true,\n                value: formik.values.Technology,\n                onChange: (selectedOption) => handleChange(\"Technology\")(selectedOption)\n            }} \n            {...getFieldProps('Technology')}\n            error={Boolean(touched.Technology && errors.Technology)}\n            helperText={touched.Technology && errors.Technology}\n\n        >\n            {TechData.map((option) => (\n                <MenuItem key={option.pk} value={option.pk}>\n                    {option.technologyName}\n                </MenuItem>\n            ))}\n        </TextField> \n        \n        <InputLabel id=\"resume-upload-label\"> Upload Resume </InputLabel>\n\n          <input\n            required\n            id=\"resume\"\n            name=\"resume\"\n            type=\"file\"\n            className=\"form-control\"\n            accept=\".pdf\"\n            onChange={handleFileUpload}\n          />\n\n          <ErrorMessage name=\"resume\">\n            {(msg) => <span style={{ color: \"red\" }}>{msg}</span>}\n          </ErrorMessage>\n\n          <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}/>\n          <LoadingButton\n            fullWidth\n            size=\"large\" \n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n          >\n            Apply\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n    </Container>\n    </Page>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/noticePeriod/NoticePeriod.js",["2089","2090","2091","2092","2093"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function NoticePeriod() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Notice Period\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var bid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/notice-period/edit/${bid}`}\n                            state={{fromPage: \"notice-period\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [NoticePeriodData, setNoticePeriodData] = useState([])\n    const getNoticePeriod = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/notice-period/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setNoticePeriodData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getNoticePeriod()\n    }, [])\n\n    return (\n        <Page title=\"Notice Period | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Notice Period</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/notice-period/add-notice-period/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Notice Period \n                            </Button>\n                        }\n\n                        data={NoticePeriodData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.notice_period,\n                                data?.created,\n                                data?.modified,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidateStatus/EditCandidateStatus.js",["2094","2095"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditCandidateStatus() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores Candidate Status information\n    const [candidateStatusInfo, setCandidateStatusInfo] = useState({});\n\n\n    const getcandidateStatusInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"candidate-status/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setCandidateStatusInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getcandidateStatusInfo();\n    }, [])\n\n    const callEditCandidateStatusAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"candidate-status/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidate-status\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const CandidateStatusSchema = Yup.object().shape({\n        CandidateStatusName: Yup.string()\n            .required(\"Candidate Status name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            CandidateStatusName: candidateStatusInfo?.status ?? '',\n            is_active: candidateStatusInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: CandidateStatusSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"status\": values.CandidateStatusName,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit Candidate Status API\n            callEditCandidateStatusAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Candidate Status\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/candidate-status\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Candidate Status\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Candidate Status\"\n\n                                            {...getFieldProps('CandidateStatusName')}\n\n                                            error={Boolean(touched.CandidateStatusName && errors.CandidateStatusName)}\n                                            helperText={touched.CandidateStatusName && errors.CandidateStatusName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Status Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Update Candiate Status\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/educationalDegree/EditEducationDegree.js",["2096","2097","2098","2099","2100","2101"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditEducationalDegree() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores EducationalDegree information\n    const [EducationalDegreeInfo, setEducationalDegreeInfo] = useState({});\n\n\n    const getEducationalDegreeInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"education-degree/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setEducationalDegreeInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getEducationalDegreeInfo();\n    }, [])\n\n    const callEditEducationalDegreeAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"education-degree/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/education-degree\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const EducationalDegreeSchema = Yup.object().shape({\n        EducationalDegreeName: Yup.string()\n            .required(\"Educational Degree name required\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            EducationalDegreeName: EducationalDegreeInfo?.degree_name ?? '',        \n        },\n        enableReinitialize: true,\n        validationSchema: EducationalDegreeSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"degree_name\": values.EducationalDegreeName,\n            }\n\n            // call Edit EducationalDegree API\n            callEditEducationalDegreeAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Educational Degree\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/education-degree\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Educational Degree\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Educational Degree\"\n\n                                            {...getFieldProps('EducationalDegreeName')}\n\n                                            error={Boolean(touched.EducationalDegreeName && errors.EducationalDegreeName)}\n                                            helperText={touched.EducationalDegreeName && errors.EducationalDegreeName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update Educational Degree\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/educationalDegree/AddEducationalDegreeForm.js",["2102","2103","2104","2105","2106","2107"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddEducationalDegreeForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddEducationalDegreeAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"education-degree/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/education-degree\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const EducationalDegreeSchema = Yup.object().shape({\n        EducationalDegreeName: Yup.string()\n            .required(\"Educational Degree name required\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            EducationalDegreeName: '',\n            \n        },\n        validationSchema: EducationalDegreeSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"degree_name\": values.EducationalDegreeName,\n            }\n\n            // call create EducationalDegree API\n            callAddEducationalDegreeAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Educational Degree\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/education-degree\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Educational Degree\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Educational Degree Name\"\n\n                                            {...getFieldProps('EducationalDegreeName')}\n\n                                            error={Boolean(touched.EducationalDegreeName && errors.EducationalDegreeName)}\n                                            helperText={touched.EducationalDegreeName && errors.EducationalDegreeName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Educational Degree\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/educationalDegree/EducationalDegree.js",["2108","2109","2110","2111","2112"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function EducationalDegree() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Educational Degree\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var bid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/education-degree/edit/${bid}`}\n                            state={{fromPage: \"education-degree\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [EducationalDegreeData, setEducationalDegreeData] = useState([])\n    const getEducationalDegree = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/education-degree/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setEducationalDegreeData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getEducationalDegree()\n    }, [])\n\n    return (\n        <Page title=\"Educational Degree | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Educational Degree</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/education-degree/add-education-degree/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Educational Degree \n                            </Button>\n                        }\n\n                        data={EducationalDegreeData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.degree_name,\n                                data?.created,\n                                data?.modified,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionStatus/EditRequisitionStatus.js",["2113","2114"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditRequisitionStatus() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores Requisition Status information\n    const [RequisitionStatusInfo, setRequisitionStatusInfo] = useState({});\n\n\n    const getRequisitionStatusInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"requisition-status/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setRequisitionStatusInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getRequisitionStatusInfo();\n    }, [])\n\n    const callEditRequisitionStatusAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"requisition-status/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/requisition-status\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const RequisitionStatusSchema = Yup.object().shape({\n        RequisitionStatusName: Yup.string()\n            .required(\"Requisition Status name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            RequisitionStatusName: RequisitionStatusInfo?.requisition_status ?? '',\n            is_active: RequisitionStatusInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: RequisitionStatusSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"requisition_status\": values.RequisitionStatusName,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit Requisition Status API\n            callEditRequisitionStatusAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Requisition Status\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/requisition-status\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Requisition Status\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Requisition Status\"\n\n                                            {...getFieldProps('RequisitionStatusName')}\n\n                                            error={Boolean(touched.RequisitionStatusName && errors.RequisitionStatusName)}\n                                            helperText={touched.RequisitionStatusName && errors.RequisitionStatusName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update Requisition Status\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionStatus/AddRequisitionStatusForm.js",["2115","2116","2117"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddRequisitionStatusForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddRequisitionStatusAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"requisition-status/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/requisition-status\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const RequisitionStatusSchema = Yup.object().shape({\n        RequisitionStatusName: Yup.string()\n            .required(\"Requisition Status name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            RequisitionStatusName: '',\n            is_active: '',\n            \n        },\n        validationSchema: RequisitionStatusSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"requisition_status\": values.RequisitionStatusName,\n                \"is_active\": values.is_active\n            }\n\n            // call create RequisitionStatus API\n            callAddRequisitionStatusAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Requisition Status\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/requisition-status\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Requisition Status\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Requisition Status Name\"\n\n                                            {...getFieldProps('RequisitionStatusName')}\n\n                                            error={Boolean(touched.RequisitionStatusName && errors.RequisitionStatusName)}\n                                            helperText={touched.RequisitionStatusName && errors.RequisitionStatusName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack>\n                                       \n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Active? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Requisition Status\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStackTechnolgies/TechStackTechnologies.js",["2118","2119","2120","2121","2122"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport Chip from '@mui/material/Chip';\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function TechStackTechnologies() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var tid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/techstack-technologies/edit/${tid}`}\n                            state={{fromPage: \"techstack-technologies\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Technologies\",\n            options: {\n                filter: false,\n                setCellProps: () => ({\n                    style: {\n                      whiteSpace: \"wrap\",\n                      background: \"white\",\n                      maxWidth: \"500px\",\n                    } }),\n                customBodyRender: (value, tableMeta, updateValue) => {\n                        return value.map(item => {return (<Chip key= {item.id} \n                            label={item.technology_name} \n                            color='info' variant='outlined' \n                            style={{marginLeft:5, marginTop:10}}/>)})\n                    },\n            }\n        },\n        {\n            name: \"TechStack\",\n            options: {\n                filter: false,\n                customFilterListOptions: { render: v => `TechStack: ${v}` },\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [TechStackTechnolgiesData, setTechStackTechnolgiesData] = useState([])\n    const getTechStackTechnolgies = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/techstack-technologies/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setTechStackTechnolgiesData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getTechStackTechnolgies()\n    }, [])\n\n    return (\n        <Page title=\"TechStack Technolgies | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>TechStack Technolgies</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/techstack-technologies/add-techstack-technologies/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add TechStackTechnolgies\n                            </Button>\n                        }\n\n                        data={TechStackTechnolgiesData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.technologies,\n                                data?.technology_stack?.tech_stack_name,\n                                data?.created,\n                                data?.modified,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionStatus/RequisitionStatus.js",["2123","2124","2125"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function RequisitionStatus() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Requisition Status\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var cid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/requisition-status/edit/${cid}`}\n                            state={{fromPage: \"requisition-status\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Active\",\n            options: {\n              filter: true,\n              customFilterListOptions: { render: v => `Is Active: ${v}` },\n              customBodyRender: (value, tableMeta, updateValue) => {\n                          if (value) \n                           return <CheckOutlinedIcon \n                          fontSize='medium' color='success' />\n                          else\n                           return <CloseRoundedIcon  \n                              fontSize='medium' color='error'/>\n                      }                \n          }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [RequisitionStatusData, setRequisitionStatusData] = useState([])\n    const getRequisitionStatus = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-status/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setRequisitionStatusData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getRequisitionStatus()\n    }, [])\n\n    return (\n        <Page title=\"Requisition Status | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Requisition Status</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/requisition-status/add-requisition-status/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Requisition Status\n                            </Button>\n                        }\n\n                        data={RequisitionStatusData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.requisition_status,\n                                data?.created,\n                                data?.modified,\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionTypes/EditRequisitionType.js",["2126","2127"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditRequisitionType() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores Requisition Type information\n    const [RequisitionTypeInfo, setRequisitionTypeInfo] = useState({});\n\n\n    const getRequisitionTypeInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"requisition-types/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setRequisitionTypeInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getRequisitionTypeInfo();\n    }, [])\n\n    const callEditRequisitionTypeAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"requisition-types/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/requisition-types\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const RequisitionTypeSchema = Yup.object().shape({\n        RequisitionTypeName: Yup.string()\n            .required(\"Requisition Type name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            RequisitionTypeName: RequisitionTypeInfo?.req_type_name ?? '',\n            is_active: RequisitionTypeInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: RequisitionTypeSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"req_type_name\": values.RequisitionTypeName,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit Requisition Type API\n            callEditRequisitionTypeAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Requisition Type\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/requisition-types\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Requisition Type\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Requisition Type\"\n\n                                            {...getFieldProps('RequisitionTypeName')}\n\n                                            error={Boolean(touched.RequisitionTypeName && errors.RequisitionTypeName)}\n                                            helperText={touched.RequisitionTypeName && errors.RequisitionTypeName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update Requisition Type\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionTypes/AddRequisitionTypeForm.js",["2128","2129","2130"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddRequisitionTypeForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddRequisitionTypeAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"requisition-types/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/requisition-types\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const RequisitionTypeSchema = Yup.object().shape({\n        RequisitionTypeName: Yup.string()\n            .required(\"Requisition Type name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            RequisitionTypeName: '',\n            is_active: '',\n            \n        },\n        validationSchema: RequisitionTypeSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"req_type_name\": values.RequisitionTypeName,\n                \"is_active\": values.is_active\n            }\n\n            // call create RequisitionType API\n            callAddRequisitionTypeAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Requisition Type\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/requisition-types\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Requisition Type\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Requisition Type Name\"\n\n                                            {...getFieldProps('RequisitionTypeName')}\n\n                                            error={Boolean(touched.RequisitionTypeName && errors.RequisitionTypeName)}\n                                            helperText={touched.RequisitionTypeName && errors.RequisitionTypeName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack>\n                                       \n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Active? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Requisition Type\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/requisitionTypes/RequisitionType.js",["2131","2132","2133"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function RequisitionType() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Requisition Types\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var cid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/requisition-types/edit/${cid}`}\n                            state={{fromPage: \"requisition-types\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Active\",\n            options: {\n              filter: true,\n              customFilterListOptions: { render: v => `Is Active: ${v}` },\n              customBodyRender: (value, tableMeta, updateValue) => {\n                          if (value) \n                           return <CheckOutlinedIcon \n                          fontSize='medium' color='success' />\n                          else\n                           return <CloseRoundedIcon  \n                              fontSize='medium' color='error'/>\n                      }                \n          }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [RequisitionTypeData, setRequisitionTypeData] = useState([])\n    const getRequisitionType = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/requisition-types/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setRequisitionTypeData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getRequisitionType()\n    }, [])\n\n    return (\n        <Page title=\"Requisition Type | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Requisition Type</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/requisition-types/add-requisition-types/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Requisition Type\n                            </Button>\n                        }\n\n                        data={RequisitionTypeData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.req_type_name,\n                                data?.created,\n                                data?.modified,\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/currency/AddCurrencyForm.js",["2134","2135","2136"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddCurrencyForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const callAddCurrencyAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"currency/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/currency\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n    }, [])\n\n    \n    const CurrencySchema = Yup.object().shape({\n        CurrencyName: Yup.string()\n            .required(\"Currency name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            CurrencyName: '',\n            is_active: '',\n            \n        },\n        validationSchema: CurrencySchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"curr_name\": values.CurrencyName,\n                \"is_active\": values.is_active\n            }\n\n            // call create Currency API\n            callAddCurrencyAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add Currency\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/currency\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add Currency\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Currency Name\"\n\n                                            {...getFieldProps('CurrencyName')}\n\n                                            error={Boolean(touched.CurrencyName && errors.CurrencyName)}\n                                            helperText={touched.CurrencyName && errors.CurrencyName}\n                                        >\n                                        </TextField>\n                                    </Stack>\n\n                                    <Stack>\n                                       \n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Currency Active? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                // checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked ? \"true\" : \"false\");\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add Currency\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/currency/EditCurrency.js",["2137","2138"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditCurrency() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n\n    // Stores Currency information\n    const [CurrencyInfo, setCurrencyInfo] = useState({});\n\n\n    const getCurrencyInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"currency/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setCurrencyInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getCurrencyInfo();\n    }, [])\n\n    const callEditCurrencyAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"currency/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/currency\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const CurrencySchema = Yup.object().shape({\n        CurrencyName: Yup.string()\n            .required(\"Currency name required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            CurrencyName: CurrencyInfo?.curr_name ?? '',\n            is_active: CurrencyInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: CurrencySchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"curr_name\": values.CurrencyName,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit Currency API\n            callEditCurrencyAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit Currency\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/Currency\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit Currency\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Currency\"\n\n                                            {...getFieldProps('CurrencyName')}\n\n                                            error={Boolean(touched.CurrencyName && errors.CurrencyName)}\n                                            helperText={touched.CurrencyName && errors.CurrencyName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n                                        \n\n\n                                        <div role=\"group\" style={{ width: '40%' }}>\n                                        <Stack\n                                            direction={{ xs: \"column\", sm: \"row\" }}\n                                            spacing={3}\n                                            style={{ padding: \"20px 0 0 12px\"}}\n                                        >\n                                            <div id=\"switch-label\" style={{ color: '#637381', marginTop:'5px'}}> Is Currency Active ? </div>\n\n                                            <Switch\n                                                name=\"is_active\"\n                                                value=\"true\"\n                                                checked={values.is_active}\n                                                onChange={(event, checked) => {\n                                                    setFieldValue(\"is_active\", checked);\n                                            }}\n                                            />\n                                        </Stack>\n                                        <ErrorMessage name=\"is_active\">\n                                            {(msg) => <span style={{ color: \"#FF4842\", fontSize: \"12px\" ,marginLeft:15}}>{msg}</span>}\n                                        </ErrorMessage>\n                                     </div>     \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update Currency\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/currency/Currency.js",["2139","2140","2141"],"import axios from 'axios';\nimport Page from '../../Page';\nimport { Icon } from '@iconify/react';\nimport React, { useEffect, useState } from \"react\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {Button,Container,Typography,} from '@mui/material';\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\nimport _ from 'lodash';\n\n\nconst theme = createTheme({\n    components: {\n        MUIDataTable: {\n        styleOverrides: {\n            root: {\n            backgroundColor: '#red',\n            },\n            paper: {\n            boxShadow: 'none',\n            },\n        },\n        },\n        MuiToolbar: {\n        styleOverrides: {\n            root: {\n            // backgroundColor: 'yellow',\n            },\n        },\n        },\n        MuiTableCell: {\n        styleOverrides: {\n            head: {\n            backgroundColor: 'purple',\n            },\n        },\n        },\n        MUIDataTableHeadCell: {\n            styleOverrides: {\n                root: {\n                    fontWeight: '700',\n                },\n                data: {\n                fontWeight: '700',\n                }\n            }\n        },\n        MUIDataTableSelectCell: {\n        styleOverrides: {\n            headerCell: {\n            // backgroundColor: 'blue',\n            fontWeight: '500px'\n            },\n        },\n        },\n        MuiTableFooter: {\n        styleOverrides: {\n            root: {\n            '& .MuiToolbar-root': {\n            //   backgroundColor: 'purple',\n            },\n            },\n        },\n        },\n    },\n});\n\nconst components = {\n    ExpandButton: function (props) {\n        return <ExpandButton {...props} />;\n    }\n};\n\nconst StyledButton = {\n    backgroundColor: \"#00AB55\", \n    fontFamily: \"Public Sans,sans-serif\", \n    fontWeight: \"700\", \n    borderRadius: \"8px\",\n    boxShadow: \"0 8px 16px 0 rgb(0 171 85 / 10%)\"\n}\n\nexport default function Currency() {\n    // state to save candidate ID\n    const [rowClickData, setRowClickData] = useState([]) \n\n    const options = {\n        selectableRows: false, // It will turn off checkboxes in rows\n        filter: true,\n        filterType: \"dropdown\",\n        responsive: \"standard\",\n        draggableColumns: {enabled: true},\n        onRowClick: (rowData) => {setRowClickData(rowData[0])},\n        print: false,\n    };\n    \n    const columns = [\n        {\n            name: \"ID\",\n            options: {\n                filter: false,\n            },\n        },\n        {\n            name: \"Currency\",\n            options: {\n                filter: false,\n                sort: true,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                    var cid = tableMeta.rowData[0]\n                    return (\n\n                        <RouterLink \n                            to={`/resumeX/currency/edit/${cid}`}\n                            state={{fromPage: \"currency\"}} \n                            style={{textDecoration: 'none', \n                                    color: '#00AB55', \n                                    fontWeight: 'bold'}}> \n                            {value}\n                        </RouterLink>\n                    )\n                }\n            }\n        },\n        {\n            name: \"Created\",\n            options: {\n                filter: false,\n            }\n        },\n        {\n            name: \"Modified\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            name: \"Active\",\n            options: {\n              filter: true,\n              customFilterListOptions: { render: v => `Is Active: ${v}` },\n              customBodyRender: (value, tableMeta, updateValue) => {\n                          if (value) \n                           return <CheckOutlinedIcon \n                          fontSize='medium' color='success' />\n                          else\n                           return <CloseRoundedIcon  \n                              fontSize='medium' color='error'/>\n                      }                \n          }\n        }\n    ];\n\n    // Linear progress bar state\n    const [isLoading, setIsLoading] = useState(true)\n\n    const [currencyData, setCurrencyData] = useState([])\n    const getCurrency = () => {\n      axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/currency/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n      .then((response) => {\n        setCurrencyData(response.data.data)\n        setIsLoading(false)\n      })\n      .catch((e) => console.log('something went wrong :(', e));\n    };\n  \n    useEffect(() => {\n      getCurrency()\n    }, [])\n\n    return (\n        <Page title=\"Currency | ResumeX\">\n            <Container maxWidth=\"xl\">\n\n\n                <h2 align=\"center\" style={{fontSize: '25px', fontWeight: '800', marginBottom: '30px'}}>Currency</h2>\n\n                {isLoading ? (\n                    <Typography variant=\"h4\" sx={{ mt: 0 }} align=\"center\">\n                        <LinearProgress />\n                    </Typography>\n                    ) : (\n                <ThemeProvider theme={theme}>\n                    <MUIDataTable\n                        title={\n                            <Button\n                                variant=\"contained\"\n                                component={RouterLink}\n                                to=\"/resumeX/currency/add-currency/\"\n                                startIcon={<Icon icon={plusFill} />}\n                                style={StyledButton}\n                            >\n                                Add Currency\n                            </Button>\n                        }\n\n                        data={currencyData.slice(0).reverse().map(data => {\n                            return [\n                                data?.id,\n                                data?.curr_name,\n                                data?.created,\n                                data?.modified,\n                                data?.is_active,\n                            ]\n                        })}\n                        columns={columns}\n                        options={options}\n                        components={components}\n                    />\n                </ThemeProvider>\n                )}   \n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStackTechnolgies/EditTechStackTechnologies.js",["2142","2143","2144","2145","2146","2147","2148","2149","2150","2151"],"import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n}\n    from '@mui/material';\n\nimport Page from '../../Page';\n\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function EditTechStackTechnolgies() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const rid = useParams()\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    // Stores deleted permissions\n    const [deleteItem, setDeleteItem] = useState([]);\n\n    // Stores TechStackTechnologies information\n    const [TechStackTechnologiesInfo, setTechStackTechnologiesInfo] = useState({});\n\n\n    const getTechStackTechnologiesInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"techstack-technologies/\"+rid.id,\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setTechStackTechnologiesInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n            // Stores Technology information\n            const [technologyInfo, setTechnologyInfo] = useState([]);\n\n\n            const getTechnologyInfo = () => {\n                apiInstance({\n                    method: \"get\",\n                    url: \"technology/\",\n                    headers: {\n                        Authorization: \"token \" + hrToken,\n                    }\n                })\n                    .then(function (response) {\n                        const techArray = getTechArray(response.data.data)\n                        setTechnologyInfo(techArray)\n                    })\n                    .catch(function (error) {\n                        enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                            anchorOrigin: {\n                                vertical: 'top',\n                                horizontal: 'right',\n                            },\n                            variant: 'error',\n                            autoHideDuration: 2000,\n                        });\n                    });\n            }\n        \n        const getTechArray = (techObj) =>\n        techObj.map((obj) => ({\n            pk: obj.id,\n            techName: obj.technology_name,\n            isActive: obj.is_active\n        }));\n\n\n        // Stores TechStack information\n    const [TechStackInfo, setTechStackInfo] = useState([]);\n\n\n    const getTechStackInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"tech-stack/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setTechStackInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n\n    useEffect(() => {\n        getTechStackTechnologiesInfo();\n        getTechStackInfo();\n        getTechnologyInfo();\n    }, [])\n\n    const callEditTechStackTechnologiesAPI = (formValues) => {\n        apiInstance({\n            method: \"put\",\n            url: \"techstack-technologies/\" + rid.id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/techstack-technologies\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n    \n    const TechStackTechnologiesSchema = Yup.object().shape({\n        TechStackTechnologiesName: Yup.string()\n            .required(\"TechStackTechnologies name required\"),\n        Priority: Yup.number()\n            .required(\"TechStackTechnologies Priority is required\"),\n        is_active: Yup.string()\n            .required(\"Active status is required.\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            TechStackTechnologiesName: TechStackTechnologiesInfo?.tech_stack_name ?? '',\n            Priority: TechStackTechnologiesInfo?.stack_priority ?? '',    \n            is_active: TechStackTechnologiesInfo?.is_active ?? false,            \n        },\n        enableReinitialize: true,\n        validationSchema: TechStackTechnologiesSchema,\n        onSubmit: (values) => {            \n\n            let formData = {\n                \"tech_stack_name\": values.TechStackTechnologiesName,\n                \"stack_priority\": values.Priority,\n                \"is_active\": values.is_active\n            }\n\n            // call Edit TechStackTechnologies API\n            callEditTechStackTechnologiesAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Edit TechStackTechnologies\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/techstack-technologies\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Edit TechStackTechnologies\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                   <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"TechStack\"\n\n                                            {...getFieldProps('TechStackTechnologiesName')}\n\n                                            error={Boolean(touched.TechStackTechnologiesName && errors.TechStackTechnologiesName)}\n                                            helperText={touched.TechStackTechnologiesName && errors.TechStackTechnologiesName}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                            fullWidth\n                                            label=\"Technologies\"\n\n                                            {...getFieldProps(\"Priority\")}\n\n                                            error={Boolean(touched.Priority && errors.Priority)}\n                                            helperText={touched.Priority && errors.Priority}\n                                        >\n                                        </TextField>\n\n                                        </Stack>\n                                        \n                                    </Stack>\n                                   \n                            </CardContent>\n                        </Card>\n\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:550, width:300}}\n                        >\n                            Update TechStack Technologies\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/techStackTechnolgies/AddTechStackTechnologiesForm.js",["2152","2153","2154","2155","2156"],"import { useState, useEffect } from 'react';\nimport Page from '../../Page';\nimport {\n    Card, CardContent, Container,\n    Link, Stack, TextField, Typography,MenuItem ,Autocomplete \n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Switch from '@mui/material/Switch';\n\nimport { apiInstance } from 'src/utils/apiAuth';\n\nexport default function AddTechStackTechnologiesForm() {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n        // Stores TechStack information\n    const [TechStackInfo, setTechStackInfo] = useState([]);\n\n\n    const getTechStackInfo = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"tech-stack/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                setTechStackInfo(response.data.data)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n        // Stores Technology information\n        const [technologyInfo, setTechnologyInfo] = useState([]);\n\n\n        const getTechnologyInfo = () => {\n            apiInstance({\n                method: \"get\",\n                url: \"technology/\",\n                headers: {\n                    Authorization: \"token \" + hrToken,\n                }\n            })\n                .then(function (response) {\n                    const techArray = getTechArray(response.data.data)\n                    setTechnologyInfo(techArray)\n                })\n                .catch(function (error) {\n                    enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                        anchorOrigin: {\n                            vertical: 'top',\n                            horizontal: 'right',\n                        },\n                        variant: 'error',\n                        autoHideDuration: 2000,\n                    });\n                });\n        }\n    \n    const getTechArray = (techObj) =>\n    techObj.map((obj) => ({\n        pk: obj.id,\n        techName: obj.technology_name,\n        isActive: obj.is_active\n    }));\n\n\n    const callAddTechStackTechnologiesAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"techstack-technologies/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/techstack-technologies\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n            });\n    }\n\n\n    useEffect(() => {\n        getTechStackInfo();\n        getTechnologyInfo();\n    }, [])\n\n    \n    const TechStackTechnologiesSchema = Yup.object().shape({\n        \n        TechStack: Yup.string()\n            .required(\"TechStack is required.\"),\n        Technologies: Yup.array()\n            .min(1, \"Technologies are required\"),\n    });\n\n    const formik = useFormik({\n        initialValues: {\n            TechStack: '',\n            Technologies: [],\n        },\n        validationSchema: TechStackTechnologiesSchema,\n        onSubmit: (values) => {\n\n            let formData = {\n                \"technology_stack_id\": values.TechStack,\n                \"technologies_id\": values.Technologies,\n            }\n\n            // call create TechStackTechnologies API\n            callAddTechStackTechnologiesAPI(formData)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, setFieldValue, handleChange } = formik;\n\n    return (\n        <Page title=\"Add TechStack Technologies\">\n            <Container maxWidth=\"xl\">\n                <Link to=\"/resumeX/techstack-technologies\" color=\"green\" underline=\"hover\" component={RouterLink} fontSize=\"20px\"> Back\n                </Link>\n                <Typography variant=\"h4\" sx={{ mb: 5 }} align=\"center\" color=\"black\">\n                    Add TechStack Technologies\n                </Typography>\n\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2, ml:40 }} variant=\"outlined\" style={{ width:'50%'}}>\n                            <CardContent>\n                                <Stack spacing={3}>\n\n                                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"TechStack\"\n                                            select\n\n                                            {...getFieldProps('TechStack')}\n\n                                            error={Boolean(touched.TechStack && errors.TechStack)}\n                                            helperText={touched.TechStack && errors.TechStack}\n                                        >\n                                            {TechStackInfo.map((option) => (\n                                            <MenuItem key={option.id} value={option.id}>\n                                            {option.tech_stack_name}\n                                            </MenuItem>\n                                            ))}\n                                        </TextField>\n\n                                    </Stack>\n\n                                    \n                                   <Stack>\n                                   <Autocomplete\n                                            multiple\n                                            id=\"permission-list\"\n                                            options={technologyInfo}\n                                            getOptionLabel={(option) => option.techName}\n                                            //defaultValue={null}\n                                            filterSelectedOptions\n                                            onChange={(event, value) => {\n                                                var list = value.map((v) => v.pk)\n                                                setFieldValue(\"Technologies\", list);\n                                              }}\n                                            renderInput={(params) => (\n                                            <TextField\n                                                {...params}\n                                                label=\"Technology List\"\n                                                placeholder=\"Select\"\n\n                                                {...getFieldProps(\"Technologies\")}\n\n                                            error={Boolean(touched.Technologies && errors.Technologies)}\n                                            helperText={touched.Technologies && errors.Technologies}\n                                            />\n                                            )}\n                                        />\n                                    </Stack>\n                                </Stack>\n                            </CardContent>\n                        </Card>\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2}} />\n\n                        <LoadingButton\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            style={{marginLeft:'40%', width:300}}\n                        >\n                            Add TechStack Technologies\n                       </LoadingButton>\n\n                      </Form>\n                </FormikProvider>\n            </Container>\n        </Page >\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/ListCandDocuments.js",["2157","2158","2159","2160","2161","2162","2163"],"import * as React from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport axios from 'axios';\nimport { apiInstance } from 'src/utils/apiAuth';\nimport * as constants from 'src/utils/constants';\nimport UserInfo from 'src/utils/Authorization/UserInfo';\n\n\nexport default function BasicTable(tableContent) {\n    const { enqueueSnackbar } = useSnackbar();\n    const navigate = useNavigate();\n    const userInfo = UserInfo()\n\n    const handleFileDelete = (docType) => {\n        const candId = tableContent?.tableContent?.candidateData?.id\n        const hrToken = localStorage.getItem(\"authToken\");\n\n\n        var apiData = {\n            \"cand_id\": candId,\n            \"doc_type\": docType,\n        }\n\n        apiInstance({\n            method: \"put\",\n            url: \"candidate-viewset/delete_documents/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiData,\n        })\n        .then(function (response) {\n            enqueueSnackbar(response.data.message, {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'success',\n                autoHideDuration: 2000,\n            });\n            navigate(0);\n        })\n        .catch(function (error) {\n            enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'error',\n                autoHideDuration: 2000,\n            });\n        });\n    }\n\n    \n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Owner </TableCell>\n                        <TableCell>Document Type </TableCell>\n                        <TableCell>Document Name </TableCell>\n                        <TableCell>File Size (KB)</TableCell>\n                        <TableCell>Last Modification </TableCell>\n                        { userInfo?.role !== 'BU_HEAD' ? <TableCell>Action </TableCell> : null}\n                    </TableRow>\n                </TableHead>\n                <TableBody>                                 \n\n                    {/* -------- Documents --------- */}\n\n                    {tableContent?.tableContent?.candidateData?.documents?.recording?.recording ? (\n\n                    <TableRow\n                        key=\"recording\"\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                        {tableContent?.tableContent?.candidateData?.documents?.recording?.recording !== null ? (\n                            <TableCell component=\"th\" scope=\"row\">\n                                {tableContent?.tableContent?.candidateData?.created_by?.member?.first_name + \" \" + tableContent?.tableContent?.candidateData?.created_by?.member?.last_name }                                \n                            </TableCell>\n\n                        ) : null }                               \n\n                        <TableCell> \n                        {tableContent?.tableContent?.candidateData?.documents?.recording && tableContent?.tableContent?.candidateData?.documents?.recording?.recording !== null ? \"INITIAL RECORDING\" : ''} \n                        </TableCell>\n                        <TableCell>\n                        <a href={constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + `${tableContent?.tableContent?.candidateData?.documents?.recording?.recording}`} \n                            target=\"_blank\" style={{color: \"brown\", fontWeight: \"italic\"}\n                        }>                        \n                        {tableContent?.tableContent?.candidateData?.documents?.recording?.recording}\n                        </a>\n                        </TableCell>\n                        <TableCell>{Math.round(tableContent?.tableContent?.candidateData?.documents?.recording?.size * 0.001).toFixed(1)}</TableCell>\n                        <TableCell>{tableContent?.tableContent?.candidateData?.documents?.recording?.recording_uploaded_on}</TableCell>\n                        <TableCell>\n                        {tableContent?.tableContent?.candidateData?.documents?.recording?.recording ? (\n                            userInfo?.role !== 'BU_HEAD' ?\n                            <Button color=\"error\" onClick={() => handleFileDelete('RECORDING')}>\n                                <DeleteIcon  fontSize=\"medium\"  />\n                            </Button> : null) : null }\n                        </TableCell>\n\n                    </TableRow> ) : null }\n\n                    {/* -------- resume --------- */}\n\n                    {tableContent?.tableContent?.candidateData?.resume?.resume_file ? (\n\n                    <TableRow\n                        key=\"resume\"\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                        {tableContent?.tableContent?.candidateData?.resume && tableContent?.tableContent?.candidateData?.resume?.resume_file !== '' ? (\n                            <TableCell component=\"th\" scope=\"row\">\n                                {tableContent?.tableContent?.candidateData?.created_by?.member?.first_name + \" \" + tableContent?.tableContent?.candidateData?.created_by?.member?.last_name}\n                            </TableCell>\n\n                        ) : null }  \n\n                        <TableCell>                         \n                        {tableContent?.tableContent?.candidateData?.resume && tableContent?.tableContent?.candidateData?.resume?.resume_file !== '' ? \"RESUME\" : ''} \n                        \n                        </TableCell>\n                        <TableCell>\n                        <a href={constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + `${tableContent?.tableContent?.candidateData?.resume?.resume_file}`} \n                            target=\"_blank\" style={{color: \"brown\", fontWeight: \"italic\"}\n                        }>\n                            {tableContent?.tableContent?.candidateData?.resume?.resume_file}\n                        </a>    \n                        </TableCell>\n                        <TableCell>{Math.round(tableContent?.tableContent?.candidateData?.resume?.size * 0.001).toFixed(1)}</TableCell>\n                        <TableCell>{tableContent?.tableContent?.candidateData?.resume?.modified}</TableCell>\n                        <TableCell>\n                        {tableContent?.tableContent?.candidateData?.resume?.resume_file ? (\n                            userInfo?.role !== 'BU_HEAD' ?\n                            <Button color=\"error\" onClick={() => handleFileDelete('RESUME')}>\n                                <DeleteIcon  fontSize=\"medium\"  />\n                            </Button> : null ) : null }\n                        </TableCell>\n\n                    </TableRow>  ) : null }    \n\n                    {/* -------- photo_id --------- */}\n\n                    {tableContent?.tableContent?.candidateData?.documents?.photo_id?.photo_id ? (\n                    <TableRow\n                        key=\"photo_id\"\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                        {tableContent?.tableContent?.candidateData?.documents?.photo_id && tableContent?.tableContent?.candidateData?.documents?.photo_id?.photo_id !== null ? (\n                            <TableCell component=\"th\" scope=\"row\">\n                                {tableContent?.tableContent?.candidateData?.created_by?.member?.first_name + \" \" + tableContent?.tableContent?.candidateData?.created_by?.member?.last_name }\n                            </TableCell>\n\n                        ) : null\n                            \n                        }\n                        <TableCell>\n                        {tableContent?.tableContent?.candidateData?.documents?.photo_id && tableContent?.tableContent?.candidateData?.documents?.photo_id?.photo_id !== null ? \"PHOTO ID\" : ''} \n                        </TableCell>\n                        <TableCell>\n                        <a href={constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + `${tableContent?.tableContent?.candidateData?.documents?.photo_id?.photo_id}`} \n                            target=\"_blank\" style={{color: \"brown\", fontWeight: \"italic\"}\n                        }>                       \n                        {tableContent?.tableContent?.candidateData?.documents?.photo_id?.photo_id}\n                        </a>\n                        </TableCell>\n                        <TableCell>{Math.round(tableContent?.tableContent?.candidateData?.documents?.photo_id?.size * 0.001).toFixed(1)}  </TableCell>\n                        <TableCell>{tableContent?.tableContent?.candidateData?.documents?.photo_id?.photo_id_uploaded_on}</TableCell>\n                        <TableCell>\n                        {tableContent?.tableContent?.candidateData?.documents?.photo_id?.photo_id ? (\n                            userInfo?.role !== 'BU_HEAD' ?\n                            <Button color=\"error\" onClick={() => handleFileDelete('PHOTOID')}>\n                                <DeleteIcon  fontSize=\"medium\"  />\n                            </Button> : null) : null }\n                        </TableCell>\n\n\n                    </TableRow> ) : null }\n                    \n                    {/* -------- offer_letter --------- */}\n\n                    {tableContent?.tableContent?.candidateData?.documents?.offer_letter?.offer_letter ? (\n                    <TableRow\n                        key=\"offer_letter\"\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                        {tableContent?.tableContent?.candidateData?.documents?.offer_letter && tableContent?.tableContent?.candidateData?.documents?.offer_letter?.offer_letter !== null ? (\n                            <TableCell component=\"th\" scope=\"row\">\n                                {tableContent?.tableContent?.candidateData?.created_by?.member?.first_name + \" \" + tableContent?.tableContent?.candidateData?.created_by?.member?.last_name }\n                            </TableCell>\n\n                        ) : null  }\n                        <TableCell> \n                        \n                        {tableContent?.tableContent?.candidateData?.documents?.offer_letter?.offer_letter !== null ? \"OFFER LETTER\" : ''} \n                        </TableCell>\n                        <TableCell>\n                            <a href={constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + `${tableContent?.tableContent?.candidateData?.documents?.offer_letter?.offer_letter}`} \n                            target=\"_blank\" style={{color: \"brown\", fontWeight: \"italic\"}}>\n                                {tableContent?.tableContent?.candidateData?.documents?.offer_letter?.offer_letter}\n                            </a>\n                        </TableCell>\n                        <TableCell>{Math.round(tableContent?.tableContent?.candidateData?.documents?.offer_letter?.size * 0.001).toFixed(1)}</TableCell>\n                        <TableCell>{tableContent?.tableContent?.candidateData?.documents?.offer_letter?.offer_letter_uploaded_on}</TableCell>\n                        <TableCell>\n                        {tableContent?.tableContent?.candidateData?.documents?.offer_letter?.offer_letter ? (\n                            userInfo?.role !== 'BU_HEAD' ?\n                            <Button color=\"error\" onClick={() => handleFileDelete('OFFERLETTER')}>\n                                <DeleteIcon  fontSize=\"medium\"  />\n                            </Button> : null) : null }\n                        </TableCell>\n\n                    </TableRow> ) : null }\n\n                    {/* -------- payslips --------- */}\n\n\n                    {tableContent?.tableContent?.candidateData?.payslips?.map((row, i) => (\n                        <TableRow\n                            key={row.id}\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                            <TableCell component=\"th\" scope=\"row\">\n                                { row.payslip ?\n                                tableContent?.tableContent?.candidateData?.created_by?.member?.first_name + \" \" + tableContent?.tableContent?.candidateData?.created_by?.member?.last_name :null}\n                            </TableCell>\n                            <TableCell> {row.payslip ? \"PAYSLIP\" : null }</TableCell>\n                            <TableCell>\n                            <a href={constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + `${row.payslip}`} \n                            target=\"_blank\" style={{color: \"brown\", fontWeight: \"italic\"}}>\n                                {row.payslip}\n                            </a>\n                            </TableCell>\n                            <TableCell>{row.payslip ? Math.round(row.size * 0.001).toFixed(1): null}</TableCell>\n                            \n                            <TableCell> {row.payslip ? row.modified : null }</TableCell>\n\n                            { i === 0 && row.payslip ?  (\n                            <TableCell rowSpan={3}>\n                            { userInfo?.role !== 'BU_HEAD' ?\n                             <Button color=\"error\" onClick={() => handleFileDelete('PAYSLIPS')}>\n                                <DeleteIcon  fontSize=\"large\" border={3} />\n                            </Button> : null }\n                            </TableCell> )\n                         : null }                 \n                            \n\n                        </TableRow> \n                    ))}\n\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/StepperForms/RequiredDetails.js",["2164","2165","2166","2167","2168","2169","2170","2171","2172","2173","2174","2175","2176","2177","2178","2179","2180"],"import { useState, useEffect } from 'react';\nimport Page from '../../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport { CloseFullscreen } from '@mui/icons-material';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n\n// const apiInstance = axios.create({\n//     baseURL: \"http://127.0.0.1:8000/api/v1/\",\n//     timeout: 10000\n// });\n\n\nexport default function CandRequiredDetails({candData, candAge}) {\n\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const [locData, setlocData] = useState([]);\n\n    const [FSDMemData, setFSDMemData] = useState([]);\n\n    let JobAppData = candData?.candidateData?.job_application?.map((app_obj) => {\n        if(app_obj?.is_candidate_selected===true){\n            return app_obj\n        }\n    }).filter(obj => obj)\n\n    const [disableValue, setDisableValue] = useState(false)\n\n    useEffect(() => {\n        getLocationsList();\n        getFSDMemList();\n        setOtherValues();\n    }, [])\n\n    const setOtherValues = () => \n    {\n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n            \n        if (user_role === 'BU_HEAD' || user_role === 'OnBoarding_HR')\n        { setDisableValue(true)  }\n\n        else{ setDisableValue(false) }\n    }\n\n    const getLocationsList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"office-locations/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const locData = getLocArray(response.data.data)\n                setlocData(locData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n    const getFSDMemList = () => {\n\n        apiInstance({\n            method: \"get\",\n            url: \"fsd-members/recruiters_list/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const fsdMem = getFSDArray(response.data.data)\n                setFSDMemData(fsdMem)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n            });\n    }\n\n    const getLocArray = (locData) =>\n        locData.map((locObj) => ({\n            pk: locObj?.id,\n            office_loc: locObj?.office_location,\n            loc_status: locObj?.is_active,\n        }));\n    \n    const getFSDArray = (MemData) =>\n    MemData.map((MemObj) => ({\n        pk: MemObj?.id,\n        first_name: MemObj?.member?.first_name,\n        last_name: MemObj?.member?.last_name,\n    }));\n\n\n    const callUpdateCandidate = (formValues) => {\n        var cand_id = candData?.candidateData?.id\n        var job_app_id = JobAppData?.[0].id\n\n\n        var apiData = {\n            \"salutation\": formValues.Salutation,\n            \"sdf_of\": formValues.SDW_Of,\n            \"age\": formValues.Cand_Age,\n            \"current_add\": formValues.CurrAdd,\n            \"permanent_add\": formValues.PerAdd,\n            \"joining_loc_id\": formValues.JoinLoc,\n            \"middle_name\": formValues.MiddleName,\n            \"drm_id\": formValues.DRM,\n            \"process_month\": formValues.ProcessMonth,\n            \"process_week\": formValues.ProcessWeek,\n            \"hr_call_id\": formValues.HRCall,\n            \"job_app_id\": job_app_id,\n            \"is_required_details\": true,            \n        }\n\n\n        apiInstance({\n            method: \"put\",\n            url: \"candidate-viewset/\" + cand_id + '/',\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiData,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidates\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n\n    const handleAddCheckbox = (e) =>{\n        let addStatus = e.target.checked\n\n        if (addStatus){\n            setFieldValue(\"PerAdd\", values.CurrAdd)\n        }\n        else{\n            setFieldValue(\"PerAdd\", \"\")\n        }\n    }\n\n\n    const CandidateSchema = Yup.object().shape({\n        Salutation: Yup.string()\n            .required('Salutation is required.'),\n        FirstName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed.\")\n            .required(\"First name required\"),\n        MiddleName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed.\")\n            .required(\"Middle name required\"),\n        LastName: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed.\")\n            .required(\"Last name required\"),\n        SDW_Of: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed.\")\n            .required(\"Surety details are required.\"),\n        Cand_Age: Yup.number()\n            .integer()\n            .min(18)\n            .required(\"Candidate\\'s age is required.\"),\n        DRM: Yup.string()\n            .required('DRM is required.'),\n        ProcessMonth: Yup.date()\n            .required(\"Processing month is required.\"),\n        ProcessWeek: Yup.string()\n            .required(\"processing week is required.\"),\n        JoinLoc: Yup.string()\n            .required(\"Candidate Joining Location is required.\"),\n        HRCall: Yup.string()\n            .required(\"HR Call is required.\"),\n        CurrAdd: Yup.string()\n            .required(\"Candidate\\'s current address is required. \"),\n        PerAdd: Yup.string()\n            .required(\"Candidate\\'s permanent address is required. \"),\n    });\n\n\n    const formik = useFormik({\n\n        initialValues: {\n            Salutation: candData?.candidateData?.salutation ?? '',\n            FirstName: candData?.candidateData?.user?.first_name ?? '',\n            MiddleName: candData?.candidateData?.user?.middle_name ?? '',\n            LastName: candData?.candidateData?.user?.last_name ?? '',\n            SDW_Of: candData?.candidateData?.sdf_of ?? '',\n            Cand_Age: candAge,\n            BirthDate: candData?.candidateData?.dob ?? '',\n            Email: candData?.candidateData?.user?.email ?? '',\n            Mobile: candData?.candidateData?.user?.mobile ?? '',\n            DRM: JobAppData?.[0]?.drm_user?.fsd_mem_id ?? '',\n            ProcessMonth: JobAppData?.[0]?.processing_month ?? '',\n            ProcessWeek: JobAppData?.[0]?.processing_week ?? '',\n            JoinLoc: candData?.candidateData?.joining_loc?.id ?? '',\n            HighEdu: candData?.candidateData?.hr_analysis?.higher_education?.degree_name ?? '',\n            HRCall: JobAppData?.[0]?.hr_call?.fsd_mem_id ?? '',\n            CurrAdd:candData?.candidateData?.current_add ?? '',\n            PerAdd: candData?.candidateData?.permanent_add ?? '',\n            SimilarAdd: false,\n           },\n\n        enableReinitialize: true,\n        validationSchema: CandidateSchema,\n        onSubmit: (values) => {\n            callUpdateCandidate(values)\n            setSubmitting(false)\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, handleChange, selectedOption, setFieldValue } = formik;\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2 }} variant=\"outlined\">\n                            <CardContent sx={{ mt: 2}}>\n                                <Stack spacing={3}>\n                                    \n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                            fullWidth\n                                            label=\"Salutation\"\n                                            type=\"string\"\n                                            select\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('Salutation')}\n\n                                            error={Boolean(touched.Salutation && errors.Salutation)}\n                                            helperText={touched.Salutation && errors.Salutation}\n\n                                        >\n                                            <MenuItem key=\"Mr.\" value=\"Mr.\">\n                                            Mr.\n                                            </MenuItem>\n                                            <MenuItem key=\"Mrs.\" value=\"Mrs.\">\n                                            Mrs.\n                                            </MenuItem>\n                                            <MenuItem key=\"Ms.\" value=\"Ms.\">\n                                            Ms.\n                                            </MenuItem>\n                                        </TextField>\n\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"First Name\"\n                                            required\n                                            disabled\n\n                                            {...getFieldProps('FirstName')}\n\n                                            error={Boolean(touched.FirstName && errors.FirstName)}\n                                            helperText={touched.FirstName && errors.FirstName}\n\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Middle Name\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('MiddleName')}\n\n                                            error={Boolean(touched.MiddleName && errors.MiddleName)}\n                                            helperText={touched.MiddleName && errors.MiddleName}\n\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Last Name\"\n                                            required\n                                            disabled\n\n                                            {...getFieldProps('LastName')}\n\n                                            error={Boolean(touched.LastName && errors.LastName)}\n                                            helperText={touched.LastName && errors.LastName}\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                         <TextField\n                                            fullWidth\n                                            label=\"Son/Daughter/Wife Of\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('SDW_Of')}\n\n                                            error={Boolean(touched.SDW_Of && errors.SDW_Of)}\n                                            helperText={touched.SDW_Of && errors.SDW_Of}\n\n                                        >\n                                        </TextField>\n                                        \n                                        <TextField\n                                            fullWidth\n                                            label=\"Email\"\n                                            disabled\n\n                                            {...getFieldProps('Email')}\n\n                                            error={Boolean(touched.Email && errors.Email)}\n                                            helperText={touched.Email && errors.Email}\n\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Mobile\"\n                                            disabled\n\n                                            style={{ width: '50%' }}\n\n                                            {...getFieldProps('Mobile')}\n                                        />  \n\n                                        <TextField\n                                            name=\"BirthDate\"\n                                            label=\"BirthDate\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type=\"date\"\n                                            disabled\n\n                                            style={{ width: '50%' }}\n\n                                            {...getFieldProps('BirthDate')}\n                                            \n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Candidate Age\"\n                                            type=\"number\"\n                                            required\n                                            disabled\n\n                                            {...getFieldProps('Cand_Age')}\n\n                                            error={Boolean(touched.Cand_Age && errors.Cand_Age)}\n                                            helperText={touched.Cand_Age && errors.Cand_Age}\n                                        >\n                                        </TextField>                            \n                                       \n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"DRM Name\"\n                                        type=\"string\"\n                                        select\n                                        required\n                                        disabled\n\n                                        {...getFieldProps('DRM')}\n\n                                        error={Boolean(touched.DRM && errors.DRM)}\n                                        helperText={touched.DRM && errors.DRM}\n                                    >\n                                        {FSDMemData.map((option) => (\n                                            <MenuItem key={option.pk} value={option.pk}>\n                                                {option.first_name + \" \" + option.last_name} \n                                            </MenuItem>\n                                        ))}\n\n                                    </TextField>\n\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Processing Month\"\n                                        type=\"date\"\n                                        required\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('ProcessMonth')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.ProcessMonth && errors.ProcessMonth)}\n                                        helperText={touched.ProcessMonth && errors.ProcessMonth}\n                                    >\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Processing Week\"\n                                        type=\"string\"\n                                        select\n                                        required\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('ProcessWeek')}\n\n                                        error={Boolean(touched.ProcessWeek && errors.ProcessWeek)}\n                                        helperText={touched.ProcessWeek && errors.ProcessWeek}\n                                    >\n                                        <MenuItem key=\"Wk1\" value=\"Wk1\">\n                                         Wk1\n                                        </MenuItem>\n                                        <MenuItem key=\"Wk2\" value=\"Wk2\">\n                                         Wk2\n                                        </MenuItem>\n                                        <MenuItem key=\"Wk3\" value=\"Wk3\">\n                                         Wk3\n                                        </MenuItem>\n                                        <MenuItem key=\"Wk4\" value=\"Wk4\">\n                                         Wk4\n                                        </MenuItem>\n                                        <MenuItem key=\"Wk5\" value=\"Wk5\">\n                                         Wk5\n                                        </MenuItem>\n                                    </TextField>\n\n                                    \n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Joining Location\"\n                                        type=\"string\"\n                                        required\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('JoinLoc')}\n                                        \n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.JoinLoc && errors.JoinLoc)}\n                                        helperText={touched.JoinLoc && errors.JoinLoc}\n                                        >\n\n                                        {locData.map((option) => (\n                                            < MenuItem key={option.pk} value={option.pk} >\n                                                {option.office_loc}\n                                            </ MenuItem>\n                                        ))}\n                                        </TextField>\n                                    \n                                    <TextField\n                                        fullWidth\n                                        label=\"Highest Education\"\n                                        type=\"string\"\n                                        required\n                                        disabled\n\n                                        {...getFieldProps('HighEdu')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.HighEdu && errors.HighEdu)}\n                                        helperText={touched.HighEdu && errors.HighEdu}\n                                    >\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"HR Call\"\n                                        type=\"string\"\n                                        required\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('HRCall')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.HRCall && errors.HRCall)}\n                                        helperText={touched.HRCall && errors.HRCall}\n                                        >\n\n                                        {FSDMemData.map((option) => (\n                                            <MenuItem key={option.pk} value={option.pk}>\n                                                {option.first_name + \" \" + option.last_name} \n                                            </MenuItem>\n                                        ))}\n\n                                    </TextField>\n                                \n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                    \n                                    <TextField\n                                        fullWidth\n                                        id=\"CurrAdd\"\n                                        label=\"Current Addresss\"\n                                        multiline\n                                        required\n                                        rows={2}\n                                        disabled={disableValue}\n\n                                        {...getFieldProps(\"CurrAdd\")}\n\n                                        error={Boolean(touched.CurrAdd && errors.CurrAdd)}\n                                        helperText={touched.CurrAdd && errors.CurrAdd}\n                                    >                                        \n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        id=\"PerAdd\"\n                                        label=\"Permanent Addresss\"\n                                        required\n                                        multiline\n                                        rows={2}\n                                        disabled={disableValue}\n\n                                        {...getFieldProps(\"PerAdd\")}\n\n                                        error={Boolean(touched.PerAdd && errors.PerAdd)}\n                                        helperText={touched.PerAdd && errors. PerAdd}\n                                    >                                        \n                                    </TextField>\n\n                                    <label\n                                        onChange={handleAddCheckbox}\n                                        style={{width:\"50%\", padding:\"25px\"}}\n                                    >\n                                        <Field\n                                        fullWidth \n                                        type=\"checkbox\" \n                                        name=\"SimilarAdd\" \n                                        style={{width:\"10%\"}}\n                                        disabled={disableValue}\n                                        />\n                                        Are Both Addresses Same ?\n                                    </label>\n\n                                    </Stack>\n                                </Stack>\n                            </CardContent>\n                        </Card>\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ my: 3}}>\n\n                            <LoadingButton\n                                size=\"large\"\n                                type=\"submit\"\n                                variant=\"contained\"\n                                loading={isSubmitting}\n                                sx={{width:\"30%\"}} \n                                disabled={disableValue}>                                    \n                                Save Details\n                            </LoadingButton>\n\n                        </Stack>\n\n                    </Form>\n                </FormikProvider>\n         </Container>\n     </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/StepperForms/OnboardingDetails.js",["2181","2182","2183","2184","2185","2186","2187","2188","2189","2190","2191","2192","2193"],"import { useState, useEffect } from 'react';\nimport Page from '../../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { format } from 'date-fns';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n// const apiInstance = axios.create({\n//     baseURL: \"http://127.0.0.1:8000/api/v1/\",\n//     timeout: 10000\n// });\n\n\nexport default function CandOnboardingDetails({candData}) {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const [candOnboardDetailsData, setCandOnboardDetailsData] = useState(candData?.candidateData?.onboard_details);\n\n    const [signingAuthorityData, setSigningAuthorityData] = useState([]);\n\n    const [onboardingHRData, setOnboardingHRData] = useState([]);\n\n    const [payrollCompData, setPayrollCompData] = useState([]);\n\n    const todayDate = format(new Date(), 'yyyy-MM-dd')\n\n    const [disableValue, setDisableValue] = useState(false)\n   \n    const setOtherValues = () => \n    {\n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n            \n        if (user_role === 'BU_HEAD' || user_role === 'OnBoarding_HR')\n        { setDisableValue(true)  }\n\n        else{ setDisableValue(false) }\n    }\n\n  \n    useEffect(() => {\n        getSigningAuthorityList();\n        getOnboardingHRList();\n        getPayrollCompanyList();\n        setOtherValues();\n    }, [])\n\n    const RO_Names = [\n        'Ajay K Chawla',\n        'Aesha P Shah',\n        'Alap D Mistry',\n        'Bhoomi R Vyas',\n      ]\n\n\n    const getSigningAuthorityList = () => {\n    apiInstance({\n        method: \"get\",\n        url: \"signing-authority/\",\n        headers: {\n            Authorization: \"token \" + hrToken,\n        }\n    })\n        .then(function (response) {\n            const authorityData = getAuthorityArray(response.data.data)\n            setSigningAuthorityData(authorityData)\n        })\n        .catch(function (error) {\n            enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                anchorOrigin: {\n                    vertical: 'top',\n                    horizontal: 'right',\n                },\n                variant: 'error',\n                autoHideDuration: 2000,\n            });\n\n        });\n    }\n\n    const getOnboardingHRList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"onboarding-hr/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const HRData = getHRArray(response.data.data)\n                setOnboardingHRData(HRData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n    \n            });\n        }\n\n    const getPayrollCompanyList = () => {\n        apiInstance({\n            method: \"get\",\n            url: \"payroll-company/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            }\n        })\n            .then(function (response) {\n                const payrollData = getCompanyArray(response.data.data)\n                setPayrollCompData(payrollData)\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n    \n            });\n        }\n    \n    const getAuthorityArray = (Data) =>\n    Data.map((authorityObj) => ({\n        pk: authorityObj?.id,\n        authorityName: authorityObj?.authority_name\n    }));\n\n    const getHRArray = (HR_Data) =>\n    HR_Data.map((HR_Obj) => ({\n        pk: HR_Obj?.id,\n        hr_name: HR_Obj?.hr_name\n    }));\n\n    const getCompanyArray = (Company_Data) =>\n    Company_Data.map((company_Obj) => ({\n        pk: company_Obj?.id,\n        company_name: company_Obj?.company_name\n    }));\n\n\n    const callOnboardCreateAPI = (apiPayload) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"onboard-details/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiPayload,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidates\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n       \n    }\n\n    const callOnboardUpdateAPI = (apiPayload, onboard_obj_id) => {\n\n        apiInstance({\n            method: \"put\",\n            url: \"onboard-details/\" + onboard_obj_id + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: apiPayload,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidates\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });       \n    }\n\n\n    const CandidateSchema = Yup.object().shape({\n        Project: Yup.string()\n            .min(2, \"Too Short!\")\n            .max(50, \"Too Long!\")\n            .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed.\")\n            .required(\"Project is required\"),\n        JoinDate: Yup.date(),\n        REF_NO: Yup.string(),\n        OfferDate: Yup.date()\n            .required(\"offer date is required.\"),\n        Report_Officer: Yup.string(),\n        Sodexo: Yup.string(),\n        Health_Insurance: Yup.string(),\n        Sign_Auth: Yup.string()\n            .required(\"Signing Authority is required\"),\n        Com_Ext: Yup.string(),\n        Onboard_HR: Yup.string()\n            .required(\"Onboarding HR is required\"),\n        Payroll_Cmp: Yup.string()\n            .required(\"Payroll company is required\"),\n        Sys_Req: Yup.string(),\n        Accommodation: Yup.string(),\n        Stay_Days: Yup.number(),\n        Ref_Amt: Yup.number(),\n        FSD_Cmt: Yup.string()\n            .required(\"FSD member comments are required\"),\n        \n    });\n\n\n    const formik = useFormik({\n        initialValues: {\n            Project: candOnboardDetailsData?.project ?? \"\",\n            JoinDate: candOnboardDetailsData?.join_date ?? todayDate,\n            REF_NO: candOnboardDetailsData?.ref_no ?? \"\",\n            OfferDate: candOnboardDetailsData?.offer_date ?? todayDate,\n            Report_Officer: candOnboardDetailsData?.reporting_officer ?? \"\",\n            Sodexo: candOnboardDetailsData?.sodexo ?? \"NO\",\n            Health_Insurance: candOnboardDetailsData?.health_insurance ?? \"NO\",\n            Sign_Auth: candOnboardDetailsData?.sign_authority.id ?? \"\",\n            Com_Ext: candOnboardDetailsData?.company_extn ?? \"\",\n            Onboard_HR: candOnboardDetailsData?.onboarding_hr.id ?? \"\",\n            Payroll_Cmp:candOnboardDetailsData?.payroll_com.id ?? \"\",\n            Sys_Req: candOnboardDetailsData?.sys_req ?? \"Desktop\",\n            Accommodation: candOnboardDetailsData?.accommodation ?? \"NO\",\n            Stay_Days: candOnboardDetailsData?.stay_days ?? 0,\n            Ref_Amt: candOnboardDetailsData?.refer_amt ?? \"\",\n            FSD_Cmt: candOnboardDetailsData?.fsd_comments ?? \"\",\n        },\n\n        enableReinitialize: true,\n        validationSchema: CandidateSchema,\n        onSubmit: (values) => {\n            var cand_id = candData?.candidateData?.id\n\n            var apiData = {\n                \"candidate_id\": cand_id,\n                \"project\": values.Project,\n                \"join_date\": values.JoinDate,\n                \"offer_date\": values.OfferDate,\n                \"reporting_officer\": values.Report_Officer,\n                \"sodexo\": values.Sodexo,\n                \"health_insurance\": values.Health_Insurance,\n                \"sign_authority_id\": values.Sign_Auth,\n                \"onboarding_hr_id\": values.Onboard_HR,\n                \"payroll_com_id\": values.Payroll_Cmp,\n                \"company_extn\": values.Com_Ext,\n                \"sys_req\": values.Sys_Req,\n                \"accommodation\": values.Accommodation,\n                \"stay_days\": values.Stay_Days,\n                \"refer_amt\": values.Ref_Amt,\n                \"fsd_comments\": values.FSD_Cmt,\n            }\n\n            if(candOnboardDetailsData === null){\n                callOnboardCreateAPI(apiData)\n            }\n            else{\n                var onboard_id = candOnboardDetailsData.id\n                callOnboardUpdateAPI(apiData, onboard_id)\n            }\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, handleChange, setFieldValue } = formik;\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2 }} variant=\"outlined\">\n\n                            <CardContent sx={{ mt: 2 }}>\n                                <Stack spacing={3}>\n                                    \n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Project\"\n                                            type=\"string\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('Project')}\n\n                                            error={Boolean(touched.Project && errors.Project)}\n                                            helperText={touched.Project && errors.Project}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Joining Date\"\n                                            type=\"date\"\n                                            disabled={disableValue}\n                                            required\n\n                                            InputLabelProps={{ shrink: true }}\n                                            inputProps={{\n                                                min: todayDate  \n                                              }}\n\n                                            {...getFieldProps('JoinDate')}\n\n                                            error={Boolean(touched.JoinDate && errors.JoinDate)}\n                                            helperText={touched.JoinDate && errors.JoinDate}\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"REF NO\"\n                                            disabled\n                                            \n                                            {...getFieldProps('REF_NO')}\n\n                                            error={Boolean(touched.REF_NO && errors.REF_NO)}\n                                            helperText={touched.REF_NO && errors.REF_NO}\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            name=\"OfferDate\"\n                                            label=\"Date Of Offer\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type=\"date\"\n                                            disabled={disableValue}              \n                                           \n                                            {...getFieldProps('OfferDate')}\n\n                                            error={Boolean(touched.OfferDate && errors.OfferDate)}\n                                            helperText={touched.OfferDate && errors.OfferDate}\n                                        >\n                                        </TextField>\n\n                                        <Autocomplete \n                                            fullWidth                         \n                                            id=\"Report_Officer\"\n                                            type=\"string\"\n                                            options={RO_Names}\n                                            disabled={disableValue}\n\n                                            onChange={(event, value) => {\n                                                setFieldValue(\"Report_Officer\", value);\n                                            }}\n\n                                            defaultValue={candOnboardDetailsData?.reporting_officer}\n\n                                            renderInput={(params) => <TextField {...params} label=\"Reporting Officer\" />}\n                                        />\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Sodexo\"\n                                            type=\"string\"\n                                            disabled={disableValue}\n\n                                            select\n\n                                            {...getFieldProps('Sodexo')}\n\n                                            InputLabelProps={{ shrink: true }}\n\n                                            error={Boolean(touched.Sodexo && errors.Sodexo)}\n                                            helperText={touched.Sodexo && errors.Sodexo}\n                                            >\n\n                                            <MenuItem key=\"YES\" value=\"YES\">\n                                            YES\n                                            </MenuItem>\n                                            <MenuItem key=\"NO\" value=\"NO\">\n                                            NO\n                                            </MenuItem>\n                                            <MenuItem key=\"NA\" value=\"NA\">\n                                            NA\n                                            </MenuItem>\n                                        </TextField>\n                                                 \n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Is one covered by Health Insurance?\"\n                                        type=\"string\"\n                                        disabled={disableValue}\n\n                                        select\n\n                                        {...getFieldProps('Health_Insurance')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Health_Insurance && errors.Health_Insurance)}\n                                        helperText={touched.Health_Insurance && errors.Health_Insurance}\n                                        >\n\n                                        <MenuItem key=\"YES\" value=\"YES\">\n                                        YES\n                                        </MenuItem>\n                                        <MenuItem key=\"NO\" value=\"NO\">\n                                        NO\n                                        </MenuItem>\n\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Signing Authority\"\n                                        type=\"string\"\n                                        required\n                                        disabled={disableValue}\n                                        \n                                        select\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        {...getFieldProps('Sign_Auth')}\n                                        \n                                        error={Boolean(touched.Sign_Auth && errors.Sign_Auth)}\n                                        helperText={touched.Sign_Auth && errors.Sign_Auth}\n                                        >\n\n                                        {signingAuthorityData.map((option) => (\n                                        <MenuItem key={option.pk} value={option.pk}>\n                                            {option.authorityName}\n                                        </MenuItem>\n                                        ))}\n\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Group Company Extn.\"\n                                        type=\"string\"\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('Com_Ext')}\n                                        \n                                        error={Boolean(touched.Com_Ext && errors.Com_Ext)}\n                                        helperText={touched.Com_Ext && errors.Com_Ext}\n                                        >\n\n                                    </TextField>\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Onboarding HR\"\n                                        type=\"string\"\n                                        disabled={disableValue}\n\n                                        select\n\n                                        {...getFieldProps('Onboard_HR')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Onboard_HR && errors.Onboard_HR)}\n                                        helperText={touched.Onboard_HR && errors.Onboard_HR}\n                                        >\n\n                                        {onboardingHRData.map((option) => (\n                                        <MenuItem key={option.pk} value={option.pk}>\n                                            {option.hr_name}\n                                        </MenuItem>\n                                        ))}\n   \n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Payroll Company\"\n                                        type=\"string\"\n                                        disabled={disableValue}\n\n                                        select\n                                        required\n\n                                        {...getFieldProps('Payroll_Cmp')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Payroll_Cmp && errors.Payroll_Cmp)}\n                                        helperText={touched.Payroll_Cmp && errors.Payroll_Cmp}\n                                        >\n\n                                        {payrollCompData.map((option) => (\n                                        <MenuItem key={option.pk} value={option.pk}>\n                                            {option.company_name}\n                                        </MenuItem>\n                                        ))}\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"System Requirement\"\n                                        type=\"string\"\n                                        disabled={disableValue}\n\n                                        select\n\n                                        {...getFieldProps('Sys_Req')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Sys_Req && errors.Sys_Req)}\n                                        helperText={touched.Sys_Req && errors.Sys_Req}\n                                        >\n                                        \n                                        <MenuItem key=\"Desktop\" value=\"Desktop\">\n                                            Desktop\n                                        </MenuItem>\n                                        <MenuItem key=\"Laptop\" value=\"Laptop\">\n                                            Laptop\n                                        </MenuItem>\n                                        <MenuItem key=\"Mac\" value=\"Mac\">\n                                            Mac\n                                        </MenuItem>\n    \n                                    </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Accommodation\"\n                                        type=\"string\"\n                                        disabled={disableValue}\n\n                                        select\n\n                                        {...getFieldProps('Accommodation')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Accommodation && errors.Accommodation)}\n                                        helperText={touched.Accommodation && errors.Accommodation}\n                                        >\n\n                                        <MenuItem key=\"YES\" value=\"YES\">\n                                        YES\n                                        </MenuItem>\n                                        <MenuItem key=\"NO\" value=\"NO\">\n                                        NO\n                                        </MenuItem>\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Stay Days\"\n                                        type=\"number\"\n                                        disabled={disableValue}\n\n                                        select\n\n                                        {...getFieldProps('Stay_Days')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Stay_Days && errors.Stay_Days)}\n                                        helperText={touched.Stay_Days && errors.Stay_Days}\n                                        >\n\n                                        <MenuItem key=\"0\" value=\"0\">\n                                            0\n                                        </MenuItem>\n                                        <MenuItem key=\"7\" value=\"7\">\n                                            7\n                                        </MenuItem>\n                                        <MenuItem key=\"10\" value=\"10\">\n                                            10\n                                        </MenuItem>\n                                        <MenuItem key=\"15\" value=\"15\">\n                                            15\n                                        </MenuItem>\n                                        <MenuItem key=\"30\" value=\"30\">\n                                            30\n                                        </MenuItem>\n                                        <MenuItem key=\"45\" value=\"45\">\n                                            45\n                                        </MenuItem>\n                                        <MenuItem key=\"60\" value=\"60\">\n                                            60\n                                        </MenuItem>\n                                        <MenuItem key=\"75\" value=\"75\">\n                                            75\n                                        </MenuItem>\n                                        <MenuItem key=\"90\" value=\"90\">\n                                            90\n                                        </MenuItem>\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Referral Amount\"\n                                        type=\"number\"\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('Ref_Amt')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Ref_Amt && errors.Ref_Amt)}\n                                        helperText={touched.Ref_Amt && errors.Ref_Amt}\n                                        >\n                                    </TextField>\n                                </Stack>\n\n                                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                        label=\"FSD Member Comments\"\n                                        type=\"string\"\n                                        multiline\n                                        rows={3}\n                                        disabled={disableValue}\n\n                                        required\n\n                                        {...getFieldProps('FSD_Cmt')}\n\n                                        sx={{width:\"50%\"}}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.FSD_Cmt && errors.FSD_Cmt)}\n                                        helperText={touched.FSD_Cmt && errors.FSD_Cmt}\n                                        >\n                                    </TextField>\n\n                                </Stack>\n\n                                </Stack>\n                            </CardContent>\n                        </Card>\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ my: 3}}>\n\n                            <LoadingButton\n                                halfWidth\n                                size=\"large\"\n                                type=\"submit\"\n                                variant=\"contained\"\n                                loading={isSubmitting}\n                                sx={{width:\"30%\"}}\n                                disabled={disableValue}\n                            >\n                                Save Onboarding Details\n                            </LoadingButton>\n\n                        </Stack>\n                    </Form>\n                </FormikProvider>\n             </Container>\n        </Page>\n    )\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/candidate/StepperForms/OfferDetails.js",["2194","2195","2196","2197","2198","2199","2200","2201","2202","2203","2204","2205","2206","2207","2208"],"import { useState, useEffect, useMemo } from 'react';\nimport Page from '../../../Page';\nimport {\n    Button, Card, CardContent, Container,\n    Link, Stack, TextField, Typography,\n    InputAdornment, InputLabel, MenuItem,\n    IconButton\n}\n    from '@mui/material';\n\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider, ErrorMessage, Field } from 'formik';\n\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { DatePicker, LoadingButton } from '@mui/lab';\nimport { useSnackbar } from 'notistack'\n\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\n\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { apiInstance } from 'src/utils/apiAuth';\n\n// const apiInstance = axios.create({\n//     baseURL: \"http://127.0.0.1:8000/api/v1/\",\n//     timeout: 10000\n// });\n\n\nexport default function CandOfferDetails({candData}) {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const hrToken = localStorage.getItem(\"authToken\");\n\n    const navigate = useNavigate();\n\n    const [fieldType, setFieldType] = useState('string')\n\n    const [candOfferDetailsData, setCandOfferDetailsData] = useState(candData?.candidateData?.offer_details);\n\n    const [disableValue, setDisableValue] = useState(false)\n   \n    const setOtherValues = () => \n    {\n        let user = JSON.parse(localStorage.getItem(\"user\"))\n        let user_role = user.role.role_name\n            \n        if (user_role === 'BU_HEAD' || user_role === 'OnBoarding_HR')\n        { setDisableValue(true)  }\n\n        else{ setDisableValue(false) }\n    }\n\n    useEffect(() => {\n        setOtherValues();\n    }, [])\n\n    const desig_names = [\n        'Designation',\n        'Junior Software Engineer',\n        'Senior Software Engineer',\n        'Software Analyst',\n        'Project Manager',\n    ]\n    \n    const handleCalendarClick = () => {\n        if (fieldType == 'string'){\n            setFieldType('date')\n        }\n        if (fieldType == 'date'){\n            setFieldType('string')\n        }\n        values.Appraisal_Date=\"\"        \n    }\n\n    const calculateOfferedAmt = (e) => {\n        let offer_ctc_pa = e.target.value\n        let offer_ctc_pm = (offer_ctc_pa/12).toFixed(2)\n        let curr_ctc_pa = values.CurrCTC\n        let offered_hike_per = ((offer_ctc_pa*100)/curr_ctc_pa)-100;\n\n        setFieldValue(\"OfferCTC_PM\", offer_ctc_pm)\n        setFieldValue(\"Offered_Hike\", Math.round(offered_hike_per,2).toFixed(2))\n\n\n        if (offered_hike_per === ''){\n            setFieldValue(\"Hike_Range\", \"NA\")\n        }\n        else if (parseFloat(offered_hike_per) < 0){\n            setFieldValue(\"Hike_Range\", \"NEGATIVE\")\n        }\n        else if (parseFloat(offered_hike_per) > 0 &&  parseFloat(offered_hike_per) < 6){\n            setFieldValue(\"Hike_Range\", \"0 to 5%\")\n        }\n        else if (parseFloat(offered_hike_per) >= 6 &&  parseFloat(offered_hike_per) < 11){\n            setFieldValue(\"Hike_Range\", \"6 to 10%\")\n        }\n        else if (parseFloat(offered_hike_per) >= 11 &&  parseFloat(offered_hike_per) < 21){\n            setFieldValue(\"Hike_Range\", \"11 to 20%\")\n        }\n        else if (parseFloat(offered_hike_per) >= 21 &&  parseFloat(offered_hike_per) < 31){\n            setFieldValue(\"Hike_Range\", \"20 to 30%\")\n        }\n        else if (parseFloat(offered_hike_per) >= 31 &&  parseFloat(offered_hike_per) < 41){\n            setFieldValue(\"Hike_Range\", \"30 to 40%\")\n        }\n        else if (parseFloat(offered_hike_per) >= 41 &&  parseFloat(offered_hike_per) < 51){\n            setFieldValue(\"Hike_Range\", \"40 to 50%\")\n        }\n        else if (parseFloat(offered_hike_per) >= 51 &&  parseFloat(offered_hike_per) < 61){\n            setFieldValue(\"Hike_Range\", \"50 to 60%\")\n        }\n        else if (parseFloat(offered_hike_per) >= 61){\n            setFieldValue(\"Hike_Range\", \">60%\")\n        }\n        else{\n            setFieldValue(\"Hike_Range\", \"NA\")\n        }\n\n    }\n\n    const getExpRange = () => {\n        var cand_exp = candData?.candidateData?.total_experience\n        var exp_rg = ''\n        if (parseFloat(cand_exp) < 1){\n            exp_rg = '< 1'\n        }\n        else if (parseFloat(cand_exp) >= 1 && parseFloat(cand_exp) < 3 ){\n            exp_rg = '1 to 3'\n        }\n        else if (parseFloat(cand_exp) >= 3 && parseFloat(cand_exp) < 5 ){\n            exp_rg = '3 to 5'\n        }\n        else if (parseFloat(cand_exp) >= 5 && parseFloat(cand_exp) < 7 ){\n            exp_rg = '5 to 7'\n        }\n        else if (parseFloat(cand_exp) >= 7 && parseFloat(cand_exp) < 10 ){\n            exp_rg = '7 to 10'\n        }\n        else if (parseFloat(cand_exp) >= 10 && parseFloat(cand_exp) < 12 ){\n            exp_rg = '10 to 12'\n        }\n        else if (parseFloat(cand_exp) >= 12 && parseFloat(cand_exp) < 15 ){\n            exp_rg = '12 to 15'\n        }\n        else if (parseFloat(cand_exp) >= 15){\n            exp_rg = '15+'\n        }\n        else{\n            exp_rg = 'NA'\n        }\n\n        return exp_rg\n    }\n\n    const callOfferDetailsCreateAPI = (formValues) => {\n\n        apiInstance({\n            method: \"post\",\n            url: \"offer-details/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidates\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n\n                setSubmitting(false)\n\n            });\n    }\n\n    const callOfferDetailsUpdateAPI = (formValues, objID) => {  \n        apiInstance({\n            method: \"put\",\n            url: \"offer-details/\" + objID + \"/\",\n            headers: {\n                Authorization: \"token \" + hrToken,\n            },\n            data: formValues,\n        })\n            .then(function (response) {\n                enqueueSnackbar(response.data.message, {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'success',\n                    autoHideDuration: 2000,\n                });\n                navigate(\"/resumeX/candidates\", { replace: true });\n            })\n            .catch(function (error) {\n                enqueueSnackbar('Something went wrong. Please try after sometime.', {\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right',\n                    },\n                    variant: 'error',\n                    autoHideDuration: 2000,\n                });\n                setSubmitting(false)\n            });\n    }\n\n\n    const CandidateSchema = Yup.object().shape({\n        CurrCTC: Yup.number()\n            .required(\"Current CTC is required\"),\n        OfferCTC: Yup.number()\n            .required(\"Offered CTC is required.\"),\n        CurrCTCPM: Yup.number()\n            .required(\"Current CTC (Per Month) is required.\"),\n        OfferCTC_PM: Yup.number()\n            .required(\"Offered CTC (Per Month) is required.\"),\n        Appraisal_Date: Yup.string()\n            .required('Last Appraisal Date is required.'),\n        CTC_before_app: Yup.string()\n            .required('CTC amount before appraisal is required.'),\n        Offered_Hike: Yup.number(),\n        Hike_Range: Yup.string(),\n        Exp_Range: Yup.string(),\n        Revision: Yup.string()\n                     .required(\"Revision is required!\"),\n        Service_Agreement: Yup.string()\n                              .required(\"Service term is required!\"),\n        Prob_Period: Yup.string()\n                        .required(\"Probation period is required!\"),\n        PMS: Yup.string()\n                .required(\"PMS is required!\"),\n        PF: Yup.string()\n               .required(\"PF is required!\"),\n        ESIC: Yup.string()\n                 .required(\"ESIC is required!\"),\n        Var_Type: Yup.string()\n                     .required(\"Variable Type is required!\"),\n        Var_Amt: Yup.string(),\n        Designation: Yup.string()\n                        .required(\"Designation is required!\"),\n        \n    });\n\n    const formik = useFormik({\n        initialValues: useMemo(() => {            \n            let ini_values = {\n                CurrCTC: candData?.candidateData?.current_ctc ?? '',\n                OfferCTC: candOfferDetailsData?.offered_ctc ?? \"\",\n                CurrCTCPM: candOfferDetailsData?.curr_ctc_monthly ?? ((candData?.candidateData?.current_ctc)/12).toFixed(2) ?? \"\",\n                OfferCTC_PM: candOfferDetailsData?.offered_ctc_monthly ?? \"\",\n                Appraisal_Date: candOfferDetailsData?.appraisal_date ?? \"\",\n                CTC_before_app: candOfferDetailsData?.appraisal_ctc ?? \"\",\n                Offered_Hike: candOfferDetailsData?.offered_hike ?? \"\",\n                Hike_Range: candOfferDetailsData?.hike_range ?? \"NA\",\n                Exp_Range: candOfferDetailsData?.exp_range ?? getExpRange(),\n                Revision:candOfferDetailsData?.revision ?? \"\",\n                Service_Agreement: candOfferDetailsData?.serve_agree ?? \"\",\n                Prob_Period: candOfferDetailsData?.probation ?? \"\",\n                PMS: candOfferDetailsData?.pms ?? \"\",\n                PF: candOfferDetailsData?.pf ?? \"\",\n                ESIC: candOfferDetailsData?.esic ?? \"\",\n                Var_Type: candOfferDetailsData?.var_type ?? \"\",\n                Designation: candOfferDetailsData?.designation ?? \"\",\n                Var_Amt: candOfferDetailsData?.var_amt ?? \"\"\n                \n            }\n            return ini_values;\n          }, []),\n\n        enableReinitialize: true,\n        validationSchema: CandidateSchema,\n        onSubmit: (values) => {\n            var cand_id = candData?.candidateData?.id\n\n            var apiData = {\n                \"candidate_id\": cand_id,\n                \"offered_ctc\": parseFloat(values.OfferCTC),\n                \"offered_ctc_monthly\": parseFloat(values.OfferCTC_PM),\n                \"curr_ctc_monthly\": parseFloat(values.CurrCTCPM),\n                \"appraisal_date\": values.Appraisal_Date,\n                \"appraisal_ctc\": values.CTC_before_app,\n                \"offered_hike\": parseFloat(values.Offered_Hike),\n                \"hike_range\": values.Hike_Range,\n                \"exp_range\": values.Exp_Range,\n                \"revision\": values.Revision,\n                \"serve_agree\": values.Service_Agreement,\n                \"probation\": values.Prob_Period,\n                \"pms\": values.PMS,\n                \"pf\": values.PF,\n                \"esic\": values.ESIC,\n                \"var_type\": values.Var_Type,\n                \"var_amt\": values.Var_Amt,\n                \"designation\": values.Designation,\n            }\n\n            if(candOfferDetailsData === null){\n                callOfferDetailsCreateAPI(apiData)\n            }\n            else{\n                var OD_ID = candOfferDetailsData?.id\n                callOfferDetailsUpdateAPI(apiData, OD_ID)\n            }\n        }\n    });\n\n    const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps, setSubmitting, handleChange, setFieldValue } = formik;\n\n    return (\n        <Page title=\"Candidates\">\n            <Container maxWidth=\"xl\">\n                <FormikProvider value={formik}>\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\n                        <Card sx={{ mt: 2 }} variant=\"outlined\">\n\n                            <CardContent sx={{ mt: 2 }}>\n                                <Stack spacing={3}>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Current CTC (PA)\"\n                                            name=\"CurrCTC\"\n                                            type=\"number\"\n                                            required\n                                            disabled\n\n                                            {...getFieldProps('CurrCTC')}\n\n                                            error={Boolean(touched.CurrCTC && errors.CurrCTC)}\n                                            helperText={touched.CurrCTC && errors.CurrCTC}\n\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Offered CTC (PA)\"\n                                            name=\"OfferCTC\"\n                                            type=\"number\"\n                                            onInput={calculateOfferedAmt}\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('OfferCTC')}\n\n                                            error={Boolean(touched.OfferCTC && errors.OfferCTC)}\n                                            helperText={touched.OfferCTC && errors.OfferCTC}\n\n                                        >\n                                        </TextField>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Current CTC (PM)\"\n                                            name=\"CurrCTCPM\"\n                                            type=\"number\"\n                                            required\n                                            disabled\n\n                                            {...getFieldProps('CurrCTCPM')}\n\n                                            error={Boolean(touched.CurrCTCPM && errors.CurrCTCPM)}\n                                            helperText={touched.CurrCTCPM && errors.CurrCTCPM}\n\n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                        <TextField\n                                            fullWidth\n                                            label=\"Offered Fixed CTC (PM)\"\n                                            name=\"OfferCTC_PM\"\n                                            type=\"number\"\n                                            required\n                                            disabled={disableValue}\n\n                                            {...getFieldProps('OfferCTC_PM')}\n\n                                            error={Boolean(touched.OfferCTC_PM && errors.OfferCTC_PM)}\n                                            helperText={touched.OfferCTC_PM && errors.OfferCTC_PM}\n\n                                        >\n                                        </TextField>\n\n                                        <IconButton onClick={handleCalendarClick}>\n                                        <CalendarMonthIcon fontSize='medium'/>\n                                        </IconButton>\n\n                                        \n                                        <TextField\n                                            fullWidth\n                                            name=\"Appraisal_Date\"\n                                            label=\"Last App. Date\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type={fieldType}\n                                            disabled={disableValue}\n                                            required\n                                            \n\n                                            {...getFieldProps('Appraisal_Date')}\n\n                                            error={Boolean(touched.Appraisal_Date && errors.Appraisal_Date)}\n                                            helperText={touched.Appraisal_Date && errors.Appraisal_Date}                                            \n                                        >\n                                        </TextField>\n                                                                        \n                                        <TextField\n                                            fullWidth\n                                            name=\"CTC_before_app\"\n                                            label=\"CTC Before App.(PM)\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type=\"string\"\n                                            disabled={disableValue}\n\n                                            required                                          \n                                            {...getFieldProps('CTC_before_app')}\n\n                                            error={Boolean(touched.CTC_before_app && errors.CTC_before_app)}\n                                            helperText={touched.CTC_before_app && errors.CTC_before_app}                                            \n                                        >\n                                        </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                            fullWidth\n                                            name=\"Offered_Hike\"\n                                            label=\"Offered Hike\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type=\"number\"\n                                            disabled                                          \n                                            {...getFieldProps('Offered_Hike')}\n\n                                            error={Boolean(touched.Offered_Hike && errors.Offered_Hike)}\n                                            helperText={touched.Offered_Hike && errors.Offered_Hike}                                            \n                                        >\n                                     </TextField>\n\n                                     <TextField\n                                            fullWidth\n                                            name=\"Hike_Range\"\n                                            label=\"Hike Range\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type=\"string\"\n\n                                            disabled                                          \n                                            {...getFieldProps('Hike_Range')}\n\n                                            error={Boolean(touched.Hike_Range && errors.Hike_Range)}\n                                            helperText={touched.Hike_Range && errors.Hike_Range}                                            \n                                        >\n                                     </TextField>\n\n                                     <TextField\n                                            fullWidth\n                                            name=\"Exp_Range\"\n                                            label=\"Experience Range\"\n                                            InputLabelProps={{ shrink: true }}\n                                            type=\"string\"\n\n                                            disabled                                          \n                                            {...getFieldProps('Exp_Range')}\n\n                                            error={Boolean(touched.Exp_Range && errors.Exp_Range)}\n                                            helperText={touched.Exp_Range && errors.Exp_Range}                          \n                                        >\n                                     </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Revision\"\n                                        type=\"string\"\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('Revision')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Revision && errors.Revision)}\n                                        helperText={touched.Revision && errors.Revision}\n                                        >\n\n                                        <MenuItem key=\"NA\" value=\"NA\">\n                                            NA\n                                        </MenuItem>\n                                        <MenuItem key=\"3 months\" value=\"3 months\">\n                                        3 months\n                                        </MenuItem>\n                                        <MenuItem key=\"4 months\" value=\"4 months\">\n                                        4 months\n                                        </MenuItem>\n                                        <MenuItem key=\"6 months\" value=\"6 months\">\n                                        6 months\n                                        </MenuItem>\n                                        <MenuItem key=\"9 months\" value=\"9 months\">\n                                        9 months\n                                        </MenuItem>\n                                        <MenuItem key=\"12 months\" value=\"12 months\">\n                                        12 months\n                                        </MenuItem>\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Service Agreement\"\n                                        type=\"string\"\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('Service_Agreement')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Service_Agreement && errors.Service_Agreement)}\n                                        helperText={touched.Service_Agreement && errors.Service_Agreement}\n                                        >\n\n                                        <MenuItem key=\"0\" value=\"0\">\n                                            0\n                                        </MenuItem>\n                                        <MenuItem key=\"12\" value=\"12\">\n                                        12\n                                        </MenuItem>\n                                        <MenuItem key=\"18\" value=\"18\">\n                                        18\n                                        </MenuItem>\n                                        <MenuItem key=\"24\" value=\"24\">\n                                        24\n                                        </MenuItem>\n                                        <MenuItem key=\"30\" value=\"30\">\n                                        30\n                                        </MenuItem>\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Probation Period\"\n                                        type=\"string\"\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('Prob_Period')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Prob_Period && errors.Prob_Period)}\n                                        helperText={touched.Prob_Period && errors.Prob_Period}\n                                        >\n\n                                        <MenuItem key=\"NA\" value=\"NA\">\n                                            NA\n                                        </MenuItem>\n                                        <MenuItem key=\"3 months\" value=\"3 months\">\n                                        3 months\n                                        </MenuItem>\n                                        <MenuItem key=\"6 months\" value=\"6 months\">\n                                        6 months\n                                        </MenuItem>\n                                        <MenuItem key=\"9 months\" value=\"9 months\">\n                                        9 months\n                                        </MenuItem>\n                                        <MenuItem key=\"12 months\" value=\"12 months\">\n                                        12 months\n                                        </MenuItem>\n                                    </TextField>\n\n                                        \n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n                                    \n                                    <TextField\n                                        fullWidth\n                                        label=\"PMS\"\n                                        type=\"string\"\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('PMS')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.PMS && errors.PMS)}\n                                        helperText={touched.PMS && errors.PMS}\n                                        >\n\n                                        <MenuItem key=\"YES\" value=\"YES\">\n                                        YES\n                                        </MenuItem>\n                                        <MenuItem key=\"NO\" value=\"NO\">\n                                        NO\n                                        </MenuItem>\n                                        <MenuItem key=\"YES_W/O_BONUS\" value=\"YES_W/O_BONUS\">\n                                        YES W/O BONUS\n                                        </MenuItem>\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"PF\"\n                                        type=\"PF\"\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('PF')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.PF && errors.PF)}\n                                        helperText={touched.PF && errors.PF}\n                                        >\n\n                                        <MenuItem key=\"YES\" value=\"YES\">\n                                        YES\n                                        </MenuItem>\n                                        <MenuItem key=\"NO\" value=\"NO\">\n                                        NO\n                                        </MenuItem>\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"ESIC\"\n                                        type=\"string\"\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('ESIC')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.ESIC && errors.ESIC)}\n                                        helperText={touched.ESIC && errors.ESIC}\n                                        >\n\n                                        <MenuItem key=\"YES\" value=\"YES\">\n                                        YES\n                                        </MenuItem>\n                                        <MenuItem key=\"NO\" value=\"NO\">\n                                        NO\n                                        </MenuItem>\n                                    </TextField>\n\n                                    </Stack>\n\n                                    <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Variable Type\"\n                                        type=\"string\"\n                                        select\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('Var_Type')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Var_Type && errors.Var_Type)}\n                                        helperText={touched.Var_Type && errors.Var_Type}\n                                        >\n\n                                        <MenuItem key=\"NA\" value=\"NA\">\n                                        NA\n                                        </MenuItem>\n                                        <MenuItem key=\"FIXED\" value=\"FIXED\">\n                                        FIXED\n                                        </MenuItem>\n                                        <MenuItem key=\"KRA BASED\" value=\"KRA BASED\">\n                                        KRA BASED\n                                        </MenuItem>\n                                    </TextField>\n\n                                    <TextField\n                                        fullWidth\n                                        label=\"Variable Amount\"\n                                        type=\"number\"\n                                        disabled={disableValue}\n\n                                        {...getFieldProps('Var_Amt')}\n\n                                        InputLabelProps={{ shrink: true }}\n\n                                        error={Boolean(touched.Var_Amt && errors.Var_Amt)}\n                                        helperText={touched.Var_Amt && errors.Var_Amt}\n                                        >\n                                    </TextField>\n\n                                    <Autocomplete\n                                        fullWidth\n                                        id=\"Designation\"\n                                        type=\"string\"\n                                        options={desig_names}\n                                        defaultValue={candOfferDetailsData?.designation}\n                                        onChange={(event, value) => {\n                                            setFieldValue(\"Designation\", value);\n                                          }}\n                                        renderInput={(params) => <TextField {...params} \n                                        \n                                        label=\"Designation\" \n                                        disabled={disableValue}\n\n                                        error={Boolean(touched.Designation && errors.Designation)}\n                                        helperText={touched.Designation && errors.Designation}\n                                        />}\n                                    />\n\n                                    </Stack>\n\n                                </Stack>\n                            </CardContent>\n                        </Card>\n\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ my: 3}}>\n\n                        <LoadingButton\n                            halfWidth\n                            size=\"large\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            loading={isSubmitting}\n                            sx={{width:\"30%\"}}\n                            disabled={disableValue}\n                        >\n                            Save Offer Details\n                        </LoadingButton>\n                        </Stack>\n\n                    </Form>\n                </FormikProvider>\n            </Container>\n        </Page>\n    )\n}","/home/raj/Desktop/resumeX/resumeX/src/components/authentication/register/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/index.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppConversionRates.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppCurrentVisits.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppBugReports.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppCurrentSubject.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppItemOrders.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppNewUsers.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppNewsUpdate.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppOrderTimeline.js",["2209"],"import React, { useEffect } from \"react\";\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\n// material\nimport { Autocomplete, Card, TextField, Typography, CardHeader, CardContent, Button, Link } from '@mui/material';\nimport {\n  Timeline,\n  TimelineItem,\n  TimelineContent,\n  TimelineConnector,\n  TimelineSeparator,\n  TimelineDot\n} from '@mui/lab';\nimport * as constants from \"src/utils/constants\";\nimport {Link as RouterLink} from 'react-router-dom';\n\nexport default function AppOrderTimeline() {\n  const [candidateData, setCandidateData] = useState([])\n  const getCandidates = () => {\n    axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/candidate-viewset/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n    .then((response) => {\n      setCandidateData(response.data.data.sort((a, b) => b.id - a.id))\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  };\n\n  useEffect(() => {\n    getCandidates()\n  }, [])\n\n  const [jobApplicationData, setJobApplicationData] = useState([])\n\n  const [candidateID, setCandidateID] = useState([])\n  const [enableCandidateViewButton, setEnableCandidateViewButton] = useState([])\n\n  const onCandidateChange = (value) => {\n    setCandidateID(value?.id)\n    setEnableCandidateViewButton(true)\n\n    const id = value?.job_application?.[0]?.id\n\n    axios.get(constants.HTTP_METHOD + constants.HTTP_URL + constants.HTTP_PORT + '/api/v1/job-application/' + id + '/', {headers: {\"Authorization\" : `Token ${localStorage.getItem('authToken')}`}})\n    .then((response) => {\n        setJobApplicationData(response.data.data)\n    })\n    .catch((e) => console.log('something went wrong :(', e));\n  }\n\n  function getRegistrationDateTime(){\n    return jobApplicationData?.resume?.candidate?.user?.joined_date.substring(0, 10) + \" | \" + jobApplicationData?.resume?.candidate?.user?.joined_date.substring(11, 16)\n  }\n\n  const getHRInterviewDateTime = () => { \n    const HRDateTime = jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'SCREENING_ROUND'\n    })\n    return HRDateTime?.[0]?.modified.substring(0, 10).split('-').reverse().join('/') + \" | \" + HRDateTime?.[0]?.modified.substring(11, 16)\n  }\n\n  function getTechnicalInterviewOneDateTime(){\n    const TechnicalDateTime = jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'TECHNICAL_ROUND_ONE'\n    })\n    return TechnicalDateTime?.[0]?.modified.substring(0, 10).split('-').reverse().join('/') + \" | \" + TechnicalDateTime?.[0]?.modified.substring(11, 16)\n  }\n\n  function getTechnicalInterviewTwoDateTime(){\n    const TechnicalDateTime = jobApplicationData?.interview_details?.filter(item => {\n        return item.interview_round === 'TECHNICAL_ROUND_Two'\n    })\n    return TechnicalDateTime?.[0]?.modified.substring(0, 10).split('-').reverse().join('/') + \" | \" + TechnicalDateTime?.[0]?.modified.substring(11, 16)\n  }\n\n  function getReviewCandidateDateTime(){\n    const confirmedInterviewData = jobApplicationData?.interview_details?.filter(item => {\n      return item.interview_round === 'REVIEW_CANDIDATE'\n  })\n  return confirmedInterviewData?.[0]?.modified.substring(0, 10).split('-').reverse().join('/') + \" | \" + confirmedInterviewData?.[0]?.modified.substring(11, 16)\n  }\n\n  function getInterviewProcessResult(){\n    if (jobApplicationData?.is_candidate_selected){\n      return jobApplicationData?.modified?.substring(0, 10).split('-').reverse().join('/') + \" | \" + jobApplicationData?.modified?.substring(11, 16)\n    }\n    else{\n      return \"undefined | undefined\"\n    }\n  }\n\n  function OrderItem({ item, color, isLast }) {\n    const { type, title, time } = item;\n    return (\n      <TimelineItem>\n        <TimelineSeparator>\n          <TimelineDot\n            sx={{\n              bgcolor:\n                (type === 'task1' && color) ||\n                (type === 'task2' && color) ||\n                (type === 'task3' && color) ||\n                (type === 'task4' && color) ||\n                (type === 'task5' && color) ||\n                (type === 'task6' && color) ||\n                'error.main'\n            }}\n          />\n          {isLast ? null : <TimelineConnector />}\n        </TimelineSeparator>\n        <TimelineContent>\n          <Typography variant=\"subtitle2\">{title}</Typography>\n          <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\n            {time}\n          </Typography>\n        </TimelineContent>\n      </TimelineItem>\n    );\n  }\n\n  OrderItem.propTypes = {\n    item: PropTypes.object,\n    isLast: PropTypes.bool\n  };\n\n  const TIMELINES = [\n    {\n      title: 'Registration',\n      time: getRegistrationDateTime() === \"undefined | undefined\" ? \"None\" : getRegistrationDateTime(),\n      type: 'task1',\n      color: getRegistrationDateTime() === \"undefined | undefined\" ? \"error.main\" : \"success.main\"\n    },\n    {\n      title: 'Screening Round',\n      time: getHRInterviewDateTime() === \"undefined | undefined\" ? \"None\" : getHRInterviewDateTime(),\n      type: 'task3',\n      color: getHRInterviewDateTime() === \"undefined | undefined\" ? \"error.main\" : \"success.main\"\n    },\n    {\n      title: 'Review Candidate',\n      time: getReviewCandidateDateTime() === \"undefined | undefined\" ? \"None\" : getReviewCandidateDateTime(),\n      type: 'task2',\n      color: getReviewCandidateDateTime() === \"undefined | undefined\" ? \"error.main\" : \"success.main\"\n    },\n    {\n      title: 'Technical Round 1',\n      time: getTechnicalInterviewOneDateTime() === \"undefined | undefined\" ? \"None\" : getTechnicalInterviewOneDateTime(),\n      type: 'task4',\n      color: getTechnicalInterviewOneDateTime() === \"undefined | undefined\" ? \"error.main\" : \"success.main\"\n    },\n    {\n      title: 'Technical Round 2',\n      time: getTechnicalInterviewTwoDateTime() === \"undefined | undefined\" ? \"None\" : getTechnicalInterviewTwoDateTime(),\n      type: 'task5',\n      color: getTechnicalInterviewTwoDateTime() === \"undefined | undefined\" ? \"error.main\" : \"success.main\"\n    },\n    {\n      title: 'End of Interview Process',\n      time: getInterviewProcessResult() === \"undefined | undefined\" ? \"No\" : getInterviewProcessResult(),\n      type: 'task6',\n      color: getInterviewProcessResult() === \"undefined | undefined\" ? \"error.main\" : \"success.main\"\n    }\n  ];\n\n  return (\n    <Card\n      sx={{\n        '& .MuiTimelineItem-missingOppositeContent:before': {\n          display: 'none'\n        }\n      }}\n    >\n      <CardHeader title=\"Candidate Timeline\" />\n      <CardContent>\n      <Autocomplete\n        fullWidth\n        disablePortal\n        id=\"combo-box-demo\"\n        // sx={{mb: 1}}\n        size=\"small\"\n        options={candidateData}\n        getOptionLabel={(option) => option.user.first_name + \" \" + option.user.last_name + \" | \" + option.user.mobile}\n        onChange={(event, value) => onCandidateChange(value)}\n        renderInput={(params) => <TextField {...params} label=\"Candidate\" />}\n      />\n\n        <Timeline>\n          {TIMELINES.map((item, index) => (\n            <OrderItem key={item.title} item={item} color={item.color} isLast={index === TIMELINES.length - 1} />\n          ))}\n        </Timeline>\n      </CardContent>\n\n      <CardContent sx={{mt: -13}} align=\"right\">\n          {enableCandidateViewButton === true ? (\n          // <Link to={`/resumeX/candidates/edit/` + candidateID }\n          //     color=\"green\" \n          //     underline=\"hover\" \n          //     component={RouterLink} \n          //     fontSize=\"20px\"> \n          //       <Button variant=\"contained\" size=\"small\">View Candidate</Button>\n          // </Link>\n          <RouterLink \n              to={`/resumeX/candidates/edit/${candidateID}`}\n              state={{fromPage: \"app\"}} \n              style={{textDecoration: 'none', \n                      color: '#00AB55', \n                      fontWeight: 'bold'}}> \n              <Button variant=\"contained\" size=\"small\">View Candidate</Button>\n          </RouterLink>\n          ) : (\"\")}\n      </CardContent>\n    </Card>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppTrafficBySite.js",["2210","2211","2212"],"import faker from 'faker';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport googleFill from '@iconify/icons-eva/google-fill';\nimport twitterFill from '@iconify/icons-eva/twitter-fill';\nimport facebookFill from '@iconify/icons-eva/facebook-fill';\nimport linkedinFill from '@iconify/icons-eva/linkedin-fill';\nimport githubFill from '@iconify/icons-eva/github-fill';\nimport globe2Fill from '@iconify/icons-eva/globe-2-fill';\n// material\nimport { Box, Grid, Card, Paper, Typography, CardHeader, CardContent } from '@mui/material';\n// utils\nimport { fShortenNumber } from '../../../utils/formatNumber';\n\n// ----------------------------------------------------------------------\n\nconst SOCIALS = [\n  {\n    name: 'GitHub',\n    value: 45,\n    icon: <Icon icon={githubFill} color=\"#000000\" width={32} height={32} />\n  },\n  {\n    name: 'Google',\n    value: 435,\n    icon: <Icon icon={googleFill} color=\"#DF3E30\" width={32} height={32} />\n  },\n  {\n    name: 'Linkedin',\n    value: 200,\n    icon: <Icon icon={linkedinFill} color=\"#006097\" width={32} height={32} />\n  },\n  {\n    name: 'Naukri',\n    value: 150,\n    icon: <Icon icon={globe2Fill} color=\"#1C9CEA\" width={32} height={32} />\n  }\n];\n\n// ----------------------------------------------------------------------\n\nSiteItem.propTypes = {\n  site: PropTypes.object\n};\n\nfunction SiteItem({ site }) {\n  const { icon, value, name } = site;\n\n  return (\n    <Grid item xs={6}>\n      <Paper variant=\"outlined\" sx={{ py: 2.5, textAlign: 'center' }}>\n        <Box sx={{ mb: 0.5 }}>{icon}</Box>\n        <Typography variant=\"h6\">{fShortenNumber(value)}</Typography>\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          {name}\n        </Typography>\n      </Paper>\n    </Grid>\n  );\n}\n\nexport default function AppTrafficBySite() {\n  return (\n    <Card>\n      <CardHeader title=\"Candidate Source\" />\n      <CardContent>\n        <Grid container spacing={2}>\n          {SOCIALS.map((site) => (\n            <SiteItem key={site.name} site={site} />\n          ))}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppWebsiteVisits.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppWeeklySales.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/HrDashboard/app/AppTasks.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/authentication/register/RegisterForm.js",["2213","2214"],"import React, { useEffect } from \"react\";\nimport * as Yup from \"yup\";\nimport { useFormik, Form, FormikProvider, Field } from \"formik\";\nimport { useNavigate } from \"react-router-dom\";\n// material\nimport { Stack, TextField } from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\n\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport { apiInstance } from \"src/utils/apiAuth\";\n\n// ----------------------------------------------------------------------\n\n// const apiInstance = axios.create({\n//   baseURL: \"http://127.0.0.1:8000/api/v1\",\n//   timeout: 10000 \n// });\n\nexport default function RegisterForm() {\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const candToken = localStorage.getItem(\"candidateToken\");\n\n  const candidateEmail = localStorage.getItem('candEmail')\n\n  const navigate = useNavigate();\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"First name required\"),\n    lastName: Yup.string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Last name required\"),\n    email: Yup.string()\n      .email(\"Email must be a valid email address\")\n      .required(\"Email is required\"),\n    gender: Yup.string().required(\"Gener is required\"),\n    dob: Yup.string().required(\"Birth date is required\"),\n  });\n\n  const callCandidateRegisterpApi = (candDetails) => {\n    apiInstance({\n      method: \"put\",\n      url: \"/candidate/\",\n      headers: {\n        Authorization: \"token \" + candToken,\n      },\n      data: {\n        first_name: candDetails.firstName,\n        last_name: candDetails.lastName,\n        email: candDetails.email,\n        dob: candDetails.dob,\n        gender: candDetails.gender,\n      },\n    })\n      .then(function (response) {\n        if (response.status === 200) {\n          enqueueSnackbar(\"Information saved successfully !\", {\n            anchorOrigin: {\n              vertical: \"top\",\n              horizontal: \"right\",\n            },\n            variant: \"success\",\n            autoHideDuration: 1500,\n          });\n\n          let userDetails = response.data.data;\n\n          let fName = userDetails.user.first_name;\n          let lName = userDetails.user.last_name;\n          let usrEmail = candidateEmail\n\n          localStorage.setItem(\"candidateFirstName\", fName);\n          localStorage.setItem(\"candidateLastName\", lName);\n          localStorage.setItem(\"candidateEmail\", usrEmail);\n\n          navigate(\"/dashboard/app\", { replace: true });\n          \n        }\n      })\n      .catch(function (error) {\n        enqueueSnackbar(\"Something went wrong. Please try after sometime. \", {\n          anchorOrigin: {\n            vertical: \"top\",\n            horizontal: \"right\",\n          },\n          variant: \"error\",\n          autoHideDuration: 2000,\n        });\n\n        setSubmitting(false);\n      });\n  };\n  \n  const formik = useFormik({\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: candidateEmail,\n      gender: \"FEMALE\",\n      dob: \"\",\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: (formValues) => {\n      callCandidateRegisterpApi(formValues);\n    },\n  });\n\n  const { errors, touched,  handleSubmit, isSubmitting,  getFieldProps, setSubmitting } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={2}>\n            <TextField\n              fullWidth\n              label=\"First name\"\n              {...getFieldProps(\"firstName\")}\n              error={Boolean(touched.firstName && errors.firstName)}\n              helperText={touched.firstName && errors.firstName}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Last name\"\n              {...getFieldProps(\"lastName\")}\n              error={Boolean(touched.lastName && errors.lastName)}\n              helperText={touched.lastName && errors.lastName}\n            />\n          </Stack>\n\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"email\"\n            label=\"Email address\"\n            disabled\n            {...getFieldProps(\"email\")}\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <TextField\n            id=\"dob\"\n            label=\"Date of birth\"\n            type=\"date\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            {...getFieldProps(\"dob\")}\n            error={Boolean(touched.dob && errors.dob)}\n            helperText={touched.dob && errors.dob}\n          />\n\n          <div role=\"group\">\n            <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={3}>\n              <div id=\"gender-radio-group\"> Gender </div>\n              <label>\n                <Field type=\"radio\" name=\"gender\" value=\"MALE\" />\n                &nbsp; Male\n              </label>\n              <label>\n                <Field\n                  type=\"radio\"\n                  name=\"gender\"\n                  value=\"FEMALE\"\n                  checked={true}\n                />\n                &nbsp; Female\n              </label>\n            </Stack>\n          </div>\n\n          <LoadingButton\n            fullWidth\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n          >\n            Register\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppConversionRates.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppBugReports.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppCurrentSubject.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppCurrentVisits.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppItemOrders.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppNewUsers.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppNewsUpdate.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppOrderTimeline.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppTrafficBySite.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppTasks.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppWebsiteVisits.js",[],"/home/raj/Desktop/resumeX/resumeX/src/components/_dashboard/app/AppWeeklySales.js",[],{"ruleId":"2215","replacedBy":"2216"},{"ruleId":"2217","replacedBy":"2218"},{"ruleId":"2219","severity":1,"message":"2220","line":2,"column":8,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2223","line":1,"column":17,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2224","line":1,"column":27,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":37},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":40,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":48},{"ruleId":"2219","severity":1,"message":"2226","line":9,"column":3,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2227","line":10,"column":3,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2228","line":11,"column":3,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2229","line":12,"column":3,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2230","line":14,"column":3,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2231","line":16,"column":3,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2232","line":17,"column":3,"nodeType":"2221","messageId":"2222","endLine":17,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2233","line":18,"column":3,"nodeType":"2221","messageId":"2222","endLine":18,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2234","line":19,"column":3,"nodeType":"2221","messageId":"2222","endLine":19,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2235","line":20,"column":3,"nodeType":"2221","messageId":"2222","endLine":20,"endColumn":21},{"ruleId":"2219","severity":1,"message":"2236","line":24,"column":7,"nodeType":"2221","messageId":"2222","endLine":24,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2237","line":35,"column":11,"nodeType":"2221","messageId":"2222","endLine":35,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2238","line":4,"column":10,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2239","line":4,"column":38,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":48},{"ruleId":"2219","severity":1,"message":"2240","line":6,"column":8,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2241","line":9,"column":10,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2242","line":10,"column":10,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2243","line":1,"column":8,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2244","line":3,"column":17,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2225","line":3,"column":28,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2245","line":4,"column":10,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":24,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2247","line":4,"column":32,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2248","line":4,"column":38,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":49},{"ruleId":"2219","severity":1,"message":"2249","line":4,"column":62,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":71},{"ruleId":"2219","severity":1,"message":"2250","line":4,"column":85,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":93},{"ruleId":"2219","severity":1,"message":"2251","line":1,"column":18,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2252","line":4,"column":23,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2253","line":9,"column":21,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2254","line":9,"column":37,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":49},{"ruleId":"2219","severity":1,"message":"2255","line":9,"column":51,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2256","line":42,"column":11,"nodeType":"2221","messageId":"2222","endLine":42,"endColumn":25},{"ruleId":"2257","severity":1,"message":"2258","line":52,"column":109,"nodeType":"2259","messageId":"2260","endLine":52,"endColumn":110,"fix":"2261"},{"ruleId":"2219","severity":1,"message":"2262","line":7,"column":8,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2226","line":17,"column":3,"nodeType":"2221","messageId":"2222","endLine":17,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2227","line":18,"column":3,"nodeType":"2221","messageId":"2222","endLine":18,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2228","line":19,"column":3,"nodeType":"2221","messageId":"2222","endLine":19,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2229","line":20,"column":3,"nodeType":"2221","messageId":"2222","endLine":20,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2230","line":22,"column":3,"nodeType":"2221","messageId":"2222","endLine":22,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2234","line":27,"column":3,"nodeType":"2221","messageId":"2222","endLine":27,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2243","line":34,"column":8,"nodeType":"2221","messageId":"2222","endLine":34,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2263","line":43,"column":11,"nodeType":"2221","messageId":"2222","endLine":43,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2264","line":51,"column":9,"nodeType":"2221","messageId":"2222","endLine":51,"endColumn":24},{"ruleId":"2265","severity":1,"message":"2266","line":89,"column":7,"nodeType":"2267","endLine":89,"endColumn":9,"suggestions":"2268"},{"ruleId":"2219","severity":1,"message":"2269","line":3,"column":10,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2270","line":5,"column":8,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2246","line":8,"column":9,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2271","line":76,"column":7,"nodeType":"2221","messageId":"2222","endLine":76,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2250","line":4,"column":126,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":134},{"ruleId":"2219","severity":1,"message":"2251","line":2,"column":18,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2246","line":5,"column":9,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2270","line":10,"column":8,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2271","line":78,"column":7,"nodeType":"2221","messageId":"2222","endLine":78,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2272","line":87,"column":12,"nodeType":"2221","messageId":"2222","endLine":87,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2272","line":89,"column":12,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":24},{"ruleId":"2273","severity":1,"message":"2274","line":96,"column":9,"nodeType":"2275","messageId":"2276","endLine":96,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2272","line":89,"column":10,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2277","line":14,"column":9,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2272","line":96,"column":10,"nodeType":"2221","messageId":"2222","endLine":96,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2279","line":89,"column":11,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2272","line":91,"column":12,"nodeType":"2221","messageId":"2222","endLine":91,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2280","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2245","line":6,"column":15,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2281","line":95,"column":30,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":95,"column":111,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2283","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":24},{"ruleId":"2265","severity":1,"message":"2284","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2285"},{"ruleId":"2219","severity":1,"message":"2282","line":121,"column":111,"nodeType":"2221","messageId":"2222","endLine":121,"endColumn":123},{"ruleId":"2265","severity":1,"message":"2286","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2287"},{"ruleId":"2219","severity":1,"message":"2282","line":121,"column":111,"nodeType":"2221","messageId":"2222","endLine":121,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2281","line":93,"column":30,"nodeType":"2221","messageId":"2222","endLine":93,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":93,"column":111,"nodeType":"2221","messageId":"2222","endLine":93,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2280","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2245","line":6,"column":15,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2281","line":95,"column":30,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":95,"column":111,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2279","line":89,"column":11,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2272","line":91,"column":12,"nodeType":"2221","messageId":"2222","endLine":91,"endColumn":24},{"ruleId":"2265","severity":1,"message":"2288","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2289"},{"ruleId":"2219","severity":1,"message":"2282","line":121,"column":111,"nodeType":"2221","messageId":"2222","endLine":121,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2279","line":89,"column":11,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2272","line":91,"column":12,"nodeType":"2221","messageId":"2222","endLine":91,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2280","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2245","line":6,"column":15,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2281","line":95,"column":30,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":95,"column":111,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2239","line":3,"column":33,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":43},{"ruleId":"2219","severity":1,"message":"2290","line":7,"column":31,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":35},{"ruleId":"2265","severity":1,"message":"2291","line":39,"column":8,"nodeType":"2267","endLine":39,"endColumn":10,"suggestions":"2292"},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2281","line":95,"column":30,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":95,"column":111,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2283","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2293","line":2,"column":8,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2294","line":5,"column":10,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2295","line":16,"column":10,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2243","line":20,"column":8,"nodeType":"2221","messageId":"2222","endLine":20,"endColumn":13},{"ruleId":"2265","severity":1,"message":"2296","line":174,"column":6,"nodeType":"2267","endLine":174,"endColumn":8,"suggestions":"2297"},{"ruleId":"2219","severity":1,"message":"2298","line":269,"column":11,"nodeType":"2221","messageId":"2222","endLine":269,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2299","line":270,"column":11,"nodeType":"2221","messageId":"2222","endLine":270,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2300","line":278,"column":10,"nodeType":"2221","messageId":"2222","endLine":278,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2238","line":6,"column":10,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2294","line":6,"column":15,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2246","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2252","line":11,"column":5,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2249","line":11,"column":11,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2301","line":12,"column":5,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2280","line":12,"column":33,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2302","line":12,"column":43,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":50},{"ruleId":"2219","severity":1,"message":"2303","line":12,"column":52,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2251","line":15,"column":18,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2304","line":15,"column":43,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":52},{"ruleId":"2219","severity":1,"message":"2255","line":16,"column":51,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2237","line":32,"column":13,"nodeType":"2221","messageId":"2222","endLine":32,"endColumn":24},{"ruleId":"2305","severity":1,"message":"2306","line":91,"column":27,"nodeType":"2307","messageId":"2276","endLine":91,"endColumn":29},{"ruleId":"2219","severity":1,"message":"2308","line":160,"column":9,"nodeType":"2221","messageId":"2222","endLine":160,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2309","line":160,"column":17,"nodeType":"2221","messageId":"2222","endLine":160,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2281","line":160,"column":26,"nodeType":"2221","messageId":"2222","endLine":160,"endColumn":32},{"ruleId":"2219","severity":1,"message":"2310","line":160,"column":62,"nodeType":"2221","messageId":"2222","endLine":160,"endColumn":75},{"ruleId":"2311","severity":1,"message":"2312","line":310,"column":17,"nodeType":"2313","messageId":"2314","endLine":312,"endColumn":19,"fix":"2315"},{"ruleId":"2311","severity":1,"message":"2312","line":333,"column":25,"nodeType":"2313","messageId":"2314","endLine":335,"endColumn":27,"fix":"2316"},{"ruleId":"2311","severity":1,"message":"2312","line":353,"column":29,"nodeType":"2313","messageId":"2314","endLine":354,"endColumn":92,"fix":"2317"},{"ruleId":"2219","severity":1,"message":"2239","line":3,"column":21,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2253","line":9,"column":21,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2254","line":9,"column":37,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":49},{"ruleId":"2219","severity":1,"message":"2255","line":9,"column":51,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2256","line":42,"column":11,"nodeType":"2221","messageId":"2222","endLine":42,"endColumn":25},{"ruleId":"2257","severity":1,"message":"2258","line":52,"column":109,"nodeType":"2259","messageId":"2260","endLine":52,"endColumn":110,"fix":"2318"},{"ruleId":"2219","severity":1,"message":"2226","line":13,"column":3,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2227","line":14,"column":3,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2228","line":15,"column":3,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2229","line":16,"column":3,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2319","line":17,"column":3,"nodeType":"2221","messageId":"2222","endLine":17,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2230","line":18,"column":3,"nodeType":"2221","messageId":"2222","endLine":18,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2320","line":19,"column":3,"nodeType":"2221","messageId":"2222","endLine":19,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2231","line":20,"column":3,"nodeType":"2221","messageId":"2222","endLine":20,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2232","line":21,"column":3,"nodeType":"2221","messageId":"2222","endLine":21,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2233","line":22,"column":3,"nodeType":"2221","messageId":"2222","endLine":22,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2234","line":23,"column":3,"nodeType":"2221","messageId":"2222","endLine":23,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2235","line":24,"column":3,"nodeType":"2221","messageId":"2222","endLine":24,"endColumn":21},{"ruleId":"2219","severity":1,"message":"2236","line":30,"column":7,"nodeType":"2221","messageId":"2222","endLine":30,"endColumn":18},{"ruleId":"2305","severity":1,"message":"2321","line":63,"column":78,"nodeType":"2307","messageId":"2276","endLine":63,"endColumn":80},{"ruleId":"2305","severity":1,"message":"2321","line":81,"column":82,"nodeType":"2307","messageId":"2276","endLine":81,"endColumn":84},{"ruleId":"2219","severity":1,"message":"2322","line":5,"column":10,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":21},{"ruleId":"2219","severity":1,"message":"2239","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":31},{"ruleId":"2305","severity":1,"message":"2321","line":163,"column":78,"nodeType":"2307","messageId":"2276","endLine":163,"endColumn":80},{"ruleId":"2219","severity":1,"message":"2323","line":13,"column":8,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2254","line":15,"column":43,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":55},{"ruleId":"2265","severity":1,"message":"2324","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2325"},{"ruleId":"2219","severity":1,"message":"2281","line":117,"column":30,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":117,"column":96,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":109},{"ruleId":"2219","severity":1,"message":"2282","line":117,"column":111,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2254","line":10,"column":43,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2323","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2281","line":89,"column":30,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":89,"column":96,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":109},{"ruleId":"2219","severity":1,"message":"2282","line":89,"column":111,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2243","line":1,"column":8,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2277","line":6,"column":9,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2272","line":89,"column":12,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2327","line":5,"column":10,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2328","line":79,"column":10,"nodeType":"2221","messageId":"2222","endLine":79,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2329","line":79,"column":18,"nodeType":"2221","messageId":"2222","endLine":79,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2330","line":82,"column":10,"nodeType":"2221","messageId":"2222","endLine":82,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2331","line":83,"column":9,"nodeType":"2221","messageId":"2222","endLine":83,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2237","line":87,"column":11,"nodeType":"2221","messageId":"2222","endLine":87,"endColumn":22},{"ruleId":"2265","severity":1,"message":"2332","line":97,"column":6,"nodeType":"2267","endLine":97,"endColumn":8,"suggestions":"2333"},{"ruleId":"2334","severity":1,"message":"2335","line":271,"column":55,"nodeType":"2313","endLine":271,"endColumn":138},{"ruleId":"2219","severity":1,"message":"2272","line":116,"column":12,"nodeType":"2221","messageId":"2222","endLine":116,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2336","line":158,"column":15,"nodeType":"2221","messageId":"2222","endLine":158,"endColumn":22},{"ruleId":"2334","severity":1,"message":"2335","line":222,"column":25,"nodeType":"2313","endLine":222,"endColumn":107},{"ruleId":"2219","severity":1,"message":"2269","line":3,"column":10,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2270","line":6,"column":8,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2246","line":9,"column":10,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2337","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2338","line":22,"column":10,"nodeType":"2221","messageId":"2222","endLine":22,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2271","line":86,"column":7,"nodeType":"2221","messageId":"2222","endLine":86,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2339","line":119,"column":7,"nodeType":"2221","messageId":"2222","endLine":119,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2272","line":128,"column":12,"nodeType":"2221","messageId":"2222","endLine":128,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2336","line":169,"column":15,"nodeType":"2221","messageId":"2222","endLine":169,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2340","line":343,"column":11,"nodeType":"2221","messageId":"2222","endLine":343,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2243","line":19,"column":8,"nodeType":"2221","messageId":"2222","endLine":19,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2341","line":40,"column":12,"nodeType":"2221","messageId":"2222","endLine":40,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2342","line":40,"column":22,"nodeType":"2221","messageId":"2222","endLine":40,"endColumn":33},{"ruleId":"2219","severity":1,"message":"2343","line":43,"column":24,"nodeType":"2221","messageId":"2222","endLine":43,"endColumn":37},{"ruleId":"2265","severity":1,"message":"2344","line":160,"column":8,"nodeType":"2267","endLine":160,"endColumn":10,"suggestions":"2345"},{"ruleId":"2219","severity":1,"message":"2282","line":233,"column":111,"nodeType":"2221","messageId":"2222","endLine":233,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2239","line":8,"column":56,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":66},{"ruleId":"2265","severity":1,"message":"2346","line":46,"column":8,"nodeType":"2267","endLine":46,"endColumn":10,"suggestions":"2347"},{"ruleId":"2305","severity":1,"message":"2306","line":61,"column":28,"nodeType":"2307","messageId":"2276","endLine":61,"endColumn":30},{"ruleId":"2311","severity":1,"message":"2312","line":139,"column":48,"nodeType":"2313","messageId":"2314","endLine":139,"endColumn":154,"fix":"2348"},{"ruleId":"2305","severity":1,"message":"2321","line":148,"column":73,"nodeType":"2307","messageId":"2276","endLine":148,"endColumn":75},{"ruleId":"2219","severity":1,"message":"2349","line":23,"column":12,"nodeType":"2221","messageId":"2222","endLine":23,"endColumn":20},{"ruleId":"2265","severity":1,"message":"2350","line":66,"column":8,"nodeType":"2267","endLine":66,"endColumn":10,"suggestions":"2351"},{"ruleId":"2352","severity":1,"message":"2353","line":196,"column":51,"nodeType":"2354","messageId":"2355","endLine":196,"endColumn":53},{"ruleId":"2305","severity":1,"message":"2321","line":196,"column":75,"nodeType":"2307","messageId":"2276","endLine":196,"endColumn":77},{"ruleId":"2305","severity":1,"message":"2321","line":196,"column":107,"nodeType":"2307","messageId":"2276","endLine":196,"endColumn":109},{"ruleId":"2305","severity":1,"message":"2321","line":196,"column":135,"nodeType":"2307","messageId":"2276","endLine":196,"endColumn":137},{"ruleId":"2219","severity":1,"message":"2281","line":198,"column":30,"nodeType":"2221","messageId":"2222","endLine":198,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":198,"column":96,"nodeType":"2221","messageId":"2222","endLine":198,"endColumn":109},{"ruleId":"2265","severity":1,"message":"2356","line":68,"column":8,"nodeType":"2267","endLine":68,"endColumn":10,"suggestions":"2357"},{"ruleId":"2219","severity":1,"message":"2358","line":70,"column":11,"nodeType":"2221","messageId":"2222","endLine":70,"endColumn":22},{"ruleId":"2352","severity":1,"message":"2353","line":197,"column":51,"nodeType":"2354","messageId":"2355","endLine":197,"endColumn":53},{"ruleId":"2305","severity":1,"message":"2321","line":197,"column":75,"nodeType":"2307","messageId":"2276","endLine":197,"endColumn":77},{"ruleId":"2305","severity":1,"message":"2321","line":197,"column":107,"nodeType":"2307","messageId":"2276","endLine":197,"endColumn":109},{"ruleId":"2305","severity":1,"message":"2321","line":197,"column":135,"nodeType":"2307","messageId":"2276","endLine":197,"endColumn":137},{"ruleId":"2219","severity":1,"message":"2246","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2254","line":11,"column":43,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2359","line":25,"column":12,"nodeType":"2221","messageId":"2222","endLine":25,"endColumn":26},{"ruleId":"2360","severity":1,"message":"2361","line":27,"column":50,"nodeType":"2362","messageId":"2363","endLine":27,"endColumn":51,"suggestions":"2364"},{"ruleId":"2265","severity":1,"message":"2356","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2365"},{"ruleId":"2219","severity":1,"message":"2358","line":61,"column":11,"nodeType":"2221","messageId":"2222","endLine":61,"endColumn":22},{"ruleId":"2352","severity":1,"message":"2353","line":179,"column":51,"nodeType":"2354","messageId":"2355","endLine":179,"endColumn":53},{"ruleId":"2305","severity":1,"message":"2321","line":179,"column":75,"nodeType":"2307","messageId":"2276","endLine":179,"endColumn":77},{"ruleId":"2305","severity":1,"message":"2321","line":179,"column":107,"nodeType":"2307","messageId":"2276","endLine":179,"endColumn":109},{"ruleId":"2305","severity":1,"message":"2321","line":179,"column":145,"nodeType":"2307","messageId":"2276","endLine":179,"endColumn":147},{"ruleId":"2305","severity":1,"message":"2321","line":179,"column":191,"nodeType":"2307","messageId":"2276","endLine":179,"endColumn":193},{"ruleId":"2305","severity":1,"message":"2321","line":179,"column":233,"nodeType":"2307","messageId":"2276","endLine":179,"endColumn":235},{"ruleId":"2219","severity":1,"message":"2247","line":7,"column":13,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2248","line":7,"column":19,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2366","line":7,"column":42,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":50},{"ruleId":"2219","severity":1,"message":"2252","line":8,"column":5,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2277","line":8,"column":11,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2301","line":9,"column":5,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2367","line":9,"column":21,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2368","line":13,"column":10,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2251","line":14,"column":18,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2304","line":14,"column":43,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":52},{"ruleId":"2265","severity":1,"message":"2369","line":78,"column":8,"nodeType":"2267","endLine":78,"endColumn":10,"suggestions":"2370"},{"ruleId":"2219","severity":1,"message":"2371","line":83,"column":21,"nodeType":"2221","messageId":"2222","endLine":83,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2372","line":85,"column":9,"nodeType":"2221","messageId":"2222","endLine":85,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2373","line":94,"column":11,"nodeType":"2221","messageId":"2222","endLine":94,"endColumn":18},{"ruleId":"2352","severity":1,"message":"2374","line":94,"column":46,"nodeType":"2354","messageId":"2375","endLine":94,"endColumn":48},{"ruleId":"2352","severity":1,"message":"2353","line":102,"column":62,"nodeType":"2354","messageId":"2355","endLine":102,"endColumn":64},{"ruleId":"2352","severity":1,"message":"2353","line":194,"column":56,"nodeType":"2354","messageId":"2355","endLine":194,"endColumn":58},{"ruleId":"2219","severity":1,"message":"2376","line":204,"column":9,"nodeType":"2221","messageId":"2222","endLine":204,"endColumn":18},{"ruleId":"2352","severity":1,"message":"2353","line":416,"column":54,"nodeType":"2354","messageId":"2355","endLine":416,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2265","severity":1,"message":"2377","line":127,"column":8,"nodeType":"2267","endLine":127,"endColumn":10,"suggestions":"2378"},{"ruleId":"2219","severity":1,"message":"2281","line":167,"column":30,"nodeType":"2221","messageId":"2222","endLine":167,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":167,"column":111,"nodeType":"2221","messageId":"2222","endLine":167,"endColumn":123},{"ruleId":"2265","severity":1,"message":"2379","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2380"},{"ruleId":"2219","severity":1,"message":"2282","line":125,"column":111,"nodeType":"2221","messageId":"2222","endLine":125,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2237","line":70,"column":11,"nodeType":"2221","messageId":"2222","endLine":70,"endColumn":22},{"ruleId":"2265","severity":1,"message":"2381","line":84,"column":6,"nodeType":"2267","endLine":84,"endColumn":8,"suggestions":"2382"},{"ruleId":"2305","severity":1,"message":"2306","line":117,"column":114,"nodeType":"2307","messageId":"2276","endLine":117,"endColumn":116},{"ruleId":"2305","severity":1,"message":"2321","line":117,"column":137,"nodeType":"2307","messageId":"2276","endLine":117,"endColumn":139},{"ruleId":"2352","severity":1,"message":"2383","line":160,"column":46,"nodeType":"2354","messageId":"2355","endLine":160,"endColumn":48},{"ruleId":"2305","severity":1,"message":"2321","line":161,"column":48,"nodeType":"2307","messageId":"2276","endLine":161,"endColumn":50},{"ruleId":"2305","severity":1,"message":"2321","line":161,"column":105,"nodeType":"2307","messageId":"2276","endLine":161,"endColumn":107},{"ruleId":"2305","severity":1,"message":"2321","line":161,"column":154,"nodeType":"2307","messageId":"2276","endLine":161,"endColumn":156},{"ruleId":"2305","severity":1,"message":"2321","line":164,"column":53,"nodeType":"2307","messageId":"2276","endLine":164,"endColumn":55},{"ruleId":"2305","severity":1,"message":"2321","line":165,"column":52,"nodeType":"2307","messageId":"2276","endLine":165,"endColumn":54},{"ruleId":"2305","severity":1,"message":"2321","line":165,"column":109,"nodeType":"2307","messageId":"2276","endLine":165,"endColumn":111},{"ruleId":"2305","severity":1,"message":"2321","line":165,"column":158,"nodeType":"2307","messageId":"2276","endLine":165,"endColumn":160},{"ruleId":"2305","severity":1,"message":"2321","line":168,"column":57,"nodeType":"2307","messageId":"2276","endLine":168,"endColumn":59},{"ruleId":"2305","severity":1,"message":"2321","line":168,"column":104,"nodeType":"2307","messageId":"2276","endLine":168,"endColumn":106},{"ruleId":"2305","severity":1,"message":"2321","line":171,"column":58,"nodeType":"2307","messageId":"2276","endLine":171,"endColumn":60},{"ruleId":"2305","severity":1,"message":"2321","line":171,"column":115,"nodeType":"2307","messageId":"2276","endLine":171,"endColumn":117},{"ruleId":"2305","severity":1,"message":"2321","line":174,"column":57,"nodeType":"2307","messageId":"2276","endLine":174,"endColumn":59},{"ruleId":"2305","severity":1,"message":"2321","line":177,"column":57,"nodeType":"2307","messageId":"2276","endLine":177,"endColumn":59},{"ruleId":"2305","severity":1,"message":"2321","line":181,"column":44,"nodeType":"2307","messageId":"2276","endLine":181,"endColumn":46},{"ruleId":"2305","severity":1,"message":"2321","line":182,"column":52,"nodeType":"2307","messageId":"2276","endLine":182,"endColumn":54},{"ruleId":"2305","severity":1,"message":"2321","line":182,"column":109,"nodeType":"2307","messageId":"2276","endLine":182,"endColumn":111},{"ruleId":"2305","severity":1,"message":"2321","line":182,"column":158,"nodeType":"2307","messageId":"2276","endLine":182,"endColumn":160},{"ruleId":"2305","severity":1,"message":"2321","line":185,"column":57,"nodeType":"2307","messageId":"2276","endLine":185,"endColumn":59},{"ruleId":"2305","severity":1,"message":"2321","line":185,"column":104,"nodeType":"2307","messageId":"2276","endLine":185,"endColumn":106},{"ruleId":"2305","severity":1,"message":"2321","line":188,"column":49,"nodeType":"2307","messageId":"2276","endLine":188,"endColumn":51},{"ruleId":"2305","severity":1,"message":"2321","line":188,"column":108,"nodeType":"2307","messageId":"2276","endLine":188,"endColumn":110},{"ruleId":"2305","severity":1,"message":"2321","line":191,"column":48,"nodeType":"2307","messageId":"2276","endLine":191,"endColumn":50},{"ruleId":"2305","severity":1,"message":"2321","line":194,"column":48,"nodeType":"2307","messageId":"2276","endLine":194,"endColumn":50},{"ruleId":"2305","severity":1,"message":"2321","line":198,"column":54,"nodeType":"2307","messageId":"2276","endLine":198,"endColumn":56},{"ruleId":"2305","severity":1,"message":"2321","line":199,"column":52,"nodeType":"2307","messageId":"2276","endLine":199,"endColumn":54},{"ruleId":"2305","severity":1,"message":"2321","line":199,"column":109,"nodeType":"2307","messageId":"2276","endLine":199,"endColumn":111},{"ruleId":"2305","severity":1,"message":"2321","line":199,"column":158,"nodeType":"2307","messageId":"2276","endLine":199,"endColumn":160},{"ruleId":"2305","severity":1,"message":"2321","line":202,"column":57,"nodeType":"2307","messageId":"2276","endLine":202,"endColumn":59},{"ruleId":"2305","severity":1,"message":"2321","line":202,"column":114,"nodeType":"2307","messageId":"2276","endLine":202,"endColumn":116},{"ruleId":"2305","severity":1,"message":"2321","line":205,"column":49,"nodeType":"2307","messageId":"2276","endLine":205,"endColumn":51},{"ruleId":"2305","severity":1,"message":"2321","line":205,"column":108,"nodeType":"2307","messageId":"2276","endLine":205,"endColumn":110},{"ruleId":"2305","severity":1,"message":"2321","line":208,"column":58,"nodeType":"2307","messageId":"2276","endLine":208,"endColumn":60},{"ruleId":"2305","severity":1,"message":"2321","line":211,"column":58,"nodeType":"2307","messageId":"2276","endLine":211,"endColumn":60},{"ruleId":"2384","severity":1,"message":"2385","line":408,"column":23,"nodeType":"2313","endLine":408,"endColumn":86},{"ruleId":"2219","severity":1,"message":"2239","line":4,"column":27,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":37},{"ruleId":"2219","severity":1,"message":"2252","line":4,"column":39,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":43},{"ruleId":"2219","severity":1,"message":"2251","line":5,"column":17,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2269","line":3,"column":10,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2270","line":6,"column":8,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2246","line":9,"column":10,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2337","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2386","line":21,"column":10,"nodeType":"2221","messageId":"2222","endLine":21,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2271","line":87,"column":7,"nodeType":"2221","messageId":"2222","endLine":87,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2339","line":121,"column":7,"nodeType":"2221","messageId":"2222","endLine":121,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2272","line":130,"column":12,"nodeType":"2221","messageId":"2222","endLine":130,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2336","line":177,"column":15,"nodeType":"2221","messageId":"2222","endLine":177,"endColumn":22},{"ruleId":"2334","severity":1,"message":"2335","line":266,"column":25,"nodeType":"2313","endLine":266,"endColumn":107},{"ruleId":"2305","severity":1,"message":"2306","line":347,"column":107,"nodeType":"2307","messageId":"2276","endLine":347,"endColumn":109},{"ruleId":"2265","severity":1,"message":"2369","line":427,"column":8,"nodeType":"2267","endLine":427,"endColumn":10,"suggestions":"2387"},{"ruleId":"2219","severity":1,"message":"2337","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2339","line":117,"column":7,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2272","line":126,"column":12,"nodeType":"2221","messageId":"2222","endLine":126,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2336","line":170,"column":15,"nodeType":"2221","messageId":"2222","endLine":170,"endColumn":22},{"ruleId":"2334","severity":1,"message":"2335","line":262,"column":25,"nodeType":"2313","endLine":262,"endColumn":107},{"ruleId":"2305","severity":1,"message":"2321","line":349,"column":106,"nodeType":"2307","messageId":"2276","endLine":349,"endColumn":108},{"ruleId":"2265","severity":1,"message":"2369","line":393,"column":8,"nodeType":"2267","endLine":393,"endColumn":10,"suggestions":"2388"},{"ruleId":"2219","severity":1,"message":"2301","line":8,"column":8,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2366","line":10,"column":10,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2389","line":10,"column":31,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":42},{"ruleId":"2219","severity":1,"message":"2367","line":10,"column":44,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":54},{"ruleId":"2219","severity":1,"message":"2390","line":10,"column":72,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":78},{"ruleId":"2219","severity":1,"message":"2239","line":10,"column":98,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":108},{"ruleId":"2219","severity":1,"message":"2391","line":40,"column":12,"nodeType":"2221","messageId":"2222","endLine":40,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2392","line":85,"column":12,"nodeType":"2221","messageId":"2222","endLine":85,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2393","line":86,"column":11,"nodeType":"2221","messageId":"2222","endLine":86,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2394","line":117,"column":12,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2395","line":117,"column":38,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":65},{"ruleId":"2265","severity":1,"message":"2396","line":126,"column":8,"nodeType":"2267","endLine":126,"endColumn":10,"suggestions":"2397"},{"ruleId":"2305","severity":1,"message":"2321","line":188,"column":37,"nodeType":"2307","messageId":"2276","endLine":188,"endColumn":39},{"ruleId":"2219","severity":1,"message":"2281","line":207,"column":102,"nodeType":"2221","messageId":"2222","endLine":207,"endColumn":108},{"ruleId":"2219","severity":1,"message":"2398","line":207,"column":110,"nodeType":"2221","messageId":"2222","endLine":207,"endColumn":119},{"ruleId":"2219","severity":1,"message":"2238","line":3,"column":10,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2366","line":3,"column":15,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":23},{"ruleId":"2219","severity":1,"message":"2399","line":3,"column":52,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":61},{"ruleId":"2219","severity":1,"message":"2400","line":3,"column":63,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":68},{"ruleId":"2219","severity":1,"message":"2401","line":3,"column":70,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":84},{"ruleId":"2219","severity":1,"message":"2402","line":3,"column":86,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":94},{"ruleId":"2219","severity":1,"message":"2403","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2239","line":4,"column":27,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":37},{"ruleId":"2352","severity":1,"message":"2353","line":39,"column":63,"nodeType":"2354","messageId":"2355","endLine":39,"endColumn":65},{"ruleId":"2219","severity":1,"message":"2391","line":89,"column":12,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2392","line":106,"column":12,"nodeType":"2221","messageId":"2222","endLine":106,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2393","line":107,"column":11,"nodeType":"2221","messageId":"2222","endLine":107,"endColumn":31},{"ruleId":"2305","severity":1,"message":"2321","line":189,"column":37,"nodeType":"2307","messageId":"2276","endLine":189,"endColumn":39},{"ruleId":"2219","severity":1,"message":"2359","line":21,"column":12,"nodeType":"2221","messageId":"2222","endLine":21,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2404","line":24,"column":9,"nodeType":"2221","messageId":"2222","endLine":24,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2405","line":27,"column":12,"nodeType":"2221","messageId":"2222","endLine":27,"endColumn":24},{"ruleId":"2265","severity":1,"message":"2406","line":34,"column":8,"nodeType":"2267","endLine":34,"endColumn":10,"suggestions":"2407"},{"ruleId":"2352","severity":1,"message":"2353","line":209,"column":51,"nodeType":"2354","messageId":"2355","endLine":209,"endColumn":53},{"ruleId":"2305","severity":1,"message":"2321","line":209,"column":75,"nodeType":"2307","messageId":"2276","endLine":209,"endColumn":77},{"ruleId":"2305","severity":1,"message":"2321","line":209,"column":107,"nodeType":"2307","messageId":"2276","endLine":209,"endColumn":109},{"ruleId":"2305","severity":1,"message":"2321","line":209,"column":145,"nodeType":"2307","messageId":"2276","endLine":209,"endColumn":147},{"ruleId":"2305","severity":1,"message":"2321","line":209,"column":191,"nodeType":"2307","messageId":"2276","endLine":209,"endColumn":193},{"ruleId":"2305","severity":1,"message":"2321","line":209,"column":233,"nodeType":"2307","messageId":"2276","endLine":209,"endColumn":235},{"ruleId":"2305","severity":1,"message":"2321","line":209,"column":261,"nodeType":"2307","messageId":"2276","endLine":209,"endColumn":263},{"ruleId":"2219","severity":1,"message":"2281","line":223,"column":30,"nodeType":"2221","messageId":"2222","endLine":223,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":223,"column":96,"nodeType":"2221","messageId":"2222","endLine":223,"endColumn":109},{"ruleId":"2219","severity":1,"message":"2408","line":3,"column":10,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2255","line":3,"column":40,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2409","line":7,"column":10,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2410","line":7,"column":71,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":87},{"ruleId":"2219","severity":1,"message":"2390","line":7,"column":89,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":95},{"ruleId":"2219","severity":1,"message":"2389","line":7,"column":116,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":127},{"ruleId":"2219","severity":1,"message":"2367","line":7,"column":129,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":139},{"ruleId":"2219","severity":1,"message":"2237","line":25,"column":9,"nodeType":"2221","messageId":"2222","endLine":25,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2237","line":34,"column":9,"nodeType":"2221","messageId":"2222","endLine":34,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2237","line":43,"column":9,"nodeType":"2221","messageId":"2222","endLine":43,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2411","line":56,"column":10,"nodeType":"2221","messageId":"2222","endLine":56,"endColumn":20},{"ruleId":"2305","severity":1,"message":"2321","line":81,"column":27,"nodeType":"2307","messageId":"2276","endLine":81,"endColumn":29},{"ruleId":"2219","severity":1,"message":"2308","line":206,"column":11,"nodeType":"2221","messageId":"2222","endLine":206,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2309","line":206,"column":19,"nodeType":"2221","messageId":"2222","endLine":206,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2412","line":206,"column":71,"nodeType":"2221","messageId":"2222","endLine":206,"endColumn":84},{"ruleId":"2219","severity":1,"message":"2413","line":14,"column":10,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2237","line":37,"column":15,"nodeType":"2221","messageId":"2222","endLine":37,"endColumn":26},{"ruleId":"2305","severity":1,"message":"2321","line":55,"column":35,"nodeType":"2307","messageId":"2276","endLine":55,"endColumn":37},{"ruleId":"2219","severity":1,"message":"2237","line":75,"column":11,"nodeType":"2221","messageId":"2222","endLine":75,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":88,"column":11,"nodeType":"2221","messageId":"2222","endLine":88,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2414","line":102,"column":12,"nodeType":"2221","messageId":"2222","endLine":102,"endColumn":21},{"ruleId":"2219","severity":1,"message":"2415","line":102,"column":23,"nodeType":"2221","messageId":"2222","endLine":102,"endColumn":35},{"ruleId":"2305","severity":1,"message":"2321","line":113,"column":23,"nodeType":"2307","messageId":"2276","endLine":113,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2237","line":157,"column":15,"nodeType":"2221","messageId":"2222","endLine":157,"endColumn":26},{"ruleId":"2305","severity":1,"message":"2321","line":159,"column":31,"nodeType":"2307","messageId":"2276","endLine":159,"endColumn":33},{"ruleId":"2219","severity":1,"message":"2237","line":181,"column":15,"nodeType":"2221","messageId":"2222","endLine":181,"endColumn":26},{"ruleId":"2305","severity":1,"message":"2321","line":183,"column":31,"nodeType":"2307","messageId":"2276","endLine":183,"endColumn":33},{"ruleId":"2305","severity":1,"message":"2321","line":201,"column":31,"nodeType":"2307","messageId":"2276","endLine":201,"endColumn":33},{"ruleId":"2219","severity":1,"message":"2411","line":216,"column":12,"nodeType":"2221","messageId":"2222","endLine":216,"endColumn":22},{"ruleId":"2305","severity":1,"message":"2321","line":237,"column":39,"nodeType":"2307","messageId":"2276","endLine":237,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2416","line":258,"column":44,"nodeType":"2221","messageId":"2222","endLine":258,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2412","line":258,"column":73,"nodeType":"2221","messageId":"2222","endLine":258,"endColumn":86},{"ruleId":"2219","severity":1,"message":"2408","line":3,"column":10,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2255","line":3,"column":40,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2251","line":5,"column":18,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2409","line":7,"column":10,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2252","line":7,"column":54,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":58},{"ruleId":"2219","severity":1,"message":"2410","line":7,"column":71,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":87},{"ruleId":"2219","severity":1,"message":"2390","line":7,"column":89,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":95},{"ruleId":"2219","severity":1,"message":"2280","line":7,"column":96,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":104},{"ruleId":"2219","severity":1,"message":"2366","line":7,"column":106,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":114},{"ruleId":"2219","severity":1,"message":"2389","line":7,"column":116,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":127},{"ruleId":"2219","severity":1,"message":"2367","line":7,"column":129,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":139},{"ruleId":"2219","severity":1,"message":"2417","line":15,"column":10,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":33,"column":11,"nodeType":"2221","messageId":"2222","endLine":33,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":43,"column":11,"nodeType":"2221","messageId":"2222","endLine":43,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":52,"column":11,"nodeType":"2221","messageId":"2222","endLine":52,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":61,"column":11,"nodeType":"2221","messageId":"2222","endLine":61,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":70,"column":11,"nodeType":"2221","messageId":"2222","endLine":70,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2411","line":86,"column":10,"nodeType":"2221","messageId":"2222","endLine":86,"endColumn":20},{"ruleId":"2305","severity":1,"message":"2321","line":119,"column":35,"nodeType":"2307","messageId":"2276","endLine":119,"endColumn":37},{"ruleId":"2219","severity":1,"message":"2412","line":138,"column":71,"nodeType":"2221","messageId":"2222","endLine":138,"endColumn":84},{"ruleId":"2219","severity":1,"message":"2246","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2418","line":14,"column":64,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":77},{"ruleId":"2219","severity":1,"message":"2243","line":17,"column":8,"nodeType":"2221","messageId":"2222","endLine":17,"endColumn":13},{"ruleId":"2265","severity":1,"message":"2419","line":77,"column":8,"nodeType":"2267","endLine":77,"endColumn":10,"suggestions":"2420"},{"ruleId":"2265","severity":1,"message":"2421","line":200,"column":8,"nodeType":"2267","endLine":200,"endColumn":10,"suggestions":"2422"},{"ruleId":"2219","severity":1,"message":"2423","line":202,"column":11,"nodeType":"2221","messageId":"2222","endLine":202,"endColumn":34},{"ruleId":"2305","severity":1,"message":"2321","line":213,"column":33,"nodeType":"2307","messageId":"2276","endLine":213,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2424","line":232,"column":12,"nodeType":"2221","messageId":"2222","endLine":232,"endColumn":37},{"ruleId":"2219","severity":1,"message":"2425","line":232,"column":39,"nodeType":"2221","messageId":"2222","endLine":232,"endColumn":67},{"ruleId":"2219","severity":1,"message":"2426","line":235,"column":12,"nodeType":"2221","messageId":"2222","endLine":235,"endColumn":43},{"ruleId":"2219","severity":1,"message":"2427","line":235,"column":45,"nodeType":"2221","messageId":"2222","endLine":235,"endColumn":79},{"ruleId":"2219","severity":1,"message":"2428","line":237,"column":34,"nodeType":"2221","messageId":"2222","endLine":237,"endColumn":57},{"ruleId":"2305","severity":1,"message":"2321","line":337,"column":37,"nodeType":"2307","messageId":"2276","endLine":337,"endColumn":39},{"ruleId":"2305","severity":1,"message":"2321","line":374,"column":33,"nodeType":"2307","messageId":"2276","endLine":374,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2326","line":392,"column":35,"nodeType":"2221","messageId":"2222","endLine":392,"endColumn":48},{"ruleId":"2305","severity":1,"message":"2321","line":479,"column":87,"nodeType":"2307","messageId":"2276","endLine":479,"endColumn":89},{"ruleId":"2311","severity":1,"message":"2312","line":504,"column":56,"nodeType":"2313","messageId":"2314","endLine":504,"endColumn":183,"fix":"2429"},{"ruleId":"2311","severity":1,"message":"2312","line":509,"column":53,"nodeType":"2313","messageId":"2314","endLine":509,"endColumn":173,"fix":"2430"},{"ruleId":"2431","severity":1,"message":"2432","line":575,"column":29,"nodeType":"2313","endLine":577,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2433","line":15,"column":13,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2434","line":36,"column":12,"nodeType":"2221","messageId":"2222","endLine":36,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2435","line":37,"column":12,"nodeType":"2221","messageId":"2222","endLine":37,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2436","line":80,"column":12,"nodeType":"2221","messageId":"2222","endLine":80,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2437","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":25},{"ruleId":"2265","severity":1,"message":"2438","line":456,"column":8,"nodeType":"2267","endLine":456,"endColumn":10,"suggestions":"2439"},{"ruleId":"2219","severity":1,"message":"2367","line":2,"column":59,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":69},{"ruleId":"2219","severity":1,"message":"2390","line":2,"column":87,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":93},{"ruleId":"2219","severity":1,"message":"2435","line":35,"column":12,"nodeType":"2221","messageId":"2222","endLine":35,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2440","line":35,"column":38,"nodeType":"2221","messageId":"2222","endLine":35,"endColumn":65},{"ruleId":"2219","severity":1,"message":"2391","line":72,"column":12,"nodeType":"2221","messageId":"2222","endLine":72,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2441","line":100,"column":13,"nodeType":"2221","messageId":"2222","endLine":100,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2442","line":124,"column":12,"nodeType":"2221","messageId":"2222","endLine":124,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2437","line":135,"column":12,"nodeType":"2221","messageId":"2222","endLine":135,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2443","line":145,"column":12,"nodeType":"2221","messageId":"2222","endLine":145,"endColumn":26},{"ruleId":"2265","severity":1,"message":"2444","line":262,"column":8,"nodeType":"2267","endLine":262,"endColumn":10,"suggestions":"2445"},{"ruleId":"2219","severity":1,"message":"2446","line":522,"column":11,"nodeType":"2221","messageId":"2222","endLine":522,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2447","line":539,"column":11,"nodeType":"2221","messageId":"2222","endLine":539,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2448","line":11,"column":8,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2449","line":12,"column":8,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2323","line":13,"column":8,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2254","line":15,"column":43,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":55},{"ruleId":"2265","severity":1,"message":"2450","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2451"},{"ruleId":"2219","severity":1,"message":"2281","line":117,"column":30,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":117,"column":96,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":109},{"ruleId":"2219","severity":1,"message":"2282","line":117,"column":111,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2452","line":1,"column":8,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2220","line":3,"column":8,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":19},{"ruleId":"2265","severity":1,"message":"2453","line":42,"column":7,"nodeType":"2267","endLine":42,"endColumn":9,"suggestions":"2454"},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2254","line":10,"column":43,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2323","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2281","line":89,"column":30,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":89,"column":96,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":109},{"ruleId":"2219","severity":1,"message":"2282","line":89,"column":111,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2368","line":2,"column":10,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2455","line":3,"column":55,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":61},{"ruleId":"2219","severity":1,"message":"2249","line":4,"column":49,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":58},{"ruleId":"2219","severity":1,"message":"2239","line":4,"column":91,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":101},{"ruleId":"2219","severity":1,"message":"2456","line":5,"column":18,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":23},{"ruleId":"2219","severity":1,"message":"2237","line":45,"column":11,"nodeType":"2221","messageId":"2222","endLine":45,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":55,"column":11,"nodeType":"2221","messageId":"2222","endLine":55,"endColumn":22},{"ruleId":"2265","severity":1,"message":"2457","line":51,"column":6,"nodeType":"2267","endLine":51,"endColumn":16,"suggestions":"2458"},{"ruleId":"2219","severity":1,"message":"2459","line":73,"column":7,"nodeType":"2221","messageId":"2222","endLine":73,"endColumn":17},{"ruleId":"2352","severity":1,"message":"2353","line":102,"column":60,"nodeType":"2354","messageId":"2355","endLine":102,"endColumn":62},{"ruleId":"2265","severity":1,"message":"2460","line":111,"column":6,"nodeType":"2267","endLine":111,"endColumn":16,"suggestions":"2461"},{"ruleId":"2219","severity":1,"message":"2251","line":3,"column":18,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2243","line":8,"column":8,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2252","line":12,"column":3,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":7},{"ruleId":"2219","severity":1,"message":"2366","line":14,"column":3,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2410","line":18,"column":3,"nodeType":"2221","messageId":"2222","endLine":18,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2462","line":35,"column":10,"nodeType":"2221","messageId":"2222","endLine":35,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2463","line":35,"column":21,"nodeType":"2221","messageId":"2222","endLine":35,"endColumn":33},{"ruleId":"2305","severity":1,"message":"2321","line":57,"column":27,"nodeType":"2307","messageId":"2276","endLine":57,"endColumn":29},{"ruleId":"2219","severity":1,"message":"2281","line":185,"column":28,"nodeType":"2221","messageId":"2222","endLine":185,"endColumn":34},{"ruleId":"2219","severity":1,"message":"2225","line":2,"column":10,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2251","line":3,"column":18,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2269","line":5,"column":10,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2252","line":8,"column":3,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":7},{"ruleId":"2219","severity":1,"message":"2410","line":12,"column":3,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2243","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2281","line":104,"column":28,"nodeType":"2221","messageId":"2222","endLine":104,"endColumn":34},{"ruleId":"2219","severity":1,"message":"2251","line":3,"column":18,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2252","line":8,"column":3,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":7},{"ruleId":"2219","severity":1,"message":"2301","line":11,"column":3,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2410","line":12,"column":3,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2243","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2464","line":5,"column":8,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":21},{"ruleId":"2219","severity":1,"message":"2237","line":43,"column":11,"nodeType":"2221","messageId":"2222","endLine":43,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":53,"column":11,"nodeType":"2221","messageId":"2222","endLine":53,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2465","line":3,"column":8,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2466","line":96,"column":36,"nodeType":"2221","messageId":"2222","endLine":96,"endColumn":40},{"ruleId":"2219","severity":1,"message":"2467","line":96,"column":42,"nodeType":"2221","messageId":"2222","endLine":96,"endColumn":46},{"ruleId":"2219","severity":1,"message":"2468","line":4,"column":8,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2469","line":45,"column":9,"nodeType":"2221","messageId":"2222","endLine":45,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2468","line":4,"column":8,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2469","line":45,"column":9,"nodeType":"2221","messageId":"2222","endLine":45,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2251","line":4,"column":18,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2238","line":7,"column":10,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2470","line":20,"column":7,"nodeType":"2221","messageId":"2222","endLine":20,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2471","line":78,"column":11,"nodeType":"2221","messageId":"2222","endLine":78,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2472","line":78,"column":18,"nodeType":"2221","messageId":"2222","endLine":78,"endColumn":23},{"ruleId":"2219","severity":1,"message":"2473","line":78,"column":25,"nodeType":"2221","messageId":"2222","endLine":78,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2474","line":78,"column":33,"nodeType":"2221","messageId":"2222","endLine":78,"endColumn":42},{"ruleId":"2219","severity":1,"message":"2272","line":76,"column":12,"nodeType":"2221","messageId":"2222","endLine":76,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2475","line":76,"column":26,"nodeType":"2221","messageId":"2222","endLine":76,"endColumn":41},{"ruleId":"2334","severity":1,"message":"2335","line":139,"column":25,"nodeType":"2313","endLine":139,"endColumn":107},{"ruleId":"2219","severity":1,"message":"2476","line":19,"column":8,"nodeType":"2221","messageId":"2222","endLine":19,"endColumn":33},{"ruleId":"2219","severity":1,"message":"2477","line":20,"column":8,"nodeType":"2221","messageId":"2222","endLine":20,"endColumn":33},{"ruleId":"2219","severity":1,"message":"2478","line":21,"column":8,"nodeType":"2221","messageId":"2222","endLine":21,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2479","line":22,"column":8,"nodeType":"2221","messageId":"2222","endLine":22,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2480","line":47,"column":8,"nodeType":"2221","messageId":"2222","endLine":47,"endColumn":36},{"ruleId":"2265","severity":1,"message":"2346","line":67,"column":8,"nodeType":"2267","endLine":67,"endColumn":10,"suggestions":"2481"},{"ruleId":"2219","severity":1,"message":"2482","line":70,"column":12,"nodeType":"2221","messageId":"2222","endLine":70,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2483","line":70,"column":37,"nodeType":"2221","messageId":"2222","endLine":70,"endColumn":63},{"ruleId":"2219","severity":1,"message":"2484","line":73,"column":12,"nodeType":"2221","messageId":"2222","endLine":73,"endColumn":42},{"ruleId":"2219","severity":1,"message":"2485","line":73,"column":44,"nodeType":"2221","messageId":"2222","endLine":73,"endColumn":77},{"ruleId":"2219","severity":1,"message":"2486","line":75,"column":11,"nodeType":"2221","messageId":"2222","endLine":75,"endColumn":34},{"ruleId":"2219","severity":1,"message":"2487","line":102,"column":11,"nodeType":"2221","messageId":"2222","endLine":102,"endColumn":41},{"ruleId":"2265","severity":1,"message":"2488","line":140,"column":8,"nodeType":"2267","endLine":147,"endColumn":6,"suggestions":"2489"},{"ruleId":"2265","severity":1,"message":"2490","line":141,"column":9,"nodeType":"2307","endLine":141,"endColumn":59},{"ruleId":"2265","severity":1,"message":"2490","line":144,"column":9,"nodeType":"2491","endLine":144,"endColumn":45},{"ruleId":"2265","severity":1,"message":"2490","line":145,"column":9,"nodeType":"2491","endLine":145,"endColumn":52},{"ruleId":"2219","severity":1,"message":"2492","line":150,"column":12,"nodeType":"2221","messageId":"2222","endLine":150,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2493","line":156,"column":12,"nodeType":"2221","messageId":"2222","endLine":156,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2494","line":159,"column":12,"nodeType":"2221","messageId":"2222","endLine":159,"endColumn":32},{"ruleId":"2219","severity":1,"message":"2495","line":161,"column":11,"nodeType":"2221","messageId":"2222","endLine":161,"endColumn":37},{"ruleId":"2219","severity":1,"message":"2496","line":178,"column":11,"nodeType":"2221","messageId":"2222","endLine":178,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2497","line":240,"column":14,"nodeType":"2221","messageId":"2222","endLine":240,"endColumn":36},{"ruleId":"2334","severity":1,"message":"2335","line":118,"column":25,"nodeType":"2313","endLine":118,"endColumn":107},{"ruleId":"2305","severity":1,"message":"2321","line":181,"column":78,"nodeType":"2307","messageId":"2276","endLine":181,"endColumn":80},{"ruleId":"2219","severity":1,"message":"2239","line":4,"column":18,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2251","line":7,"column":18,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2498","line":9,"column":10,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2252","line":5,"column":5,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2239","line":5,"column":29,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":39},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2302","line":6,"column":43,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":50},{"ruleId":"2219","severity":1,"message":"2303","line":6,"column":52,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2499","line":15,"column":10,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2500","line":17,"column":10,"nodeType":"2221","messageId":"2222","endLine":17,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2501","line":20,"column":10,"nodeType":"2221","messageId":"2222","endLine":20,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2502","line":24,"column":7,"nodeType":"2221","messageId":"2222","endLine":24,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2366","line":5,"column":18,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2503","line":5,"column":36,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":49},{"ruleId":"2219","severity":1,"message":"2249","line":5,"column":125,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":134},{"ruleId":"2219","severity":1,"message":"2504","line":33,"column":11,"nodeType":"2221","messageId":"2222","endLine":33,"endColumn":40},{"ruleId":"2265","severity":1,"message":"2505","line":72,"column":8,"nodeType":"2267","endLine":75,"endColumn":6,"suggestions":"2506"},{"ruleId":"2265","severity":1,"message":"2490","line":73,"column":9,"nodeType":"2307","endLine":73,"endColumn":60},{"ruleId":"2265","severity":1,"message":"2490","line":74,"column":9,"nodeType":"2491","endLine":74,"endColumn":46},{"ruleId":"2265","severity":1,"message":"2505","line":77,"column":8,"nodeType":"2267","endLine":79,"endColumn":6,"suggestions":"2507"},{"ruleId":"2265","severity":1,"message":"2490","line":78,"column":9,"nodeType":"2491","endLine":78,"endColumn":53},{"ruleId":"2431","severity":1,"message":"2432","line":104,"column":29,"nodeType":"2313","endLine":106,"endColumn":30},{"ruleId":"2265","severity":1,"message":"2508","line":77,"column":8,"nodeType":"2267","endLine":79,"endColumn":6,"suggestions":"2509"},{"ruleId":"2265","severity":1,"message":"2490","line":78,"column":9,"nodeType":"2491","endLine":78,"endColumn":59},{"ruleId":"2431","severity":1,"message":"2432","line":104,"column":29,"nodeType":"2313","endLine":106,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2433","line":12,"column":13,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2412","line":92,"column":73,"nodeType":"2221","messageId":"2222","endLine":92,"endColumn":86},{"ruleId":"2219","severity":1,"message":"2366","line":5,"column":18,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2503","line":5,"column":36,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":49},{"ruleId":"2219","severity":1,"message":"2249","line":5,"column":125,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":134},{"ruleId":"2219","severity":1,"message":"2510","line":27,"column":11,"nodeType":"2221","messageId":"2222","endLine":27,"endColumn":48},{"ruleId":"2219","severity":1,"message":"2504","line":37,"column":11,"nodeType":"2221","messageId":"2222","endLine":37,"endColumn":40},{"ruleId":"2265","severity":1,"message":"2508","line":76,"column":8,"nodeType":"2267","endLine":79,"endColumn":6,"suggestions":"2511"},{"ruleId":"2265","severity":1,"message":"2490","line":77,"column":9,"nodeType":"2307","endLine":77,"endColumn":66},{"ruleId":"2265","severity":1,"message":"2490","line":78,"column":9,"nodeType":"2491","endLine":78,"endColumn":52},{"ruleId":"2219","severity":1,"message":"2486","line":41,"column":11,"nodeType":"2221","messageId":"2222","endLine":41,"endColumn":34},{"ruleId":"2219","severity":1,"message":"2412","line":122,"column":73,"nodeType":"2221","messageId":"2222","endLine":122,"endColumn":86},{"ruleId":"2265","severity":1,"message":"2508","line":77,"column":8,"nodeType":"2267","endLine":79,"endColumn":6,"suggestions":"2512"},{"ruleId":"2265","severity":1,"message":"2490","line":78,"column":9,"nodeType":"2491","endLine":78,"endColumn":59},{"ruleId":"2431","severity":1,"message":"2432","line":104,"column":29,"nodeType":"2313","endLine":106,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2412","line":90,"column":73,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":86},{"ruleId":"2219","severity":1,"message":"2366","line":3,"column":18,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2249","line":3,"column":144,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":153},{"ruleId":"2219","severity":1,"message":"2513","line":25,"column":12,"nodeType":"2221","messageId":"2222","endLine":25,"endColumn":34},{"ruleId":"2219","severity":1,"message":"2514","line":27,"column":11,"nodeType":"2221","messageId":"2222","endLine":27,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2515","line":31,"column":12,"nodeType":"2221","messageId":"2222","endLine":31,"endColumn":33},{"ruleId":"2265","severity":1,"message":"2516","line":36,"column":8,"nodeType":"2267","endLine":39,"endColumn":6,"suggestions":"2517"},{"ruleId":"2265","severity":1,"message":"2490","line":37,"column":9,"nodeType":"2307","endLine":37,"endColumn":70},{"ruleId":"2265","severity":1,"message":"2490","line":38,"column":9,"nodeType":"2491","endLine":38,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":17,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2244","line":1,"column":27,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2246","line":2,"column":10,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2247","line":2,"column":18,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2248","line":2,"column":24,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2366","line":2,"column":37,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2518","line":2,"column":47,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2519","line":2,"column":58,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":64},{"ruleId":"2219","severity":1,"message":"2520","line":2,"column":66,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":79},{"ruleId":"2219","severity":1,"message":"2503","line":2,"column":81,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":94},{"ruleId":"2219","severity":1,"message":"2277","line":2,"column":96,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":101},{"ruleId":"2219","severity":1,"message":"2239","line":2,"column":103,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":113},{"ruleId":"2219","severity":1,"message":"2249","line":2,"column":115,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":124},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":17,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2244","line":1,"column":27,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2247","line":2,"column":18,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2248","line":2,"column":24,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2366","line":2,"column":37,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2518","line":2,"column":47,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2519","line":2,"column":58,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":64},{"ruleId":"2219","severity":1,"message":"2520","line":2,"column":66,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":79},{"ruleId":"2219","severity":1,"message":"2503","line":2,"column":81,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":94},{"ruleId":"2219","severity":1,"message":"2277","line":2,"column":96,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":101},{"ruleId":"2219","severity":1,"message":"2239","line":2,"column":103,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":113},{"ruleId":"2219","severity":1,"message":"2249","line":2,"column":115,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":124},{"ruleId":"2219","severity":1,"message":"2244","line":1,"column":27,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2247","line":2,"column":18,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2248","line":2,"column":24,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2518","line":2,"column":47,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2503","line":2,"column":81,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":94},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":17,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2244","line":1,"column":27,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2247","line":2,"column":18,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2248","line":2,"column":24,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":35},{"ruleId":"2219","severity":1,"message":"2366","line":2,"column":37,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2518","line":2,"column":47,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2519","line":2,"column":58,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":64},{"ruleId":"2219","severity":1,"message":"2520","line":2,"column":66,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":79},{"ruleId":"2219","severity":1,"message":"2503","line":2,"column":81,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":94},{"ruleId":"2219","severity":1,"message":"2277","line":2,"column":96,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":101},{"ruleId":"2219","severity":1,"message":"2239","line":2,"column":103,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":113},{"ruleId":"2219","severity":1,"message":"2249","line":2,"column":115,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":124},{"ruleId":"2265","severity":1,"message":"2488","line":84,"column":8,"nodeType":"2267","endLine":86,"endColumn":6,"suggestions":"2521"},{"ruleId":"2265","severity":1,"message":"2490","line":85,"column":9,"nodeType":"2491","endLine":85,"endColumn":52},{"ruleId":"2431","severity":1,"message":"2432","line":113,"column":29,"nodeType":"2313","endLine":115,"endColumn":30},{"ruleId":"2305","severity":1,"message":"2306","line":121,"column":91,"nodeType":"2307","messageId":"2276","endLine":121,"endColumn":93},{"ruleId":"2265","severity":1,"message":"2488","line":63,"column":8,"nodeType":"2267","endLine":66,"endColumn":6,"suggestions":"2522"},{"ruleId":"2265","severity":1,"message":"2490","line":64,"column":9,"nodeType":"2307","endLine":64,"endColumn":59},{"ruleId":"2265","severity":1,"message":"2490","line":65,"column":9,"nodeType":"2491","endLine":65,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2366","line":5,"column":18,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2503","line":5,"column":36,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":49},{"ruleId":"2219","severity":1,"message":"2249","line":5,"column":125,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":134},{"ruleId":"2219","severity":1,"message":"2510","line":27,"column":11,"nodeType":"2221","messageId":"2222","endLine":27,"endColumn":48},{"ruleId":"2219","severity":1,"message":"2504","line":37,"column":11,"nodeType":"2221","messageId":"2222","endLine":37,"endColumn":40},{"ruleId":"2265","severity":1,"message":"2508","line":76,"column":8,"nodeType":"2267","endLine":79,"endColumn":6,"suggestions":"2523"},{"ruleId":"2265","severity":1,"message":"2490","line":77,"column":9,"nodeType":"2307","endLine":77,"endColumn":66},{"ruleId":"2265","severity":1,"message":"2490","line":78,"column":9,"nodeType":"2491","endLine":78,"endColumn":52},{"ruleId":"2219","severity":1,"message":"2486","line":41,"column":11,"nodeType":"2221","messageId":"2222","endLine":41,"endColumn":34},{"ruleId":"2265","severity":1,"message":"2524","line":44,"column":8,"nodeType":"2267","endLine":44,"endColumn":55,"suggestions":"2525"},{"ruleId":"2219","severity":1,"message":"2486","line":46,"column":11,"nodeType":"2221","messageId":"2222","endLine":46,"endColumn":34},{"ruleId":"2311","severity":1,"message":"2312","line":251,"column":48,"nodeType":"2313","messageId":"2314","endLine":251,"endColumn":117,"fix":"2526"},{"ruleId":"2219","severity":1,"message":"2225","line":2,"column":10,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2527","line":3,"column":8,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2528","line":8,"column":8,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2529","line":9,"column":8,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":23},{"ruleId":"2219","severity":1,"message":"2270","line":10,"column":8,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2518","line":11,"column":9,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2277","line":11,"column":20,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2249","line":11,"column":27,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2366","line":11,"column":38,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":46},{"ruleId":"2219","severity":1,"message":"2408","line":12,"column":10,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2290","line":12,"column":18,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2253","line":12,"column":24,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":38},{"ruleId":"2219","severity":1,"message":"2255","line":12,"column":40,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2327","line":12,"column":47,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2530","line":13,"column":10,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":23},{"ruleId":"2219","severity":1,"message":"2251","line":14,"column":18,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2322","line":14,"column":30,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2531","line":15,"column":13,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2243","line":16,"column":8,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2532","line":17,"column":9,"nodeType":"2221","messageId":"2222","endLine":17,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2246","line":22,"column":3,"nodeType":"2221","messageId":"2222","endLine":22,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2302","line":24,"column":3,"nodeType":"2221","messageId":"2222","endLine":24,"endColumn":10},{"ruleId":"2219","severity":1,"message":"2533","line":25,"column":3,"nodeType":"2221","messageId":"2222","endLine":25,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2527","line":2,"column":8,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2408","line":9,"column":10,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2255","line":9,"column":40,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":45},{"ruleId":"2219","severity":1,"message":"2518","line":14,"column":97,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":106},{"ruleId":"2219","severity":1,"message":"2456","line":16,"column":10,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2534","line":71,"column":10,"nodeType":"2221","messageId":"2222","endLine":71,"endColumn":13},{"ruleId":"2535","severity":1,"message":"2536","line":78,"column":16,"nodeType":"2259","messageId":"2537","endLine":78,"endColumn":32,"fix":"2538"},{"ruleId":"2219","severity":1,"message":"2237","line":99,"column":9,"nodeType":"2221","messageId":"2222","endLine":99,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2237","line":108,"column":11,"nodeType":"2221","messageId":"2222","endLine":108,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2237","line":117,"column":9,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":20},{"ruleId":"2305","severity":1,"message":"2321","line":191,"column":35,"nodeType":"2307","messageId":"2276","endLine":191,"endColumn":37},{"ruleId":"2219","severity":1,"message":"2237","line":213,"column":11,"nodeType":"2221","messageId":"2222","endLine":213,"endColumn":22},{"ruleId":"2305","severity":1,"message":"2321","line":215,"column":27,"nodeType":"2307","messageId":"2276","endLine":215,"endColumn":29},{"ruleId":"2219","severity":1,"message":"2308","line":233,"column":11,"nodeType":"2221","messageId":"2222","endLine":233,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2309","line":233,"column":19,"nodeType":"2221","messageId":"2222","endLine":233,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2412","line":233,"column":71,"nodeType":"2221","messageId":"2222","endLine":233,"endColumn":84},{"ruleId":"2219","severity":1,"message":"2239","line":2,"column":19,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":29},{"ruleId":"2352","severity":1,"message":"2383","line":39,"column":55,"nodeType":"2354","messageId":"2355","endLine":39,"endColumn":57},{"ruleId":"2352","severity":1,"message":"2383","line":52,"column":52,"nodeType":"2354","messageId":"2355","endLine":52,"endColumn":54},{"ruleId":"2219","severity":1,"message":"2294","line":3,"column":10,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2246","line":3,"column":16,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2251","line":2,"column":18,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2243","line":28,"column":8,"nodeType":"2221","messageId":"2222","endLine":28,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2539","line":55,"column":19,"nodeType":"2221","messageId":"2222","endLine":55,"endColumn":29},{"ruleId":"2219","severity":1,"message":"2540","line":56,"column":19,"nodeType":"2221","messageId":"2222","endLine":56,"endColumn":29},{"ruleId":"2219","severity":1,"message":"2541","line":57,"column":21,"nodeType":"2221","messageId":"2222","endLine":57,"endColumn":33},{"ruleId":"2219","severity":1,"message":"2542","line":58,"column":20,"nodeType":"2221","messageId":"2222","endLine":58,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2543","line":59,"column":20,"nodeType":"2221","messageId":"2222","endLine":59,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2244","line":1,"column":20,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":29},{"ruleId":"2219","severity":1,"message":"2247","line":4,"column":13,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":17},{"ruleId":"2219","severity":1,"message":"2248","line":4,"column":19,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":30},{"ruleId":"2219","severity":1,"message":"2252","line":5,"column":5,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2277","line":5,"column":11,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2249","line":5,"column":18,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2239","line":5,"column":29,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":39},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2367","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2280","line":6,"column":33,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2322","line":10,"column":30,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2327","line":11,"column":10,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2290","line":11,"column":21,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2253","line":11,"column":27,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2254","line":11,"column":43,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2531","line":13,"column":13,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2530","line":15,"column":10,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":23},{"ruleId":"2219","severity":1,"message":"2532","line":16,"column":10,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":21},{"ruleId":"2219","severity":1,"message":"2446","line":33,"column":11,"nodeType":"2221","messageId":"2222","endLine":33,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2244","line":1,"column":20,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":29},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2277","line":5,"column":11,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2249","line":5,"column":18,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2367","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2280","line":6,"column":33,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2322","line":10,"column":30,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2327","line":11,"column":10,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2290","line":11,"column":21,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2253","line":11,"column":27,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2254","line":11,"column":43,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2531","line":13,"column":13,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2530","line":15,"column":10,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":23},{"ruleId":"2219","severity":1,"message":"2532","line":16,"column":10,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":21},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2252","line":5,"column":5,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2249","line":5,"column":18,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2280","line":6,"column":33,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":41},{"ruleId":"2219","severity":1,"message":"2302","line":6,"column":43,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":50},{"ruleId":"2219","severity":1,"message":"2303","line":6,"column":52,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":56},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2500","line":17,"column":10,"nodeType":"2221","messageId":"2222","endLine":17,"endColumn":27},{"ruleId":"2305","severity":1,"message":"2306","line":109,"column":31,"nodeType":"2307","messageId":"2276","endLine":109,"endColumn":33},{"ruleId":"2219","severity":1,"message":"2308","line":176,"column":13,"nodeType":"2221","messageId":"2222","endLine":176,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2309","line":176,"column":21,"nodeType":"2221","messageId":"2222","endLine":176,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2281","line":176,"column":30,"nodeType":"2221","messageId":"2222","endLine":176,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2310","line":176,"column":66,"nodeType":"2221","messageId":"2222","endLine":176,"endColumn":79},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2252","line":5,"column":5,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2367","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2544","line":30,"column":11,"nodeType":"2221","messageId":"2222","endLine":30,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2545","line":58,"column":12,"nodeType":"2221","messageId":"2222","endLine":58,"endColumn":19},{"ruleId":"2265","severity":1,"message":"2546","line":68,"column":8,"nodeType":"2267","endLine":68,"endColumn":10,"suggestions":"2547"},{"ruleId":"2273","severity":1,"message":"2548","line":320,"column":13,"nodeType":"2275","messageId":"2276","endLine":320,"endColumn":27},{"ruleId":"2219","severity":1,"message":"2549","line":451,"column":110,"nodeType":"2221","messageId":"2222","endLine":451,"endColumn":124},{"ruleId":"2550","severity":1,"message":"2551","line":796,"column":96,"nodeType":"2552","messageId":"2553","endLine":796,"endColumn":110},{"ruleId":"2305","severity":1,"message":"2306","line":897,"column":67,"nodeType":"2307","messageId":"2276","endLine":897,"endColumn":69},{"ruleId":"2219","severity":1,"message":"2269","line":2,"column":10,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2244","line":3,"column":17,"nodeType":"2221","messageId":"2222","endLine":3,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2270","line":4,"column":8,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2293","line":6,"column":8,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2246","line":7,"column":9,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2239","line":7,"column":26,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2554","line":8,"column":24,"nodeType":"2221","messageId":"2222","endLine":8,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2271","line":76,"column":7,"nodeType":"2221","messageId":"2222","endLine":76,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2272","line":85,"column":12,"nodeType":"2221","messageId":"2222","endLine":85,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2252","line":5,"column":5,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2367","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2254","line":11,"column":43,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2265","severity":1,"message":"2555","line":38,"column":8,"nodeType":"2267","endLine":38,"endColumn":10,"suggestions":"2556"},{"ruleId":"2360","severity":1,"message":"2557","line":202,"column":16,"nodeType":"2362","messageId":"2363","endLine":202,"endColumn":17,"suggestions":"2558"},{"ruleId":"2219","severity":1,"message":"2281","line":329,"column":30,"nodeType":"2221","messageId":"2222","endLine":329,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2412","line":329,"column":81,"nodeType":"2221","messageId":"2222","endLine":329,"endColumn":94},{"ruleId":"2219","severity":1,"message":"2390","line":7,"column":140,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":146},{"ruleId":"2219","severity":1,"message":"2559","line":7,"column":148,"nodeType":"2221","messageId":"2222","endLine":7,"endColumn":161},{"ruleId":"2219","severity":1,"message":"2243","line":10,"column":8,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2560","line":65,"column":9,"nodeType":"2221","messageId":"2222","endLine":65,"endColumn":15},{"ruleId":"2219","severity":1,"message":"2561","line":67,"column":9,"nodeType":"2221","messageId":"2222","endLine":67,"endColumn":15},{"ruleId":"2265","severity":1,"message":"2562","line":128,"column":6,"nodeType":"2267","endLine":128,"endColumn":8,"suggestions":"2563"},{"ruleId":"2219","severity":1,"message":"2448","line":11,"column":8,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2449","line":12,"column":8,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2283","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":24},{"ruleId":"2265","severity":1,"message":"2564","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2565"},{"ruleId":"2219","severity":1,"message":"2282","line":121,"column":111,"nodeType":"2221","messageId":"2222","endLine":121,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2323","line":13,"column":8,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2254","line":15,"column":43,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":55},{"ruleId":"2265","severity":1,"message":"2566","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2567"},{"ruleId":"2219","severity":1,"message":"2281","line":117,"column":30,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":117,"column":96,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":109},{"ruleId":"2219","severity":1,"message":"2282","line":117,"column":111,"nodeType":"2221","messageId":"2222","endLine":117,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2254","line":10,"column":43,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2323","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2281","line":89,"column":30,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":89,"column":96,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":109},{"ruleId":"2219","severity":1,"message":"2282","line":89,"column":111,"nodeType":"2221","messageId":"2222","endLine":89,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2448","line":11,"column":8,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2449","line":12,"column":8,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2283","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":24},{"ruleId":"2265","severity":1,"message":"2568","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2569"},{"ruleId":"2219","severity":1,"message":"2282","line":121,"column":111,"nodeType":"2221","messageId":"2222","endLine":121,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2281","line":93,"column":30,"nodeType":"2221","messageId":"2222","endLine":93,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":93,"column":111,"nodeType":"2221","messageId":"2222","endLine":93,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2448","line":12,"column":8,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":25},{"ruleId":"2219","severity":1,"message":"2449","line":13,"column":8,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2283","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2278","line":16,"column":8,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":91,"column":12,"nodeType":"2221","messageId":"2222","endLine":91,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2283","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":24},{"ruleId":"2265","severity":1,"message":"2570","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2571"},{"ruleId":"2219","severity":1,"message":"2282","line":121,"column":111,"nodeType":"2221","messageId":"2222","endLine":121,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2281","line":93,"column":30,"nodeType":"2221","messageId":"2222","endLine":93,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":93,"column":111,"nodeType":"2221","messageId":"2222","endLine":93,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2283","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2225","line":1,"column":10,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":18},{"ruleId":"2219","severity":1,"message":"2281","line":93,"column":30,"nodeType":"2221","messageId":"2222","endLine":93,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":93,"column":111,"nodeType":"2221","messageId":"2222","endLine":93,"endColumn":123},{"ruleId":"2265","severity":1,"message":"2572","line":60,"column":8,"nodeType":"2267","endLine":60,"endColumn":10,"suggestions":"2573"},{"ruleId":"2219","severity":1,"message":"2282","line":121,"column":111,"nodeType":"2221","messageId":"2222","endLine":121,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2283","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":16},{"ruleId":"2219","severity":1,"message":"2278","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2272","line":90,"column":12,"nodeType":"2221","messageId":"2222","endLine":90,"endColumn":24},{"ruleId":"2219","severity":1,"message":"2323","line":13,"column":8,"nodeType":"2221","messageId":"2222","endLine":13,"endColumn":14},{"ruleId":"2219","severity":1,"message":"2254","line":15,"column":43,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2574","line":30,"column":12,"nodeType":"2221","messageId":"2222","endLine":30,"endColumn":22},{"ruleId":"2219","severity":1,"message":"2343","line":30,"column":24,"nodeType":"2221","messageId":"2222","endLine":30,"endColumn":37},{"ruleId":"2219","severity":1,"message":"2575","line":59,"column":20,"nodeType":"2221","messageId":"2222","endLine":59,"endColumn":34},{"ruleId":"2219","severity":1,"message":"2576","line":95,"column":12,"nodeType":"2221","messageId":"2222","endLine":95,"endColumn":25},{"ruleId":"2265","severity":1,"message":"2577","line":126,"column":8,"nodeType":"2267","endLine":126,"endColumn":10,"suggestions":"2578"},{"ruleId":"2219","severity":1,"message":"2281","line":191,"column":30,"nodeType":"2221","messageId":"2222","endLine":191,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2326","line":191,"column":96,"nodeType":"2221","messageId":"2222","endLine":191,"endColumn":109},{"ruleId":"2219","severity":1,"message":"2282","line":191,"column":111,"nodeType":"2221","messageId":"2222","endLine":191,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2254","line":10,"column":43,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2323","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":14},{"ruleId":"2265","severity":1,"message":"2579","line":129,"column":8,"nodeType":"2267","endLine":129,"endColumn":10,"suggestions":"2580"},{"ruleId":"2219","severity":1,"message":"2281","line":158,"column":30,"nodeType":"2221","messageId":"2222","endLine":158,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":158,"column":111,"nodeType":"2221","messageId":"2222","endLine":158,"endColumn":123},{"ruleId":"2219","severity":1,"message":"2251","line":2,"column":18,"nodeType":"2221","messageId":"2222","endLine":2,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2243","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":13},{"ruleId":"2311","severity":1,"message":"2312","line":102,"column":25,"nodeType":"2313","messageId":"2314","endLine":104,"endColumn":27,"fix":"2581"},{"ruleId":"2311","severity":1,"message":"2312","line":140,"column":25,"nodeType":"2313","messageId":"2314","endLine":142,"endColumn":27,"fix":"2582"},{"ruleId":"2311","severity":1,"message":"2312","line":177,"column":25,"nodeType":"2313","messageId":"2314","endLine":179,"endColumn":27,"fix":"2583"},{"ruleId":"2311","severity":1,"message":"2312","line":214,"column":29,"nodeType":"2313","messageId":"2314","endLine":215,"endColumn":92,"fix":"2584"},{"ruleId":"2311","severity":1,"message":"2312","line":245,"column":29,"nodeType":"2313","messageId":"2314","endLine":246,"endColumn":92,"fix":"2585"},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2252","line":5,"column":5,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2239","line":5,"column":29,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":39},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2367","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2254","line":11,"column":43,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2586","line":17,"column":10,"nodeType":"2221","messageId":"2222","endLine":17,"endColumn":25},{"ruleId":"2352","severity":1,"message":"2353","line":39,"column":78,"nodeType":"2354","messageId":"2355","endLine":39,"endColumn":80},{"ruleId":"2265","severity":1,"message":"2587","line":51,"column":8,"nodeType":"2267","endLine":51,"endColumn":10,"suggestions":"2588"},{"ruleId":"2360","severity":1,"message":"2557","line":221,"column":33,"nodeType":"2362","messageId":"2363","endLine":221,"endColumn":34,"suggestions":"2589"},{"ruleId":"2360","severity":1,"message":"2557","line":233,"column":33,"nodeType":"2362","messageId":"2363","endLine":233,"endColumn":34,"suggestions":"2590"},{"ruleId":"2360","severity":1,"message":"2557","line":235,"column":33,"nodeType":"2362","messageId":"2363","endLine":235,"endColumn":34,"suggestions":"2591"},{"ruleId":"2219","severity":1,"message":"2282","line":270,"column":96,"nodeType":"2221","messageId":"2222","endLine":270,"endColumn":108},{"ruleId":"2219","severity":1,"message":"2549","line":270,"column":110,"nodeType":"2221","messageId":"2222","endLine":270,"endColumn":124},{"ruleId":"2535","severity":1,"message":"2592","line":592,"column":71,"nodeType":"2259","messageId":"2537","endLine":592,"endColumn":85,"fix":"2593"},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2252","line":5,"column":5,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2239","line":5,"column":29,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":39},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2367","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2251","line":10,"column":18,"nodeType":"2221","messageId":"2222","endLine":10,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2254","line":11,"column":43,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2255","line":11,"column":57,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":14,"column":8,"nodeType":"2221","messageId":"2222","endLine":14,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2594","line":34,"column":36,"nodeType":"2221","messageId":"2222","endLine":34,"endColumn":61},{"ruleId":"2265","severity":1,"message":"2595","line":63,"column":8,"nodeType":"2267","endLine":63,"endColumn":10,"suggestions":"2596"},{"ruleId":"2219","severity":1,"message":"2281","line":321,"column":30,"nodeType":"2221","messageId":"2222","endLine":321,"endColumn":36},{"ruleId":"2219","severity":1,"message":"2282","line":321,"column":96,"nodeType":"2221","messageId":"2222","endLine":321,"endColumn":108},{"ruleId":"2219","severity":1,"message":"2246","line":4,"column":5,"nodeType":"2221","messageId":"2222","endLine":4,"endColumn":11},{"ruleId":"2219","severity":1,"message":"2252","line":5,"column":5,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":9},{"ruleId":"2219","severity":1,"message":"2239","line":5,"column":29,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":39},{"ruleId":"2219","severity":1,"message":"2301","line":6,"column":5,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2367","line":6,"column":21,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":31},{"ruleId":"2219","severity":1,"message":"2251","line":11,"column":18,"nodeType":"2221","messageId":"2222","endLine":11,"endColumn":28},{"ruleId":"2219","severity":1,"message":"2254","line":12,"column":43,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":55},{"ruleId":"2219","severity":1,"message":"2255","line":12,"column":57,"nodeType":"2221","messageId":"2222","endLine":12,"endColumn":62},{"ruleId":"2219","severity":1,"message":"2243","line":15,"column":8,"nodeType":"2221","messageId":"2222","endLine":15,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2597","line":16,"column":10,"nodeType":"2221","messageId":"2222","endLine":16,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2598","line":39,"column":34,"nodeType":"2221","messageId":"2222","endLine":39,"endColumn":57},{"ruleId":"2305","severity":1,"message":"2321","line":67,"column":23,"nodeType":"2307","messageId":"2276","endLine":67,"endColumn":25},{"ruleId":"2305","severity":1,"message":"2321","line":70,"column":23,"nodeType":"2307","messageId":"2276","endLine":70,"endColumn":25},{"ruleId":"2265","severity":1,"message":"2599","line":286,"column":14,"nodeType":"2267","endLine":286,"endColumn":16,"suggestions":"2600"},{"ruleId":"2219","severity":1,"message":"2282","line":324,"column":96,"nodeType":"2221","messageId":"2222","endLine":324,"endColumn":108},{"ruleId":"2219","severity":1,"message":"2252","line":6,"column":86,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":90},{"ruleId":"2219","severity":1,"message":"2601","line":1,"column":8,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":13},{"ruleId":"2219","severity":1,"message":"2602","line":5,"column":8,"nodeType":"2221","messageId":"2222","endLine":5,"endColumn":19},{"ruleId":"2219","severity":1,"message":"2603","line":6,"column":8,"nodeType":"2221","messageId":"2222","endLine":6,"endColumn":20},{"ruleId":"2219","severity":1,"message":"2244","line":1,"column":17,"nodeType":"2221","messageId":"2222","endLine":1,"endColumn":26},{"ruleId":"2219","severity":1,"message":"2243","line":9,"column":8,"nodeType":"2221","messageId":"2222","endLine":9,"endColumn":13},"no-native-reassign",["2604"],"no-negated-in-lhs",["2605"],"no-unused-vars","'PERMISSIONS' is defined but never used.","Identifier","unusedVar","'Children' is defined but never used.","'useContext' is defined but never used.","'useState' is defined but never used.","'AppTasks' is defined but never used.","'AppNewUsers' is defined but never used.","'AppBugReports' is defined but never used.","'AppItemOrders' is defined but never used.","'AppWeeklySales' is defined but never used.","'AppCurrentVisits' is defined but never used.","'AppWebsiteVisits' is defined but never used.","'AppTrafficBySite' is defined but never used.","'AppCurrentSubject' is defined but never used.","'AppConversionRates' is defined but never used.","'headerStyle' is assigned a value but never used.","'apiInstance' is assigned a value but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","'AuthLayout' is defined but never used.","'MHidden' is defined but never used.","'RegisterForm' is defined but never used.","'axios' is defined but never used.","'useEffect' is defined but never used.","'Autocomplete' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'TextField' is defined but never used.","'Skeleton' is defined but never used.","'RouterLink' is defined but never used.","'Link' is defined but never used.","'FormikProvider' is defined but never used.","'ErrorMessage' is defined but never used.","'Field' is defined but never used.","'thisUserObject' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"2606","text":"2607"},"'DialogContentText' is defined but never used.","'enqueueSnackbar' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getJoineesList'. Either include it or remove the dependency array.","ArrayExpression",["2608"],"'Icon' is defined but never used.","'plusFill' is defined but never used.","'StyledButton' is assigned a value but never used.","'rowClickData' is assigned a value but never used.","no-dupe-keys","Duplicate key 'filter'.","ObjectExpression","unexpected","'Stack' is defined but never used.","'_' is defined but never used.","'userInfo' is assigned a value but never used.","'MenuItem' is defined but never used.","'values' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'UserInfo' is defined but never used.","React Hook useEffect has a missing dependency: 'getTechnologyInfo'. Either include it or remove the dependency array.",["2609"],"React Hook useEffect has a missing dependency: 'getLocationInfo'. Either include it or remove the dependency array.",["2610"],"React Hook useEffect has a missing dependency: 'getcandidateSourceInfo'. Either include it or remove the dependency array.",["2611"],"'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'getCandidateData'. Either include it or remove the dependency array.",["2612"],"'LinearProgress' is defined but never used.","'Grid' is defined but never used.","'CandidateCalendar' is defined but never used.","React Hook useEffect has a missing dependency: 'getCandidateConfirmIntvDetails'. Either include it or remove the dependency array.",["2613"],"'color' is assigned a value but never used.","'onStartTimeSelect' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'InputAdornment' is defined but never used.","'Tooltip' is defined but never used.","'Fade' is defined but never used.","'useParams' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'errors' is assigned a value but never used.","'touched' is assigned a value but never used.","'getFieldProps' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"2614","text":"2615"},{"range":"2616","text":"2615"},{"range":"2617","text":"2615"},{"range":"2618","text":"2607"},"'AppNewsUpdate' is defined but never used.","'AppOrderTimeline' is defined but never used.","Expected '===' and instead saw '=='.","'useNavigate' is defined but never used.","'Switch' is defined but never used.","React Hook useEffect has a missing dependency: 'getBusinessUnitsInfo'. Either include it or remove the dependency array.",["2619"],"'setFieldValue' is assigned a value but never used.","'useFormik' is defined but never used.","'isOpen' is assigned a value but never used.","'setIsOpen' is assigned a value but never used.","'popupOpen' is assigned a value but never used.","'closePopup' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getJob'. Either include it or remove the dependency array.",["2620"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'colSpan' is assigned a value but never used.","'Paper' is defined but never used.","'ConstructionOutlined' is defined but never used.","'rows' is assigned a value but never used.","'UserID' is assigned a value but never used.","'editPerm' is assigned a value but never used.","'setEditPerm' is assigned a value but never used.","'setDeleteItem' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getMasterRolesList', 'getPermissionsList', and 'getRoleInfo'. Either include them or remove the dependency array.",["2621"],"React Hook useEffect has a missing dependency: 'getJobApplicationData'. Either include it or remove the dependency array.",["2622"],{"range":"2623","text":"2615"},"'UserData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserList'. Either include it or remove the dependency array.",["2624"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.",["2625"],"'getUserList' is assigned a value but never used.","'selectRoleData' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\ .","Literal","unnecessaryEscape",["2626","2627"],["2628"],"'Checkbox' is defined but never used.","'InputLabel' is defined but never used.","'alpha' is defined but never used.","React Hook useEffect has a missing dependency: 'getRequisitionData'. Either include it or remove the dependency array.",["2629"],"'setChecked' is assigned a value but never used.","'drmName' is assigned a value but never used.","'DRMUser' is assigned a value but never used.","Array.prototype.filter() expects a return value from arrow function.","expectedInside","'InfoStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getMasterRolesList' and 'getPermissionsList'. Either include them or remove the dependency array.",["2630"],"React Hook useEffect has a missing dependency: 'getTechStackInfo'. Either include it or remove the dependency array.",["2631"],"React Hook useEffect has a missing dependency: 'getJobsList'. Either include it or remove the dependency array.",["2632"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Padding' is defined but never used.",["2633"],["2634"],"'FormControl' is defined but never used.","'Select' is defined but never used.","'stackRecruiterData' is assigned a value but never used.","'checked' is assigned a value but never used.","'handleIsActiveChange' is assigned a value but never used.","'secondaryTechnologyState' is assigned a value but never used.","'setSecondaryTechnologyState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'location.state.requisitionTemplate'. Either include it or remove the dependency array.",["2635"],"'setValues' is assigned a value but never used.","'TableCell' is defined but never used.","'Table' is defined but never used.","'TableContainer' is defined but never used.","'TableRow' is defined but never used.","'TableHead' is defined but never used.","'showIntTech' is assigned a value but never used.","'EmployeeData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getEmployeeList'. Either include it or remove the dependency array.",["2636"],"'Formik' is defined but never used.","'ListItemText' is defined but never used.","'FormControlLabel' is defined but never used.","'openFilter' is assigned a value but never used.","'setSubmitting' is assigned a value but never used.","'TimePicker' is defined but never used.","'eventData' is assigned a value but never used.","'setEventData' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'constantCase' is defined but never used.","'setFieldValue' is defined but never used.","React Hook useEffect has missing dependencies: 'getNoticePeriodList', 'getRequisitionData', 'getSourceList', and 'getStatusList'. Either include them or remove the dependency array.",["2637"],"React Hook useEffect has missing dependencies: 'confirmedInterviewDataLoad' and 'handleTechnicalInterviewRecording'. Either include them or remove the dependency array.",["2638"],"'handleReviewRoundResult' is assigned a value but never used.","'technicalInterviewChecked' is assigned a value but never used.","'setTechnicalInterviewChecked' is assigned a value but never used.","'technicalInterviewCompletedFlag' is assigned a value but never used.","'setTechnicalInterviewCompletedFlag' is assigned a value but never used.","'setTechnicalRoundResult' is assigned a value but never used.",{"range":"2639","text":"2615"},{"range":"2640","text":"2615"},"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'id' is assigned a value but never used.","'technologyData' is assigned a value but never used.","'secondaryTechnologyArray' is assigned a value but never used.","'requisitionTemplateData' is assigned a value but never used.","'techStackData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'location.state.from', 'location.state?.fromPage', and 'thisNewNum.value'. Either include them or remove the dependency array.",["2641"],"'setSecondaryTechnologyArray' is assigned a value but never used.","'secondaryTechnologyData' is assigned a value but never used.","'rrfNumberData' is assigned a value but never used.","'fsdMembersData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getRRFNumber'. Either include it or remove the dependency array.",["2642"],"'isStepOptional' is assigned a value but never used.","'handleBtnClick' is assigned a value but never used.","'CheckOutlinedIcon' is defined but never used.","'CloseRoundedIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'getNoticePeriodInfo'. Either include it or remove the dependency array.",["2643"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'auth_user.user', 'local_key', and 'local_user'. Either include them or remove the dependency array.",["2644"],"'Avatar' is defined but never used.","'Modal' is defined but never used.","React Hook useEffect has missing dependencies: 'isOpenSidebar' and 'onCloseSidebar'. Either include them or remove the dependency array. If 'onCloseSidebar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2645"],"'user_roles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getRequisitionData', 'isOpenSidebar', and 'onCloseSidebar'. Either include them or remove the dependency array. If 'onCloseSidebar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2646"],"'loginUser' is assigned a value but never used.","'setLoginUser' is assigned a value but never used.","'settings2Fill' is defined but never used.","'calendarFill' is defined but never used.","'icon' is assigned a value but never used.","'info' is assigned a value but never used.","'personFill' is defined but never used.","'employeeEmail' is assigned a value but never used.","'TitleStyle' is assigned a value but never used.","'cover' is assigned a value but never used.","'title' is assigned a value but never used.","'author' is assigned a value but never used.","'createdAt' is assigned a value but never used.","'setRowClickData' is assigned a value but never used.","'InitialRoundCandidateForm' is defined but never used.","'InitialRoundCallRecording' is defined but never used.","'InitialRoundFeedback' is defined but never used.","'InitialRoundStatus' is defined but never used.","'LaptopChromebookOutlinedIcon' is defined but never used.",["2647"],"'hrScheduleInterviewOpen' is assigned a value but never used.","'setHrScheduleInterviewOpen' is assigned a value but never used.","'practicalScheduleInterviewOpen' is assigned a value but never used.","'setPracticalScheduleInterviewOpen' is assigned a value but never used.","'handleScheduleInterview' is assigned a value but never used.","'handleHrInterviewCheckedChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'HrRoundData'. Either include it or remove the dependency array.",["2648"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ChainExpression","'hrScheduleInterviewResultOpen' is assigned a value but never used.","'openHrInterviewRecording' is assigned a value but never used.","'hrInterviewRecording' is assigned a value but never used.","'handleHrInterviewRecording' is assigned a value but never used.","'handleHrRoundResult' is assigned a value but never used.","'getHRInterviewDateTime' is defined but never used.","'renderToString' is defined but never used.","'DateTimePicker' is defined but never used.","'CenterFocusStrong' is defined but never used.","'border' is defined but never used.","'DatePickerField' is assigned a value but never used.","'DialogActions' is defined but never used.","'handleTechnicalRoundOneResult' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CTORoundData'. Either include it or remove the dependency array.",["2649"],["2650"],"React Hook useEffect has a missing dependency: 'TechnicalRoundData'. Either include it or remove the dependency array.",["2651"],"'handleTechnicalInterviewCheckedChange' is assigned a value but never used.",["2652"],["2653"],"'technicalReviewChecked' is assigned a value but never used.","'handleTechnicalReviewCheckedChange' is assigned a value but never used.","'technicalReviewResult' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'confirmedInterviewData'. Either include it or remove the dependency array.",["2654"],"'Container' is defined but never used.","'Dialog' is defined but never used.","'DialogContent' is defined but never used.",["2655"],["2656"],["2657"],"React Hook useEffect has a missing dependency: 'getEmployeeData'. Either include it or remove the dependency array.",["2658"],{"range":"2659","text":"2615"},"'Popup' is defined but never used.","'trash2Fill' is defined but never used.","'roundFilterList' is defined but never used.","'LoadingButton' is defined but never used.","'Yup' is defined but never used.","'useSnackbar' is defined but never used.","'IconButton' is defined but never used.","'job' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property jobMaxExp.","unexpectedWhitespace",{"range":"2660","text":"2661"},"'setTaskOne' is assigned a value but never used.","'setTaskTwo' is assigned a value but never used.","'setTaskThree' is assigned a value but never used.","'setTaskFour' is assigned a value but never used.","'setTaskFive' is assigned a value but never used.","'phoneRegExp' is assigned a value but never used.","'backUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCurrencyList', 'getLocationsList', 'getNoticePeriodList', 'getSourceList', 'getStatusList', 'getTechList', and 'setOtherValues'. Either include them or remove the dependency array.",["2662"],"Duplicate key 'last_company'.","'selectedOption' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'ExpandButton' is defined but never used.","React Hook useEffect has missing dependencies: 'getNonVerbalCuesList' and 'getNoticePeriodList'. Either include them or remove the dependency array.",["2663"],"Unnecessary escape character: \\'.",["2664","2665"],"'OutlinedInput' is defined but never used.","'expReg' is assigned a value but never used.","'months' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getLocationsList', 'getNoticePeriodList', and 'getTechList'. Either include them or remove the dependency array.",["2666"],"React Hook useEffect has a missing dependency: 'getcandidateStatusInfo'. Either include it or remove the dependency array.",["2667"],"React Hook useEffect has a missing dependency: 'getEducationalDegreeInfo'. Either include it or remove the dependency array.",["2668"],"React Hook useEffect has a missing dependency: 'getRequisitionStatusInfo'. Either include it or remove the dependency array.",["2669"],"React Hook useEffect has a missing dependency: 'getRequisitionTypeInfo'. Either include it or remove the dependency array.",["2670"],"React Hook useEffect has a missing dependency: 'getCurrencyInfo'. Either include it or remove the dependency array.",["2671"],"'deleteItem' is assigned a value but never used.","'technologyInfo' is assigned a value but never used.","'TechStackInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getTechStackInfo', 'getTechStackTechnologiesInfo', and 'getTechnologyInfo'. Either include them or remove the dependency array.",["2672"],"React Hook useEffect has missing dependencies: 'getTechStackInfo' and 'getTechnologyInfo'. Either include them or remove the dependency array.",["2673"],{"range":"2674","text":"2615"},{"range":"2675","text":"2615"},{"range":"2676","text":"2615"},{"range":"2677","text":"2615"},{"range":"2678","text":"2615"},"'CloseFullscreen' is defined but never used.","React Hook useEffect has missing dependencies: 'getFSDMemList' and 'getLocationsList'. Either include them or remove the dependency array.",["2679"],["2680","2681"],["2682","2683"],["2684","2685"],"Unexpected whitespace before property PerAdd.",{"range":"2686","text":"2661"},"'setCandOnboardDetailsData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getOnboardingHRList', 'getPayrollCompanyList', and 'getSigningAuthorityList'. Either include them or remove the dependency array.",["2687"],"'DatePicker' is defined but never used.","'setCandOfferDetailsData' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'candData?.candidateData?.current_ctc', 'candOfferDetailsData?.appraisal_ctc', 'candOfferDetailsData?.appraisal_date', 'candOfferDetailsData?.curr_ctc_monthly', 'candOfferDetailsData?.designation', 'candOfferDetailsData?.esic', 'candOfferDetailsData?.exp_range', 'candOfferDetailsData?.hike_range', 'candOfferDetailsData?.offered_ctc', 'candOfferDetailsData?.offered_ctc_monthly', 'candOfferDetailsData?.offered_hike', 'candOfferDetailsData?.pf', 'candOfferDetailsData?.pms', 'candOfferDetailsData?.probation', 'candOfferDetailsData?.revision', 'candOfferDetailsData?.serve_agree', 'candOfferDetailsData?.var_amt', 'candOfferDetailsData?.var_type', and 'getExpRange'. Either include them or remove the dependency array.",["2688"],"'faker' is defined but never used.","'twitterFill' is defined but never used.","'facebookFill' is defined but never used.","no-global-assign","no-unsafe-negation",[1967,1981],"\n            .",{"desc":"2689","fix":"2690"},{"desc":"2691","fix":"2692"},{"desc":"2693","fix":"2694"},{"desc":"2695","fix":"2696"},{"desc":"2697","fix":"2698"},{"desc":"2699","fix":"2700"},[12299,12299]," rel=\"noreferrer\"",[13408,13408],[14434,14434],[1969,1983],{"desc":"2701","fix":"2702"},{"desc":"2703","fix":"2704"},{"desc":"2705","fix":"2706"},{"desc":"2707","fix":"2708"},[7371,7371],{"desc":"2709","fix":"2710"},{"desc":"2711","fix":"2712"},{"messageId":"2713","fix":"2714","desc":"2715"},{"messageId":"2716","fix":"2717","desc":"2718"},{"desc":"2711","fix":"2719"},{"desc":"2720","fix":"2721"},{"desc":"2722","fix":"2723"},{"desc":"2724","fix":"2725"},{"desc":"2726","fix":"2727"},{"desc":"2720","fix":"2728"},{"desc":"2720","fix":"2729"},{"desc":"2730","fix":"2731"},{"desc":"2732","fix":"2733"},{"desc":"2734","fix":"2735"},{"desc":"2736","fix":"2737"},[22793,22793],[23339,23339],{"desc":"2738","fix":"2739"},{"desc":"2740","fix":"2741"},{"desc":"2742","fix":"2743"},{"desc":"2744","fix":"2745"},{"desc":"2746","fix":"2747"},{"desc":"2748","fix":"2749"},{"desc":"2707","fix":"2750"},{"desc":"2751","fix":"2752"},{"desc":"2753","fix":"2754"},{"desc":"2753","fix":"2755"},{"desc":"2756","fix":"2757"},{"desc":"2756","fix":"2758"},{"desc":"2756","fix":"2759"},{"desc":"2760","fix":"2761"},{"desc":"2762","fix":"2763"},{"desc":"2762","fix":"2764"},{"desc":"2756","fix":"2765"},{"desc":"2766","fix":"2767"},[13065,13065],[1830,1832],".",{"desc":"2768","fix":"2769"},{"desc":"2770","fix":"2771"},{"messageId":"2713","fix":"2772","desc":"2715"},{"messageId":"2716","fix":"2773","desc":"2718"},{"desc":"2774","fix":"2775"},{"desc":"2776","fix":"2777"},{"desc":"2778","fix":"2779"},{"desc":"2780","fix":"2781"},{"desc":"2782","fix":"2783"},{"desc":"2784","fix":"2785"},{"desc":"2786","fix":"2787"},{"desc":"2788","fix":"2789"},[4302,4302],[6695,6695],[9086,9086],[11503,11503],[13520,13520],{"desc":"2790","fix":"2791"},{"messageId":"2713","fix":"2792","desc":"2715"},{"messageId":"2716","fix":"2793","desc":"2718"},{"messageId":"2713","fix":"2794","desc":"2715"},{"messageId":"2716","fix":"2795","desc":"2718"},{"messageId":"2713","fix":"2796","desc":"2715"},{"messageId":"2716","fix":"2797","desc":"2718"},[24590,24592],{"desc":"2798","fix":"2799"},{"desc":"2800","fix":"2801"},"Update the dependencies array to be: [getJoineesList]",{"range":"2802","text":"2803"},"Update the dependencies array to be: [getTechnologyInfo]",{"range":"2804","text":"2805"},"Update the dependencies array to be: [getLocationInfo]",{"range":"2806","text":"2807"},"Update the dependencies array to be: [getcandidateSourceInfo]",{"range":"2808","text":"2809"},"Update the dependencies array to be: [getCandidateData]",{"range":"2810","text":"2811"},"Update the dependencies array to be: [getCandidateConfirmIntvDetails]",{"range":"2812","text":"2813"},"Update the dependencies array to be: [getBusinessUnitsInfo]",{"range":"2814","text":"2815"},"Update the dependencies array to be: [getJob]",{"range":"2816","text":"2817"},"Update the dependencies array to be: [getMasterRolesList, getPermissionsList, getRoleInfo]",{"range":"2818","text":"2819"},"Update the dependencies array to be: [getJobApplicationData]",{"range":"2820","text":"2821"},"Update the dependencies array to be: [getUserList]",{"range":"2822","text":"2823"},"Update the dependencies array to be: [getUserData]",{"range":"2824","text":"2825"},"removeEscape",{"range":"2826","text":"2827"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"2828","text":"2829"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"2830","text":"2825"},"Update the dependencies array to be: [getRequisitionData]",{"range":"2831","text":"2832"},"Update the dependencies array to be: [getMasterRolesList, getPermissionsList]",{"range":"2833","text":"2834"},"Update the dependencies array to be: [getTechStackInfo]",{"range":"2835","text":"2836"},"Update the dependencies array to be: [getJobsList]",{"range":"2837","text":"2838"},{"range":"2839","text":"2832"},{"range":"2840","text":"2832"},"Update the dependencies array to be: [location.state.requisitionTemplate]",{"range":"2841","text":"2842"},"Update the dependencies array to be: [getEmployeeList]",{"range":"2843","text":"2844"},"Update the dependencies array to be: [getNoticePeriodList, getRequisitionData, getSourceList, getStatusList]",{"range":"2845","text":"2846"},"Update the dependencies array to be: [confirmedInterviewDataLoad, handleTechnicalInterviewRecording]",{"range":"2847","text":"2848"},"Update the dependencies array to be: [location.state.from, location.state?.fromPage, thisNewNum.value]",{"range":"2849","text":"2850"},"Update the dependencies array to be: [getRRFNumber]",{"range":"2851","text":"2852"},"Update the dependencies array to be: [getNoticePeriodInfo]",{"range":"2853","text":"2854"},"Update the dependencies array to be: [auth_user.user, local_key, local_user]",{"range":"2855","text":"2856"},"Update the dependencies array to be: [isOpenSidebar, onCloseSidebar, pathname]",{"range":"2857","text":"2858"},"Update the dependencies array to be: [getRequisitionData, isOpenSidebar, onCloseSidebar, pathname]",{"range":"2859","text":"2860"},{"range":"2861","text":"2821"},"Update the dependencies array to be: [jobApplicationData?.is_candidate_selected, jobApplicationData?.is_candidate_rejected, jobApplicationData?.job_application_result, HrRoundData]",{"range":"2862","text":"2863"},"Update the dependencies array to be: [CTORoundData]",{"range":"2864","text":"2865"},{"range":"2866","text":"2865"},"Update the dependencies array to be: [TechnicalRoundData]",{"range":"2867","text":"2868"},{"range":"2869","text":"2868"},{"range":"2870","text":"2868"},"Update the dependencies array to be: [confirmedInterviewData]",{"range":"2871","text":"2872"},"Update the dependencies array to be: [HrRoundData]",{"range":"2873","text":"2874"},{"range":"2875","text":"2874"},{"range":"2876","text":"2868"},"Update the dependencies array to be: [getEmployeeData, props?.jobApplicationData?.drm_user?.user?.pk]",{"range":"2877","text":"2878"},"Update the dependencies array to be: [getCurrencyList, getLocationsList, getNoticePeriodList, getSourceList, getStatusList, getTechList, setOtherValues]",{"range":"2879","text":"2880"},"Update the dependencies array to be: [getNonVerbalCuesList, getNoticePeriodList]",{"range":"2881","text":"2882"},{"range":"2883","text":"2827"},{"range":"2884","text":"2829"},"Update the dependencies array to be: [getLocationsList, getNoticePeriodList, getTechList]",{"range":"2885","text":"2886"},"Update the dependencies array to be: [getcandidateStatusInfo]",{"range":"2887","text":"2888"},"Update the dependencies array to be: [getEducationalDegreeInfo]",{"range":"2889","text":"2890"},"Update the dependencies array to be: [getRequisitionStatusInfo]",{"range":"2891","text":"2892"},"Update the dependencies array to be: [getRequisitionTypeInfo]",{"range":"2893","text":"2894"},"Update the dependencies array to be: [getCurrencyInfo]",{"range":"2895","text":"2896"},"Update the dependencies array to be: [getTechStackInfo, getTechStackTechnologiesInfo, getTechnologyInfo]",{"range":"2897","text":"2898"},"Update the dependencies array to be: [getTechStackInfo, getTechnologyInfo]",{"range":"2899","text":"2900"},"Update the dependencies array to be: [getFSDMemList, getLocationsList]",{"range":"2901","text":"2902"},{"range":"2903","text":"2827"},{"range":"2904","text":"2829"},{"range":"2905","text":"2827"},{"range":"2906","text":"2829"},{"range":"2907","text":"2827"},{"range":"2908","text":"2829"},"Update the dependencies array to be: [getOnboardingHRList, getPayrollCompanyList, getSigningAuthorityList]",{"range":"2909","text":"2910"},"Update the dependencies array to be: [candData?.candidateData?.current_ctc, candOfferDetailsData?.appraisal_ctc, candOfferDetailsData?.appraisal_date, candOfferDetailsData?.curr_ctc_monthly, candOfferDetailsData?.designation, candOfferDetailsData?.esic, candOfferDetailsData?.exp_range, candOfferDetailsData?.hike_range, candOfferDetailsData?.offered_ctc, candOfferDetailsData?.offered_ctc_monthly, candOfferDetailsData?.offered_hike, candOfferDetailsData?.pf, candOfferDetailsData?.pms, candOfferDetailsData?.probation, candOfferDetailsData?.revision, candOfferDetailsData?.serve_agree, candOfferDetailsData?.var_amt, candOfferDetailsData?.var_type, getExpRange]",{"range":"2911","text":"2912"},[2576,2578],"[getJoineesList]",[1647,1649],"[getTechnologyInfo]",[1639,1641],"[getLocationInfo]",[1689,1691],"[getcandidateSourceInfo]",[1664,1666],"[getCandidateData]",[5058,5060],"[getCandidateConfirmIntvDetails]",[1672,1674],"[getBusinessUnitsInfo]",[2847,2849],"[getJob]",[4851,4853],"[getMasterRolesList, getPermissionsList, getRoleInfo]",[1739,1741],"[getJobApplicationData]",[2522,2524],"[getUserList]",[2777,2779],"[getUserData]",[1049,1050],"",[1049,1049],"\\",[2596,2598],[2587,2589],"[getRequisitionData]",[3762,3764],"[getMasterRolesList, getPermissionsList]",[1640,1642],"[getTechStackInfo]",[3382,3384],"[getJobsList]",[14826,14828],[13636,13638],[5417,5419],"[location.state.requisitionTemplate]",[1219,1221],"[getEmployeeList]",[2404,2406],"[getNoticePeriodList, getRequisitionData, getSourceList, getStatusList]",[7491,7493],"[confirmedInterviewDataLoad, handleTechnicalInterviewRecording]",[18789,18791],"[location.state.from, location.state?.fromPage, thisNewNum.value]",[12063,12065],"[getRRFNumber]",[1664,1666],"[getNoticePeriodInfo]",[1601,1603],"[auth_user.user, local_key, local_user]",[1505,1515],"[isOpenSidebar, onCloseSidebar, pathname]",[4280,4290],"[getRequisitionData, isOpenSidebar, onCloseSidebar, pathname]",[4005,4007],[6887,7207],"[jobApplicationData?.is_candidate_selected, jobApplicationData?.is_candidate_rejected, jobApplicationData?.job_application_result, HrRoundData]",[2758,2874],"[CTORoundData]",[2925,2986],[3098,3165],"[TechnicalRoundData]",[3004,3132],[3098,3165],[1419,1553],"[confirmedInterviewData]",[3249,3309],"[HrRoundData]",[2499,2613],[3004,3132],[1776,1823],"[getEmployeeData, props?.jobApplicationData?.drm_user?.user?.pk]",[2050,2052],"[getCurrencyList, getLocationsList, getNoticePeriodList, getSourceList, getStatusList, getTechList, setOtherValues]",[1090,1092],"[getNonVerbalCuesList, getNoticePeriodList]",[6989,6990],[6989,6989],[2834,2836],"[getLocationsList, getNoticePeriodList, getTechList]",[1689,1691],"[getcandidateStatusInfo]",[1702,1704],"[getEducationalDegreeInfo]",[1705,1707],"[getRequisitionStatusInfo]",[1690,1692],"[getRequisitionTypeInfo]",[1631,1633],"[getCurrencyInfo]",[3980,3982],"[getTechStackInfo, getTechStackTechnologiesInfo, getTechnologyInfo]",[3975,3977],"[getTechStackInfo, getTechnologyInfo]",[1428,1430],"[getFSDMemList, getLocationsList]",[6921,6922],[6921,6921],[7426,7427],[7426,7426],[7524,7525],[7524,7524],[1894,1896],"[getOnboardingHRList, getPayrollCompanyList, getSigningAuthorityList]",[10218,10220],"[candData?.candidateData?.current_ctc, candOfferDetailsData?.appraisal_ctc, candOfferDetailsData?.appraisal_date, candOfferDetailsData?.curr_ctc_monthly, candOfferDetailsData?.designation, candOfferDetailsData?.esic, candOfferDetailsData?.exp_range, candOfferDetailsData?.hike_range, candOfferDetailsData?.offered_ctc, candOfferDetailsData?.offered_ctc_monthly, candOfferDetailsData?.offered_hike, candOfferDetailsData?.pf, candOfferDetailsData?.pms, candOfferDetailsData?.probation, candOfferDetailsData?.revision, candOfferDetailsData?.serve_agree, candOfferDetailsData?.var_amt, candOfferDetailsData?.var_type, getExpRange]"]