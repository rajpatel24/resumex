{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMergedClasses = exports.mergeClasses = void 0;\nconst objectKeys_1 = require(\"./tools/objectKeys\");\nconst getDependencyArrayRef_1 = require(\"./tools/getDependencyArrayRef\");\nconst cssAndCx_1 = require(\"./cssAndCx\");\nconst react_1 = require(\"react\");\nfunction mergeClasses(classesFromUseStyles, classesFromProps, cx) {\n  //NOTE: We use this test to be resilient in case classesFromProps is not of the expected type.\n  if (!(classesFromProps instanceof Object)) {\n    return classesFromUseStyles;\n  }\n  const out = {};\n  (0, objectKeys_1.objectKeys)(classesFromUseStyles).forEach(ruleName => out[ruleName] = cx(classesFromUseStyles[ruleName], classesFromProps[ruleName]));\n  (0, objectKeys_1.objectKeys)(classesFromProps).forEach(ruleName => {\n    if (ruleName in classesFromUseStyles) {\n      return;\n    }\n    const className = classesFromProps[ruleName];\n    //...Same here, that why we don't do className === undefined\n    if (typeof className !== \"string\") {\n      return;\n    }\n    out[ruleName] = className;\n  });\n  return out;\n}\nexports.mergeClasses = mergeClasses;\nfunction useMergedClasses(classes, classesOv) {\n  const {\n    cx\n  } = (0, cssAndCx_1.useCssAndCx)();\n  return (0, react_1.useMemo)(() => mergeClasses(classes, classesOv, cx), [classes, (0, getDependencyArrayRef_1.getDependencyArrayRef)(classesOv), cx]);\n}\nexports.useMergedClasses = useMergedClasses;","map":{"version":3,"names":["Object","defineProperty","exports","value","useMergedClasses","mergeClasses","objectKeys_1","require","getDependencyArrayRef_1","cssAndCx_1","react_1","classesFromUseStyles","classesFromProps","cx","out","objectKeys","forEach","ruleName","className","classes","classesOv","useCssAndCx","useMemo","getDependencyArrayRef"],"sources":["/home/raj/Desktop/resumeX/resumeX/node_modules/tss-react/mergeClasses.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useMergedClasses = exports.mergeClasses = void 0;\nconst objectKeys_1 = require(\"./tools/objectKeys\");\nconst getDependencyArrayRef_1 = require(\"./tools/getDependencyArrayRef\");\nconst cssAndCx_1 = require(\"./cssAndCx\");\nconst react_1 = require(\"react\");\nfunction mergeClasses(classesFromUseStyles, classesFromProps, cx) {\n    //NOTE: We use this test to be resilient in case classesFromProps is not of the expected type.\n    if (!(classesFromProps instanceof Object)) {\n        return classesFromUseStyles;\n    }\n    const out = {};\n    (0, objectKeys_1.objectKeys)(classesFromUseStyles).forEach(ruleName => (out[ruleName] = cx(classesFromUseStyles[ruleName], classesFromProps[ruleName])));\n    (0, objectKeys_1.objectKeys)(classesFromProps).forEach(ruleName => {\n        if (ruleName in classesFromUseStyles) {\n            return;\n        }\n        const className = classesFromProps[ruleName];\n        //...Same here, that why we don't do className === undefined\n        if (typeof className !== \"string\") {\n            return;\n        }\n        out[ruleName] = className;\n    });\n    return out;\n}\nexports.mergeClasses = mergeClasses;\nfunction useMergedClasses(classes, classesOv) {\n    const { cx } = (0, cssAndCx_1.useCssAndCx)();\n    return (0, react_1.useMemo)(() => mergeClasses(classes, classesOv, cx), [classes, (0, getDependencyArrayRef_1.getDependencyArrayRef)(classesOv), cx]);\n}\nexports.useMergedClasses = useMergedClasses;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAGF,OAAO,CAACG,YAAY,GAAG,KAAK,CAAC;AACxD,MAAMC,YAAY,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAClD,MAAMC,uBAAuB,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AACxE,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMG,OAAO,GAAGH,OAAO,CAAC,OAAO,CAAC;AAChC,SAASF,YAAYA,CAACM,oBAAoB,EAAEC,gBAAgB,EAAEC,EAAE,EAAE;EAC9D;EACA,IAAI,EAAED,gBAAgB,YAAYZ,MAAM,CAAC,EAAE;IACvC,OAAOW,oBAAoB;EAC/B;EACA,MAAMG,GAAG,GAAG,CAAC,CAAC;EACd,CAAC,CAAC,EAAER,YAAY,CAACS,UAAU,EAAEJ,oBAAoB,CAAC,CAACK,OAAO,CAACC,QAAQ,IAAKH,GAAG,CAACG,QAAQ,CAAC,GAAGJ,EAAE,CAACF,oBAAoB,CAACM,QAAQ,CAAC,EAAEL,gBAAgB,CAACK,QAAQ,CAAC,CAAE,CAAC;EACxJ,CAAC,CAAC,EAAEX,YAAY,CAACS,UAAU,EAAEH,gBAAgB,CAAC,CAACI,OAAO,CAACC,QAAQ,IAAI;IAC/D,IAAIA,QAAQ,IAAIN,oBAAoB,EAAE;MAClC;IACJ;IACA,MAAMO,SAAS,GAAGN,gBAAgB,CAACK,QAAQ,CAAC;IAC5C;IACA,IAAI,OAAOC,SAAS,KAAK,QAAQ,EAAE;MAC/B;IACJ;IACAJ,GAAG,CAACG,QAAQ,CAAC,GAAGC,SAAS;EAC7B,CAAC,CAAC;EACF,OAAOJ,GAAG;AACd;AACAZ,OAAO,CAACG,YAAY,GAAGA,YAAY;AACnC,SAASD,gBAAgBA,CAACe,OAAO,EAAEC,SAAS,EAAE;EAC1C,MAAM;IAAEP;EAAG,CAAC,GAAG,CAAC,CAAC,EAAEJ,UAAU,CAACY,WAAW,EAAE,CAAC;EAC5C,OAAO,CAAC,CAAC,EAAEX,OAAO,CAACY,OAAO,EAAE,MAAMjB,YAAY,CAACc,OAAO,EAAEC,SAAS,EAAEP,EAAE,CAAC,EAAE,CAACM,OAAO,EAAE,CAAC,CAAC,EAAEX,uBAAuB,CAACe,qBAAqB,EAAEH,SAAS,CAAC,EAAEP,EAAE,CAAC,CAAC;AACzJ;AACAX,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script"}